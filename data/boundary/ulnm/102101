cpu time: 502 real time: 502 gc time: 133
Running time is 8.76% contracts
215/2455 ms

("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/pict-lib/pict/main.rkt" "/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/no-gui/plot2d.rkt" "<pkgs>/pict-lib/pict/main.rkt:99:3")
  172 ms
  (->i ((draw (-> (is-a?/c dc<%>) real? real? any)) (w real?) (h real?)) ((d (or/c #f real?)) (a (or/c #f real?))) #:pre/name (draw) draw proc does not restore the dc state after being called (... draw) (p pict?))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/plot2d/line.rkt" "no-negative-party" "(lib plot/private/plot2d/line.rkt):117:9")
  6.5 ms
  (->* ((-> any/c real?)) (real? real? #:alpha (and/c real? nonnegative?) #:color (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g430 1 0 (recursive-contract g458 #:impersonator) (list/c real? real? real?)) #:label (or/c string? #f pict?) #:samples (and/c exact-integer? positive?) #:style (or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g430 1 0 (quote transparent) (quote solid) (quote dot) (quote long-dash) (quote short-dash) (quote dot-dash)) #:width (and/c real? nonnegative?) #:x-max (or/c real? #f) #:x-min (or/c real? #f) #:y-max (or/c real? #f) #:y-min (or/c real? #f)) any)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/plot3d/renderer.rkt" "no-negative-party" "(lib plot/private/plot3d/renderer.rkt):13:8")
  6.5 ms
  (-> renderer3d? (or/c #f (-> (object/c (clear-clip-rect (-> any/c void?)) (draw-legend (-> any/c (listof legend-entry?) void?)) (end-plot (-> any/c void?)) (end-renderers (-> any/c void?)) (get-area-bounds-rect (-> any/c (vectorof ivl?))) (get-aspect-ratio (-> any/c (or/c (and/c real? nonnegative?) #f))) (get-bounds-rect (-> any/c (vectorof ivl?))) (get-clip-rect (-> any/c (vectorof ivl?))) (get-plot-metrics-functions (-> any/c (list/c (-> (vectorof (vectorof real?))) (-> (vectorof real?) (vectorof real?)) (-> (vectorof real?) (vectorof real?)) (-> (vectorof real?))))) (get-render-tasks (-> any/c render-tasks?)) (get-x-far-ticks (-> any/c (listof tick?))) (get-x-ticks (-> any/c (listof tick?))) (get-y-far-ticks (-> any/c (listof tick?))) (get-y-ticks (-> any/c (listof tick?))) (get-z-far-ticks (-> any/c (listof tick?))) (get-z-ticks (-> any/c (listof tick?))) (put-alpha (-> any/c any/c void?)) (put-arrow (->* (any/c (vectorof real?) (vectorof real?)) (boolean?) void?)) (put-arrow-head (-> any/c (or/c (and/c single-flonum? positive?) g92 g93 (and/c single-flonum? [...eric-base-types.rkt:163:27) (and/c flonum? positive?) g96 g97 (and/c flonum? [...eric-base-types.rkt:143:20) (and/c exact-rational? positive? (not/c integer?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g103 1 0 (list/c (quote =) (and/c real? nonnegative?))) (and/c real? nonnegative?) void?)) (put-background (-> any/c (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g103 1 0 (recursive-contract g438 #:impersonator) (list/c real? real? real?)) void?)) (put-brush (-> any/c (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g103 1 0 (recursive-contract g438 #:impersonator) (list/c real? real? real?)) (or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g103 1 0 (quote cross-hatch) (quote vertical-hatch) (quote horizontal-hatch) (quote crossdiag-hatch) (quote fdiagonal-hatch) (quote bdiagonal-hatch) (quote solid) (quote transparent)) void?)) (put-clip-rect (-> any/c (vectorof ivl?) void?)) (put-font-attribs (-> any/c (and/c real? nonnegative?) (or/c string? #f) (or/c (quote default) (quote decorative) (quote roman) (quote script) (quote swiss) (quote modern) (quote symbol) (quote system)) void?)) (put-font-face (-> any/c (or/c string? #f) void?)) (put-font-family (-> any/c (or/c (quote default) (quote decorative) (quote roman) (quote script) (quote swiss) (quote modern) (quote symbol) (quote system)) void?)) (put-font-size (-> any/c any/c void?)) (put-glyphs (->* (any/c (listof (vectorof real?)) (or/c string? char? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g103 1 0 (quote none) (quote fullcircle8) (quote fullcircle7) (quote fullcircle6) (quote fullcircle5) (quote fullcircle4) (quote fullcircle3) (quote fullcircle2) (quote fullcircle1) (quote bullet) (quote circle8) (quote circle7) (quote circle6) (quote circle5) (quote circle4) (quote circle3) (quote circle2) (quote circle1) (quote full8star) (quote full7star) (quote full6star) (quote full5star) (quote full4star) (quote 8star) (quote 7star) (quote 6star) (quote 5star) (quote 4star) (quote downarrow) (quote uparrow) (quote leftarrow) (quote rightarrow) (quote fulltriangleright) (quote fulltriangleleft) (quote fulltriangledown) (quote fulltriangleup) (quote triangleright) (quote triangleleft) (quote triangledown) (quote triangleup) (quote fulltriangle) (quote fulldiamond) (quote fullsquare) (quote fullcircle) (quote triangle) (quote diamond) (quote square) (quote circle) (quote o5asterisk) (quote oasterisk) (quote otimes) (quote oplus) (quote odot) (quote 5asterisk) (quote asterisk) (quote times) (quote plus) (quote pixel) (quote point) (quote dot)) (and/c real? nonnegative?)) (exact-integer?) void?)) (put-line (-> any/c (vectorof real?) (vectorof real?) void?)) (put-lines (-> any/c (listof (vectorof real?)) void?)) (put-major-pen (->* (any/c) ((or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g103 1 0 (quote dot-dash) (quote short-dash) (quote long-dash) (quote dot) (quote solid) (quote transparent))) void?)) (put-minor-pen (->* (any/c) ((or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g103 1 0 (quote dot-dash) (quote short-dash) (quote long-dash) (quote dot) (quote solid) (quote transparent))) void?)) (put-pen (-> any/c (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g103 1 0 (recursive-contract g438 #:impersonator) (list/c real? real? real?)) (and/c real? nonnegative?) (or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g103 1 0 (quote dot-dash) (quote short-dash) (quote long-dash) (quote dot) (quote solid) (quote transparent)) void?)) (put-polygon (->* (any/c (listof (vectorof real?))) ((or/c (quote front) (quote back) (quote both)) (listof boolean?)) void?)) (put-rect (-> any/c (vectorof ivl?) void?)) (put-text (->* (any/c string? (vectorof real?)) ((or/c (quote auto) (quote bottom-right) (quote bottom) (quote bottom-left) (quote right) (quote center) (quote left) (quote top-right) (quote top) (quote top-left)) real? real? boolean? exact-integer?) void?)) (put-text-foreground (-> any/c (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g103 1 0 (recursive-contract g438 #:impersonator) (list/c real? real? real?)) void?)) (reset-drawing-params (-> any/c void?)) (set-render-tasks (-> any/c any/c void?)) (start-plot (-> any/c void?)) (start-renderer (-> any/c (vectorof ivl?) void?)) (field (aspect-ratio (or/c (and/c real? nonnegative?) #f)) (bounds-rect (vectorof ivl?)) (dc (recursive-contract g322 #:impersonator)) (dc-x-min real?) (dc-x-size (and/c real? nonnegative?)) (dc-y-min real?) (dc-y-size (and/c real? nonnegative?)) (legend (listof legend-entry?)) (rx-far-ticks (listof tick?)) (rx-ticks (listof tick?)) (ry-far-ticks (listof tick?)) (ry-ticks (listof tick?)) (rz-far-ticks (listof tick?)) (rz-ticks (listof tick?)))) any)))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/draw-lib/racket/draw.rkt" "no-negative-party" "<pkgs>/draw-lib/racket/draw.rkt:80:19")
  6.5 ms
  color%/c
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/collects/racket/dict.rkt" "no-negative-party" "<collects>/racket/dict.rkt:166:2")
  6.5 ms
  (struct-type-property/c (list/c (vector/c (->i ((d dict?) (k (d) (dict-key-contract d))) ((default any/c)) any) (or/c #f (->i ((d (dict-implements/c dict-set!)) (k (d) (dict-key-contract d)) (value (d) (dict-value-contract d))) (_r void?))) (or/c #f (->i ((d (dict-implements/c dict-set)) (k (d) (dict-key-contract d)) (value (d) (dict-value-contract d))) (_r dict?))) (or/c #f (->i ((d (dict-implements/c dict-remove!)) (k (d) (dict-key-contract d))) (_r void?))) (or/c #f (->i ((d (dict-implements/c dict-remove)) (k (d) (dict-key-contract d))) (_r dict?))) (-> dict? natural?) (->i ((d dict?)) (_r (d) (or/c #f (dict-iter-contract d)))) (->i ((d dict?) (iter (d) (dict-iter-contract d))) (_r (d) (or/c #f (dict-iter-contract d)))) (->i ((d dict?) (iter (d) (dict-iter-contract d))) (_r (d) (dict-key-contract d))) (->i ((d dict?) (iter (d) (dict-iter-contract d))) (_r (d) (dict-value-contract d))) #:immutable #t) (vector/c contract? contract? contract? (or/c #f (-> dict? contract?)) (or/c #f (-> dict? contract?)) (or/c #f (-> dict? contract?)) #:immutable #t)))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/math-lib/math/private/array/typed-mutable-array.rkt" "no-negative-party" "(lib math/private/array/typed-mutable-array.rkt):41:9")
  6 ms
  (-> (struct/c Mutable-Array (vectorof index?) index? (box/c boolean?) (-> void?) (-> (vectorof index?) any/c) (-> (vectorof index?) any/c void?) vector?) (struct/c Mutable-Array (vectorof index?) any/c (box/c boolean?) any/c (-> (vectorof index?) any) (-> (vectorof index?) any/c any) any/c))
("(class bitmap-dc%)" "/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/pict-lib/pict/private/pict.rkt" "#<blame-no-swap>")
  6 ms
  (->m char? boolean?)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/draw-lib/racket/draw.rkt" "no-negative-party" "<pkgs>/draw-lib/racket/draw.rkt:99:19")
  5 ms
  (->* () (#:cap (or/c (quote round) (quote projecting) (quote butt)) #:color (or/c string? (is-a?/c color%)) #:immutable? any/c #:join (or/c (quote round) (quote bevel) (quote miter)) #:stipple (or/c #f (is-a?/c bitmap%)) #:style (or/c (quote transparent) (quote solid) (quote xor) (quote hilite) (quote dot) (quote long-dash) (quote short-dash) (quote dot-dash) (quote xor-dot) (quote xor-long-dash) (quote xor-short-dash) (quote xor-dot-dash)) #:width (real-in 0 255)) (is-a?/c pen%))
