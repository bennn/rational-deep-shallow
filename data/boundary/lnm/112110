cpu time: 625 real time: 625 gc time: 156
Running time is 16.2% contracts
418/2580 ms

("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/pict-lib/pict/main.rkt" "/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/no-gui/plot2d.rkt" "<pkgs>/pict-lib/pict/main.rkt:99:3")
  175 ms
  (->i ((draw (-> (is-a?/c dc<%>) real? real? any)) (w real?) (h real?)) ((d (or/c #f real?)) (a (or/c #f real?))) #:pre/name (draw) draw proc does not restore the dc state after being called (... draw) (p pict?))
("/users/ben_g/bnd-bench/lnm/cfg/summary.rkt" "/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/math-lib/math/private/statistics/expected-values.rkt" "(lib math/private/statistics/expected-values.rkt):19:9")
  87.5 ms
  (->* ((or/c natural? (sequence/c real?))) ((or/c #f (or/c natural? (sequence/c real?)))) any)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/math-lib/math/private/array/typed-array-struct.rkt" "no-negative-party" "(lib math/private/array/typed-array-struct.rkt):172:13")
  76 ms
  (-> (vectorof index?) index? (box/c boolean?) (-> void?) (-> (vectorof index?) any/c) (-> (vectorof index?) any/c void?) (struct/c Settable-Array (vectorof index?) any/c (box/c boolean?) any/c (-> (vectorof index?) any) (-> (vectorof index?) any/c any)))
("(class bitmap-dc%)" "/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/pict-lib/pict/main.rkt" "#<blame-no-swap>")
  33 ms
  (->*m (string?) ((or/c (is-a?/c font%) #f) any/c natural?) (values (and/c real? (not/c negative?)) (and/c real? (not/c negative?)) (and/c real? (not/c negative?)) (and/c real? (not/c negative?))))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/pict-lib/pict/main.rkt" "no-negative-party" "<pkgs>/pict-lib/pict/main.rkt:76:3")
  8 ms
  (case-> (-> pict?) (-> real? pict?) (-> real? real? pict?) (-> real? real? real? pict?) (-> real? real? real? real? pict?))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/draw-lib/racket/draw.rkt" "no-negative-party" "<pkgs>/draw-lib/racket/draw.rkt:94:19")
  7.5 ms
  region%/c
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/draw-lib/racket/draw.rkt" "no-negative-party" "<pkgs>/draw-lib/racket/draw.rkt:84:19")
  7 ms
  pen-list%/c
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/plot2d/line.rkt" "no-negative-party" "(lib plot/private/plot2d/line.rkt):346:9")
  6 ms
  (->* ((or/c natural? (sequence/c real?))) ((and/c real? nonnegative?) (or/c #f (or/c natural? (sequence/c real?))) #:alpha (and/c real? nonnegative?) #:color (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g430 1 0 (recursive-contract g458 #:impersonator) (list/c real? real? real?)) #:label (or/c string? #f pict?) #:samples (and/c exact-integer? positive?) #:style (or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g430 1 0 (quote transparent) (quote solid) (quote dot) (quote long-dash) (quote short-dash) (quote dot-dash)) #:width (and/c real? nonnegative?) #:x-max (or/c real? #f) #:x-min (or/c real? #f) #:y-max (or/c real? #f) #:y-min (or/c real? #f)) any)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/common/ticks.rkt" "no-negative-party" "(lib plot/private/common/ticks.rkt):194:10")
  6 ms
  (->* () (#:base (and/c exact-integer? positive?) #:number (and/c exact-integer? positive?)) (-> real? real? any))
("(/users/ben_g/bnd-bench/lnm/cfg/summary-adapted.rkt lnm-plot)" "(interface for predicate->variations)" "summary-adapted.rkt:26:5")
  6 ms
  (-> any/c (-> string? any) (sequence/c string?))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/draw-lib/racket/draw.rkt" "no-negative-party" "<pkgs>/draw-lib/racket/draw.rkt:54:11")
  6 ms
  (->* ((or/c path-string? input-port?)) ((or/c (quote unknown) (quote unknown/mask) (quote unknown/alpha) (quote gif) (quote gif/mask) (quote gif/alpha) (quote jpeg) (quote jpeg/alpha) (quote png) (quote png/mask) (quote png/alpha) (quote xbm) (quote xbm/alpha) (quote xpm) (quote xpm/alpha) (quote bmp) (quote bmp/alpha)) (or/c (is-a?/c color%) #f) any/c #:backing-scale (>/c 0.0) #:save-data-from-file? any/c #:try-@2x? any/c) (instanceof/c bitmap%/c))
