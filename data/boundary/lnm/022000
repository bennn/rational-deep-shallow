cpu time: 633 real time: 633 gc time: 134
Running time is 14.45% contracts
385/2665 ms

("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/pict-lib/pict/main.rkt" "/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/no-gui/plot2d.rkt" "<pkgs>/pict-lib/pict/main.rkt:99:3")
  300 ms
  (->i ((draw (-> (is-a?/c dc<%>) real? real? any)) (w real?) (h real?)) ((d (or/c #f real?)) (a (or/c #f real?))) #:pre/name (draw) draw proc does not restore the dc state after being called (... draw) (p pict?))
("/users/ben_g/bnd-bench/lnm/cfg/summary.rkt" "/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/math-lib/math/private/statistics/expected-values.rkt" "(lib math/private/statistics/expected-values.rkt):19:9")
  40 ms
  (->* ((or/c natural? (sequence/c real?))) ((or/c #f (or/c natural? (sequence/c real?)))) any)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/common/parameters.rkt" "no-negative-party" "(lib plot/private/common/parameters.rkt):135:8")
  8 ms
  (object/c-opaque (copy-from (-> any/c (recursive-contract (object/c-opaque (copy-from (-> any/c (recursive-contract g908 #:impersonator) (and/c any/c Any) void?)) (get-command (-> any/c string?)) (get-editor-margin (-> any/c (box/c (and/c real? nonnegative?)) (box/c (and/c real? nonnegative?)) void?)) (get-file (-> any/c (or/c path? string? #f))) (get-level-2 (-> any/c boolean?)) (get-margin (-> any/c (box/c (and/c real? nonnegative?)) (box/c (and/c real? nonnegative?)) void?)) (get-mode (-> any/c (or/c (quote preview) (quote file) (quote printer)))) (get-orientation (-> any/c (or/c (quote portrait) (quote landscape)))) (get-paper-name (-> any/c string?)) (get-preview-command (-> any/c string?)) (get-scaling (-> any/c (box/c (and/c real? nonnegative?)) (box/c (and/c real? nonnegative?)) void?)) (get-translation (-> any/c (box/c (and/c real? nonnegative?)) (box/c (and/c real? nonnegative?)) void?)) (set-command (-> any/c string? void?)) (set-editor-margin (-> any/c natural? natural? void?)) (set-file (-> any/c (or/c path? string? #f) void?)) (set-level-2 (-> any/c (and/c any/c Any) void?)) (set-margin (-> any/c (and/c real? nonnegative?) (and/c real? nonnegative?) void?)) (set-mode (-> any/c (or/c (quote preview) (quote file) (quote printer)) void?)) (set-orientation (-> any/c (or/c (quote portrait) (quote landscape)) void?)) (set-paper-name (-> any/c string? void?)) (set-preview-command (-> any/c string? void?)) (set-scaling (-> any/c (and/c real? nonnegative?) (and/c real? nonnegative?) void?)) (set-translation (-> any/c real? real? void?))) #:impersonator) any/c void?)) (get-command (-> any/c string?)) (get-editor-margin (-> any/c (box/c (and/c real? nonnegative?)) (box/c (and/c real? nonnegative?)) void?)) (get-file (-> any/c (or/c path? string? #f))) (get-level-2 (-> any/c boolean?)) (get-margin (-> any/c (box/c (and/c real? nonnegative?)) (box/c (and/c real? nonnegative?)) void?)) (get-mode (-> any/c (or/c (quote preview) (quote file) (quote printer)))) (get-orientation (-> any/c (or/c (quote portrait) (quote landscape)))) (get-paper-name (-> any/c string?)) (get-preview-command (-> any/c string?)) (get-scaling (-> any/c (box/c (and/c real? nonnegative?)) (box/c (and/c real? nonnegative?)) void?)) (get-translation (-> any/c (box/c (and/c real? nonnegative?)) (box/c (and/c real? nonnegative?)) void?)) (set-command (-> any/c string? void?)) (set-editor-margin (-> any/c natural? natural? void?)) (set-file (-> any/c (or/c path? string? #f) void?)) (set-level-2 (-> any/c any/c void?)) (set-margin (-> any/c (and/c real? nonnegative?) (and/c real? nonnegative?) void?)) (set-mode (-> any/c (or/c (quote preview) (quote file) (quote printer)) void?)) (set-orientation (-> any/c (or/c (quote portrait) (quote landscape)) void?)) (set-paper-name (-> any/c string? void?)) (set-preview-command (-> any/c string? void?)) (set-scaling (-> any/c (and/c real? nonnegative?) (and/c real? nonnegative?) void?)) (set-translation (-> any/c real? real? void?)))
("(interface for in-reach)" "/users/ben_g/bnd-bench/lnm/cfg/lnm-plot.rkt" "lnm-plot.rkt:42:3")
  7 ms
  (-> any/c any/c (listof string?))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/db-lib/db/main.rkt" "no-negative-party" "<pkgs>/db-lib/db/main.rkt:94:2")
  6.5 ms
  (->* (#:dsn (or/c string? #f)) (#:character-mode (or/c (quote wchar) (quote utf-8) (quote latin-1)) #:notice-handler (or/c (quote output) (quote error) output-port? procedure?) #:password (or/c string? #f) #:quirks (listof symbol?) #:strict-parameter-types? boolean? #:use-place (or/c boolean? (quote place) (quote os-thread)) #:user (or/c string? #f)) connection?)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/plot2d/contour.rkt" "no-negative-party" "(lib plot/private/plot2d/contour.rkt):84:9")
  6 ms
  (-> (-> (or/c (vector/c ivl? ivl? #:immutable #f) g462) (or/c (vector/c natural? natural? #:immutable #f) g462) 2d-sample?) (or/c (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 (quote auto) (listof real?)) (and/c exact-integer? positive?) (or/c (-> any/c (listof (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (recursive-contract g435 #:impersonator) (list/c real? real? real?)))) (listof (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (recursive-contract g435 #:impersonator) (list/c real? real? real?)))) (or/c (-> any/c (listof (and/c real? nonnegative?))) (listof (and/c real? nonnegative?))) (or/c (-> any/c (listof (or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (quote transparent) (quote solid) (quote dot) (quote long-dash) (quote short-dash) (quote dot-dash)))) (listof (or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (quote transparent) (quote solid) (quote dot) (quote long-dash) (quote short-dash) (quote dot-dash)))) (or/c (-> any/c (listof (and/c real? nonnegative?))) (listof (and/c real? nonnegative?))) (or/c string? #f pict?) (values (or/c #f (-> (vectorof ivl?) any)) (-> (object/c (clear-clip-rect (-> any/c void?)) (dc->plot (-> any/c (vectorof real?) (vectorof real?))) (draw-legend (-> any/c (listof legend-entry?) void?)) (end-plot (-> any/c void?)) (end-renderers (-> any/c void?)) (get-area-bounds-rect (-> any/c (vectorof ivl?))) (get-aspect-ratio (-> any/c (or/c (and/c real? nonnegative?) #f))) (get-bounds-rect (-> any/c (vectorof ivl?))) (get-clip-rect (-> any/c (vectorof ivl?))) (get-plot-metrics-functions (-> any/c (list/c (-> (vectorof (vectorof real?))) (-> (vectorof real?) (vectorof real?)) (-> (vectorof real?) (vectorof real?)) (-> (vectorof real?))))) (get-x-far-ticks (-> any/c (listof tick?))) (get-x-ticks (-> any/c (listof tick?))) (get-y-far-ticks (-> any/c (listof tick?))) (get-y-ticks (-> any/c (listof tick?))) (plot->dc (-> any/c (vectorof real?) (vectorof real?))) (put-alpha (-> any/c any/c void?)) (put-arrow (->* (any/c (vectorof real?) (vectorof real?)) (boolean?) void?)) (put-arrow-head (-> any/c (or/c (and/c single-flonum? positive?) g490 g491 (and/c single-flonum? [...eric-base-types.rkt:163:27) (and/c flonum? positive?) g494 g495 (and/c flonum? [...eric-base-types.rkt:143:20) (and/c exact-rational? positive? (not/c integer?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (list/c (quote =) (and/c real? nonnegative?))) (and/c real? nonnegative?) void?)) (put-background (-> any/c (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (recursive-contract g433 #:impersonator) (list/c real? real? real?)) void?)) (put-brush (-> any/c (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (recursive-contract g433 #:impersonator) (list/c real? real? real?)) (or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (quote transparent) (quote solid) (quote bdiagonal-hatch) (quote fdiagonal-hatch) (quote crossdiag-hatch) (quote horizontal-hatch) (quote vertical-hatch) (quote cross-hatch)) void?)) (put-clip-rect (-> any/c (vectorof ivl?) void?)) (put-font-attribs (-> any/c (and/c real? nonnegative?) (or/c string? #f) (or/c (quote default) (quote decorative) (quote roman) (quote script) (quote swiss) (quote modern) (quote symbol) (quote system)) void?)) (put-font-size (-> any/c any/c void?)) (put-glyphs (-> any/c (listof (vectorof real?)) (or/c string? char? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (quote dot) (quote point) (quote pixel) (quote plus) (quote times) (quote asterisk) (quote 5asterisk) (quote odot) (quote oplus) (quote otimes) (quote oasterisk) (quote o5asterisk) (quote circle) (quote square) (quote diamond) (quote triangle) (quote fullcircle) (quote fullsquare) (quote fulldiamond) (quote fulltriangle) (quote triangleup) (quote triangledown) (quote triangleleft) (quote triangleright) (quote fulltriangleup) (quote fulltriangledown) (quote fulltriangleleft) (quote fulltriangleright) (quote rightarrow) (quote leftarrow) (quote uparrow) (quote downarrow) (quote 4star) (quote 5star) (quote 6star) (quote 7star) (quote 8star) (quote full4star) (quote full5star) (quote full6star) (quote full7star) (quote full8star) (quote circle1) (quote circle2) (quote circle3) (quote circle4) (quote circle5) (quote circle6) (quote circle7) (quote circle8) (quote bullet) (quote fullcircle1) (quote fullcircle2) (quote fullcircle3) (quote fullcircle4) (quote fullcircle5) (quote fullcircle6) (quote fullcircle7) (quote fullcircle8) (quote none)) (and/c real? nonnegative?) void?)) (put-line (-> any/c (vectorof real?) (vectorof real?) void?)) (put-lines (-> any/c (listof (vectorof real?)) void?)) (put-major-pen (->* (any/c) ((or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (quote transparent) (quote solid) (quote dot) (quote long-dash) (quote short-dash) (quote dot-dash))) void?)) (put-minor-pen (->* (any/c) ((or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (quote transparent) (quote solid) (quote dot) (quote long-dash) (quote short-dash) (quote dot-dash))) void?)) (put-pen (->* (any/c (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (recursive-contract g433 #:impersonator) (list/c real? real? real?)) (and/c real? nonnegative?) (or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (quote transparent) (quote solid) (quote dot) (quote long-dash) (quote short-dash) (quote dot-dash))) ((or/c (quote round) (quote projecting) (quote butt))) void?)) (put-pict (->* (any/c pict? (vectorof real?)) ((or/c (quote auto) (quote bottom-right) (quote bottom) (quote bottom-left) (quote right) (quote center) (quote left) (quote top-right) (quote top) (quote top-left)) real?) void?)) (put-polygon (-> any/c (listof (vectorof real?)) void?)) (put-rect (-> any/c (vectorof ivl?) void?)) (put-text (->* (any/c string? (vectorof real?)) ((or/c (quote auto) (quote bottom-right) (quote bottom) (quote bottom-left) (quote right) (quote center) (quote left) (quote top-right) (quote top) (quote top-left)) real? real? boolean?) void?)) (put-text-foreground (-> any/c (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g396 1 0 (recursive-contract g433 #:impersonator) (list/c real? real? real?)) void?)) (put-tick (-> any/c (vectorof real?) real? real? void?)) (reset-drawing-params (-> any/c void?)) (start-plot (-> any/c void?)) (start-renderer (-> any/c (vectorof ivl?) void?)) (field (aspect-ratio (or/c (and/c real? nonnegative?) #f)) (bounds-rect (vectorof ivl?)) (dc (recursive-contract (object/c (cache-font-metrics-key (-> any/c exact-integer?)) (clear (-> any/c void?)) (copy (-> any/c real? real? (and/c real? nonnegative?) (and/c real? nonnegative?) real? real? void?)) (draw-arc (-> any/c real? real? (and/c real? nonnegative?) (and/c real? nonnegative?) real? real? void?)) (draw-bitmap (->* (any/c (recursive-contract g564 #:impersonator) real? real?) ((or/c (quote solid) (quote opaque) (quote xor)) (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract g426 #:impersonator) (recursive-contract g426 #:impersonator))) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator) g382)) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator) (or/c #f (recursive-contract g564 #:impersonator))) boolean?)) (draw-bitmap-section (->* (any/c (recursive-contract g564 #:impersonator) real? real? real? real? (and/c real? nonnegative?) (and/c real? nonnegative?)) ((or/c (quote solid) (quote opaque) (quote xor)) (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract g426 #:impersonator) (recursive-contract g426 #:impersonator))) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator) g382)) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator) (or/c #f (recursive-contract g564 #:impersonator))) boolean?)) (draw-ellipse (-> any/c real? real? (and/c real? nonnegative?) (and/c real? nonnegative?) void?)) (draw-line (-> any/c real? real? real? real? void?)) (draw-lines (->* (any/c (or/c (listof (object/c-opaque (get-x (-> any/c real?)) (get-y (-> any/c real?)) (set-x (-> any/c real? void?)) (set-y (-> any/c real? void?)))) (listof (cons/c real? real?)))) (real? real?) void?)) (draw-path (->* (any/c (recursive-contract g682 #:impersonator)) (real? real? (or/c (quote odd-even) (quote winding))) void?)) (draw-point (-> any/c real? real? void?)) (draw-polygon (->* (any/c (or/c (listof (object/c-opaque (get-x (-> any/c real?)) (get-y (-> any/c real?)) (set-x (-> any/c real? void?)) (set-y (-> any/c real? void?)))) (listof (cons/c real? real?)))) (real? real? (or/c (quote odd-even) (quote winding))) void?)) (draw-rectangle (-> any/c real? real? (and/c real? nonnegative?) (and/c real? nonnegative?) void?)) (draw-rounded-rectangle (->* (any/c real? real? (and/c real? nonnegative?) (and/c real? nonnegative?)) (real?) void?)) (draw-spline (-> any/c real? real? real? real? real? real? void?)) (draw-text (->* (any/c string? number? number?) ((and/c any/c Any) natural? real?) void?)) (end-doc (-> any/c void?)) (end-page (-> any/c void?)) (erase (-> any/c void?)) (flush (-> any/c void?)) (get-alpha (-> any/c (and/c real? nonnegative?))) (get-background (-> any/c (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract g426 #:impersonator) (recursive-contract g426 #:impersonator))) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator))) (get-brush (-> any/c (recursive-contract g628 #:impersonator))) (get-char-height (-> any/c (and/c real? nonnegative?))) (get-char-width (-> any/c (and/c real? nonnegative?))) (get-clipping-region (-> any/c (or/c #f (recursive-contract g848 #:impersonator)))) (get-device-scale (-> any/c (values (and/c real? nonnegative?) (and/c real? nonnegative?)))) (get-font (-> any/c (object/c (get-face (-> any/c (or/c string? #f))) (get-family (-> any/c (or/c (quote default) (quote decorative) (quote roman) (quote script) (quote swiss) (quote modern) (quote symbol) (quote system)))) (get-hinting (-> any/c (or/c (quote aligned) (quote unaligned)))) (get-point-size (-> any/c (and/c exact-integer? positive?))) (get-size (-> any/c (and/c real? nonnegative?))) (get-size-in-pixels (-> any/c boolean?)) (get-smoothing (-> any/c (or/c (quote default) (quote partly-smoothed) (quote smoothed) (quote unsmoothed)))) (get-style (-> any/c (or/c (quote normal) (quote italic) (quote slant)))) (get-underlined (-> any/c boolean?)) (get-weight (-> any/c (or/c (quote normal) (quote bold) (quote light)))) (screen-glyph-exists? (->* (any/c char?) ((and/c any/c Any)) boolean?))))) (get-gl-context (-> any/c (or/c #f (object/c (call-as-current (->* (any/c (-> (and/c any/c Any))) ((evt/c (and/c any/c Any)) (and/c any/c Any)) any/c)) (get-handle (-> any/c any/c)) (ok? (-> any/c boolean?)) (swap-buffers (-> any/c void?)))))) (get-initial-matrix (-> any/c (or/c (vector/c real? real? real? real? real? real? #:immutable #t) (vector/c real? real? real? real? real? real? #:immutable #f)))) (get-origin (-> any/c (values real? real?))) (get-path-bounding-box (-> any/c (recursive-contract g682 #:impersonator) (or/c (quote path) (quote stroke) (quote fill)) (values real? real? real? real?))) (get-pen (-> any/c (recursive-contract g709 #:impersonator))) (get-rotation (-> any/c real?)) (get-scale (-> any/c (values real? real?))) (get-size (-> any/c (values (and/c real? nonnegative?) (and/c real? nonnegative?)))) (get-smoothing (-> any/c (or/c (quote unsmoothed) (quote smoothed) (quote aligned)))) (get-text-background (-> any/c (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract g426 #:impersonator) (recursive-contract g426 #:impersonator))) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator))) (get-text-extent (->* (any/c string?) ((or/c #f (object/c-opaque (get-face (-> any/c (or/c string? #f))) (get-family (-> any/c (or/c (quote default) (quote decorative) (quote roman) (quote script) (quote swiss) (quote modern) (quote symbol) (quote system)))) (get-hinting (-> any/c (or/c (quote aligned) (quote unaligned)))) (get-point-size (-> any/c (and/c exact-integer? positive?))) (get-size (-> any/c (and/c real? nonnegative?))) (get-size-in-pixels (-> any/c boolean?)) (get-smoothing (-> any/c (or/c (quote default) (quote partly-smoothed) (quote smoothed) (quote unsmoothed)))) (get-style (-> any/c (or/c (quote normal) (quote italic) (quote slant)))) (get-underlined (-> any/c boolean?)) (get-weight (-> any/c (or/c (quote normal) (quote bold) (quote light)))) (screen-glyph-exists? (->* (any/c char?) (any/c) boolean?)))) (and/c any/c Any) natural?) (values (and/c real? nonnegative?) (and/c real? nonnegative?) (and/c real? nonnegative?) (and/c real? nonnegative?)))) (get-text-foreground (-> any/c (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract g426 #:impersonator) (recursive-contract g426 #:impersonator))) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator))) (get-text-mode (-> any/c (or/c (quote solid) (quote transparent)))) (get-transformation (-> any/c (or/c (vector/c (or/c (vector/c real? real? real? real? real? real? #:immutable #t) (vector/c real? real? real? real? real? real? #:immutable #f)) real? real? real? real? real? #:immutable #t) (vector/c (or/c (vector/c real? real? real? real? real? real? #:immutable #t) (vector/c real? real? real? real? real? real? #:immutable #f)) real? real? real? real? real? #:immutable #f)))) (glyph-exists? (-> any/c char? boolean?)) (ok? (-> any/c boolean?)) (resume-flush (-> any/c void?)) (rotate (-> any/c real? void?)) (scale (-> any/c real? real? void?)) (set-alignment-scale (-> any/c real? void?)) (set-alpha (-> any/c (and/c real? nonnegative?) void?)) (set-background (-> any/c (or/c string? (recursive-contract g433 #:impersonator)) void?)) (set-brush (case-> (-> any/c (recursive-contract g616 #:impersonator) void?) (-> any/c (or/c string? (recursive-contract g433 #:impersonator)) (or/c (quote transparent) (quote solid) (quote opaque) (quote xor) (quote hilite) (quote panel) (quote bdiagonal-hatch) (quote crossdiag-hatch) (quote fdiagonal-hatch) (quote cross-hatch) (quote horizontal-hatch) (quote vertical-hatch)) void?))) (set-clipping-rect (-> any/c real? real? (and/c real? nonnegative?) (and/c real? nonnegative?) void?)) (set-clipping-region (-> any/c (or/c #f (recursive-contract g844 #:impersonator)) void?)) (set-font (-> any/c (object/c-opaque (get-face (-> any/c (or/c string? #f))) (get-family (-> any/c (or/c (quote default) (quote decorative) (quote roman) (quote script) (quote swiss) (quote modern) (quote symbol) (quote system)))) (get-hinting (-> any/c (or/c (quote aligned) (quote unaligned)))) (get-point-size (-> any/c (and/c exact-integer? positive?))) (get-size (-> any/c (and/c real? nonnegative?))) (get-size-in-pixels (-> any/c boolean?)) (get-smoothing (-> any/c (or/c (quote default) (quote partly-smoothed) (quote smoothed) (quote unsmoothed)))) (get-style (-> any/c (or/c (quote normal) (quote italic) (quote slant)))) (get-underlined (-> any/c boolean?)) (get-weight (-> any/c (or/c (quote normal) (quote bold) (quote light)))) (screen-glyph-exists? (->* (any/c char?) (any/c) boolean?))) void?)) (set-initial-matrix (-> any/c (or/c (vector/c real? real? real? real? real? real? #:immutable #t) (vector/c real? real? real? real? real? real? #:immutable #f)) void?)) (set-origin (-> any/c real? real? void?)) (set-pen (case-> (-> any/c (recursive-contract g707 #:impersonator) void?) (-> any/c (or/c string? (recursive-contract g433 #:impersonator)) real? (or/c (quote transparent) (quote solid) (quote xor) (quote hilite) (quote dot) (quote long-dash) (quote short-dash) (quote dot-dash) (quote xor-dot) (quote xor-long-dash) (quote xor-short-dash) (quote xor-dot-dash)) void?))) (set-rotation (-> any/c real? void?)) (set-scale (-> any/c real? real? void?)) (set-smoothing (-> any/c (or/c (quote unsmoothed) (quote smoothed) (quote aligned)) void?)) (set-text-background (-> any/c (or/c string? (recursive-contract g433 #:impersonator)) void?)) (set-text-foreground (-> any/c (or/c string? (recursive-contract g433 #:impersonator)) void?)) (set-text-mode (-> any/c (or/c (quote solid) (quote transparent)) void?)) (set-transformation (-> any/c (or/c (vector/c (or/c (vector/c real? real? real? real? real? real? #:immutable #t) (vector/c real? real? real? real? real? real? #:immutable #f)) real? real? real? real? real? #:immutable #t) (vector/c (or/c (vector/c real? real? real? real? real? real? #:immutable #t) (vector/c real? real? real? real? real? real? #:immutable #f)) real? real? real? real? real? #:immutable #f)) void?)) (start-doc (-> any/c any/c void?)) (start-page (-> any/c void?)) (suspend-flush (-> any/c void?)) (transform (-> any/c (or/c (vector/c real? real? real? real? real? real? #:immutable #t) (vector/c real? real? real? real? real? real? #:immutable #f)) void?)) (translate (-> any/c real? real? void?)) (try-color (-> any/c (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract g426 #:impersonator) (recursive-contract g426 #:impersonator))) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator) g382)) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator) (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract g426 #:impersonator) (recursive-contract g426 #:impersonator))) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator) g382)) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator) void?))) #:impersonator)) (dc-x-min real?) (dc-x-size (and/c real? nonnegative?)) (dc-y-min real?) (dc-y-size (and/c real? nonnegative?)) (legend (listof legend-entry?)) (rx-far-ticks (listof tick?)) (rx-ticks (listof tick?)) (ry-far-ticks (listof tick?)) (ry-ticks (listof tick?)))) any)))
("(class bitmap-dc%)" "/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/pict-lib/pict/private/pict.rkt" "#<blame-no-swap>")
  6 ms
  (->m (or/c (quote solid) (quote transparent)))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/draw-lib/racket/draw.rkt" "no-negative-party" "<pkgs>/draw-lib/racket/draw.rkt:100:19")
  6 ms
  (->* () (#:color (or/c string? (is-a?/c color%)) #:gradient (or/c #f (is-a?/c linear-gradient%) (is-a?/c radial-gradient%)) #:immutable? any/c #:stipple (or/c #f (is-a?/c bitmap%)) #:style (or/c (quote transparent) (quote solid) (quote opaque) (quote xor) (quote hilite) (quote panel) (quote bdiagonal-hatch) (quote crossdiag-hatch) (quote fdiagonal-hatch) (quote cross-hatch) (quote horizontal-hatch) (quote vertical-hatch)) #:transformation (or/c #f (vector/c (vector/c real? real? real? real? real? real?) real? real? real? real? real?))) (is-a?/c brush%))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/common/math.rkt" "no-negative-party" "(lib plot/private/common/math.rkt):260:9")
  5.5 ms
  (-> (vectorof real?) real? (vectorof real?))
