cpu time: 656 real time: 656 gc time: 133
Running time is 13.86% contracts
350/2522 ms

("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/pict-lib/pict/main.rkt" "/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/no-gui/plot2d.rkt" "pict-lib/pict/main.rkt:99:3")
  268.5 ms
  (->i ((draw (-> (is-a?/c dc<%>) real? real? any)) (w real?) (h real?)) ((d (or/c #f real?)) (a (or/c #f real?))) #:pre/name (draw) draw proc does not restore the dc state after being called (... draw) (p pict?))
("/users/ben_g/bnd-bench/lnm/cfg/summary.rkt" "/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/math-lib/math/private/statistics/expected-values.rkt" "(lib math/private/statistics/expected-values.rkt):19:9")
  54 ms
  (->* ((or/c natural? (sequence/c real?))) ((or/c #f (or/c natural? (sequence/c real?)))) any)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/common/sample.rkt" "no-negative-party" "(lib plot/private/common/sample.rkt):161:10")
  7.5 ms
  (-> (-> (-> any/c any/c any/c invertible-function?)) (-> (-> any/c any/c any/c invertible-function?)) (-> (-> any/c any/c real?) (or/c (vector/c ivl? ivl? #:immutable #f) (vector/c ivl? ivl? #:immutable #t)) (-> (or/c (vector/c ivl? ivl? #:immutable #f) (vector/c ivl? ivl? #:immutable #t)) (or/c (vector/c natural? natural? #:immutable #f) (vector/c natural? natural? #:immutable #t)) any)))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/draw-lib/racket/draw.rkt" "no-negative-party" "draw-lib/racket/draw.rkt:95:19")
  7.5 ms
  dc-path%/c
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/common/draw-attribs.rkt" "no-negative-party" "(lib plot/private/common/draw-attribs.rkt):57:9")
  6 ms
  (-> byte? byte? byte? (or/c (quote transparent) (quote solid) (quote opaque) (quote xor) (quote hilite) (quote panel) (quote bdiagonal-hatch) (quote crossdiag-hatch) (quote fdiagonal-hatch) (quote cross-hatch) (quote horizontal-hatch) (quote vertical-hatch)) (recursive-contract (object/c-opaque (get-color (-> any/c (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract (object/c-opaque (alpha (-> any/c real?)) (blue (-> any/c byte?)) (copy-from (-> any/c (recursive-contract g368 #:impersonator) (recursive-contract g368 #:impersonator))) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator) g354)) (green (-> any/c byte?)) (is-immutable? (-> any/c boolean?)) (ok? (-> any/c #t)) (red (-> any/c byte?)) (set (->* (any/c byte? byte? byte?) (real?) void?))) #:impersonator))) (get-gradient (-> any/c (or/c #f (object/c-opaque (get-circles (-> any/c (values real? real? real? real? real? real?))) (get-stops (-> any/c (listof (list/c real? (recursive-contract g375 #:impersonator)))))) (object/c-opaque (get-line (-> any/c (values real? real? real? real?))) (get-stops (-> any/c (listof (list/c real? (recursive-contract g375 #:impersonator))))))))) (get-handle (-> any/c (and/c any/c Any))) (get-stipple (-> any/c (or/c #f (recursive-contract g741 #:impersonator)))) (get-style (-> any/c (or/c (quote transparent) (quote solid) (quote opaque) (quote xor) (quote hilite) (quote panel) (quote bdiagonal-hatch) (quote crossdiag-hatch) (quote fdiagonal-hatch) (quote cross-hatch) (quote horizontal-hatch) (quote vertical-hatch)))) (get-transformation (-> any/c (or/c #f (vector/c (or/c (vector/c real? real? real? real? real? real? #:immutable #t) (vector/c real? real? real? real? real? real? #:immutable #f)) real? real? real? real? real? #:immutable #t) (vector/c (or/c (vector/c real? real? real? real? real? real? #:immutable #t) (vector/c real? real? real? real? real? real? #:immutable #f)) real? real? real? real? real? #:immutable #f)))) (is-immutable? (-> any/c boolean?)) (set-color (case-> (-> any/c (or/c string? (recursive-contract g377 #:impersonator)) void?) (-> any/c byte? byte? byte? void?))) (set-stipple (->* (any/c (or/c #f (recursive-contract g750 #:impersonator))) ((or/c #f (vector/c (or/c (vector/c real? real? real? real? real? real? #:immutable #t) (vector/c real? real? real? real? real? real? #:immutable #f)) real? real? real? real? real? #:immutable #t) (vector/c (or/c (vector/c real? real? real? real? real? real? #:immutable #t) (vector/c real? real? real? real? real? real? #:immutable #f)) real? real? real? real? real? #:immutable #f))) void?)) (set-style (-> any/c (or/c (quote transparent) (quote solid) (quote opaque) (quote xor) (quote hilite) (quote panel) (quote bdiagonal-hatch) (quote crossdiag-hatch) (quote fdiagonal-hatch) (quote cross-hatch) (quote horizontal-hatch) (quote vertical-hatch)) void?))) #:impersonator))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/draw-lib/racket/draw.rkt" "no-negative-party" "draw-lib/racket/draw.rkt:94:19")
  6 ms
  region%/c
