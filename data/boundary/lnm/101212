cpu time: 729 real time: 729 gc time: 140
Running time is 14.34% contracts
397/2768 ms

("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/pict-lib/pict/main.rkt" "/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/no-gui/plot2d.rkt" "pict-lib/pict/main.rkt:99:3")
  237.5 ms
  (->i ((draw (-> (is-a?/c dc<%>) real? real? any)) (w real?) (h real?)) ((d (or/c #f real?)) (a (or/c #f real?))) #:pre/name (draw) draw proc does not restore the dc state after being called (... draw) (p pict?))
("/users/ben_g/bnd-bench/lnm/cfg/summary.rkt" "/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/math-lib/math/private/statistics/expected-values.rkt" "(lib math/private/statistics/expected-values.rkt):19:9")
  131.5 ms
  (->* ((or/c natural? (sequence/c real?))) ((or/c #f (or/c natural? (sequence/c real?)))) any)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/draw-lib/racket/draw.rkt" "no-negative-party" "draw-lib/racket/draw.rkt:95:19")
  6.5 ms
  dc-path%/c
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/plot2d/renderer.rkt" "no-negative-party" "(lib plot/private/plot2d/renderer.rkt):13:8")
  6 ms
  (-> (or/c #f (vectorof ivl?)) (or/c #f (-> (vectorof ivl?) (vectorof ivl?))) (or/c #f (-> (vectorof ivl?) (listof (listof tick?)))) (or/c #f (-> (vectorof ivl?) (recursive-contract Treeof3066 #:flat))) (or/c #f (-> (object/c-opaque (clear-clip-rect (-> any/c void?)) (dc->plot (-> any/c (vectorof real?) (vectorof real?))) (draw-legend (-> any/c (listof legend-entry?) void?)) (end-plot (-> any/c void?)) (end-renderers (-> any/c void?)) (get-area-bounds-rect (-> any/c (vectorof ivl?))) (get-aspect-ratio (-> any/c (or/c (and/c real? nonnegative?) #f))) (get-bounds-rect (-> any/c (vectorof ivl?))) (get-clip-rect (-> any/c (vectorof ivl?))) (get-plot-metrics-functions (-> any/c (list/c (-> (vectorof (vectorof real?))) (-> (vectorof real?) (vectorof real?)) (-> (vectorof real?) (vectorof real?)) (-> (vectorof real?))))) (get-x-far-ticks (-> any/c (listof tick?))) (get-x-ticks (-> any/c (listof tick?))) (get-y-far-ticks (-> any/c (listof tick?))) (get-y-ticks (-> any/c (listof tick?))) (plot->dc (-> any/c (vectorof real?) (vectorof real?))) (put-alpha (-> any/c (and/c real? nonnegative?) void?)) (put-arrow (->* (any/c (vectorof real?) (vectorof real?)) (boolean?) void?)) (put-arrow-head (-> any/c (or/c (and/c single-flonum? positive?) g91 g92 (and/c single-flonum? [...eric-base-types.rkt:163:27) (and/c flonum? positive?) g95 g96 (and/c flonum? [...eric-base-types.rkt:143:20) (and/c exact-rational? positive? (not/c integer?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g102 1 0 (list/c (quote =) (and/c real? nonnegative?))) (and/c real? nonnegative?) void?)) (put-background (-> any/c (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g102 1 0 (recursive-contract g153 #:impersonator) (list/c real? real? real?)) void?)) (put-brush (-> any/c (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g102 1 0 (recursive-contract g153 #:impersonator) (list/c real? real? real?)) (or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g102 1 0 (quote cross-hatch) (quote vertical-hatch) (quote horizontal-hatch) (quote crossdiag-hatch) (quote fdiagonal-hatch) (quote bdiagonal-hatch) (quote solid) (quote transparent)) void?)) (put-clip-rect (-> any/c (vectorof ivl?) void?)) (put-font-attribs (-> any/c (and/c real? nonnegative?) (or/c string? #f) (or/c (quote default) (quote decorative) (quote roman) (quote script) (quote swiss) (quote modern) (quote symbol) (quote system)) void?)) (put-font-size (-> any/c (and/c real? nonnegative?) void?)) (put-glyphs (-> any/c (listof (vectorof real?)) (or/c string? char? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g102 1 0 (quote none) (quote fullcircle8) (quote fullcircle7) (quote fullcircle6) (quote fullcircle5) (quote fullcircle4) (quote fullcircle3) (quote fullcircle2) (quote fullcircle1) (quote bullet) (quote circle8) (quote circle7) (quote circle6) (quote circle5) (quote circle4) (quote circle3) (quote circle2) (quote circle1) (quote full8star) (quote full7star) (quote full6star) (quote full5star) (quote full4star) (quote 8star) (quote 7star) (quote 6star) (quote 5star) (quote 4star) (quote downarrow) (quote uparrow) (quote leftarrow) (quote rightarrow) (quote fulltriangleright) (quote fulltriangleleft) (quote fulltriangledown) (quote fulltriangleup) (quote triangleright) (quote triangleleft) (quote triangledown) (quote triangleup) (quote fulltriangle) (quote fulldiamond) (quote fullsquare) (quote fullcircle) (quote triangle) (quote diamond) (quote square) (quote circle) (quote o5asterisk) (quote oasterisk) (quote otimes) (quote oplus) (quote odot) (quote 5asterisk) (quote asterisk) (quote times) (quote plus) (quote pixel) (quote point) (quote dot)) (and/c real? nonnegative?) void?)) (put-line (-> any/c (vectorof real?) (vectorof real?) void?)) (put-lines (-> any/c (listof (vectorof real?)) void?)) (put-major-pen (->* (any/c) ((or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g102 1 0 (quote dot-dash) (quote short-dash) (quote long-dash) (quote dot) (quote solid) (quote transparent))) void?)) (put-minor-pen (->* (any/c) ((or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g102 1 0 (quote dot-dash) (quote short-dash) (quote long-dash) (quote dot) (quote solid) (quote transparent))) void?)) (put-pen (->* (any/c (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g102 1 0 (recursive-contract g153 #:impersonator) (list/c real? real? real?)) (and/c real? nonnegative?) (or/c (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g102 1 0 (quote dot-dash) (quote short-dash) (quote long-dash) (quote dot) (quote solid) (quote transparent))) ((or/c (quote round) (quote projecting) (quote butt))) void?)) (put-pict (->* (any/c pict? (vectorof real?)) ((or/c (quote auto) (quote bottom-right) (quote bottom) (quote bottom-left) (quote right) (quote center) (quote left) (quote top-right) (quote top) (quote top-left)) real?) void?)) (put-polygon (-> any/c (listof (vectorof real?)) void?)) (put-rect (-> any/c (vectorof ivl?) void?)) (put-text (->* (any/c string? (vectorof real?)) ((or/c (quote auto) (quote bottom-right) (quote bottom) (quote bottom-left) (quote right) (quote center) (quote left) (quote top-right) (quote top) (quote top-left)) real? real? boolean?) void?)) (put-text-foreground (-> any/c (or/c string? symbol? (and/c exact-integer? negative? (not/c fixnum?)) (and/c exact-integer? positive? (not/c fixnum?)) (and/c fixnum? negative?) (and/c fixnum? positive? (not/c index?)) (and/c index? positive? (not/c byte?)) g102 1 0 (recursive-contract g153 #:impersonator) (list/c real? real? real?)) void?)) (put-tick (-> any/c (vectorof real?) real? real? void?)) (reset-drawing-params (-> any/c void?)) (start-plot (-> any/c void?)) (start-renderer (-> any/c (vectorof ivl?) void?)) (field (aspect-ratio (or/c (and/c real? nonnegative?) #f)) (bounds-rect (vectorof ivl?)) (dc (recursive-contract g369 #:impersonator)) (dc-x-min #<procedure:real?>) (dc-x-size (and/c real? nonnegative?)) (dc-y-min #<procedure:real?>) (dc-y-size (and/c real? nonnegative?)) (legend (listof legend-entry?)) (rx-far-ticks (listof tick?)) (rx-ticks (listof tick?)) (ry-far-ticks (listof tick?)) (ry-ticks (listof tick?)))) void?)) any)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/draw-lib/racket/draw.rkt" "no-negative-party" "draw-lib/racket/draw.rkt:96:19")
  5.5 ms
  gl-config%/c
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/plot-lib/plot/private/no-gui/plot2d-untyped.rkt" "no-negative-party" "plot-lib/plot/private/no-gui/plot2d-untyped.rkt:15:3")
  5 ms
  (->* ((or/c (or/c renderer2d? nonrenderer?) (listof (recursive-contract (treeof elem-contract) #:flat))) (is-a?/c dc<%>) real? real? (>=/c 0) (>=/c 0)) (#:aspect-ratio (or/c (and/c rational? positive?) #f) #:legend-anchor (or/c (or/c (quote top-left) (quote top) (quote top-right) (quote left) (quote center) (quote right) (quote bottom-left) (quote bottom) (quote bottom-right)) (or/c (quote no-legend) (quote outside-global-top) (quote outside-top-left) (quote outside-top) (quote outside-top-right) (quote outside-left-top) (quote outside-left) (quote outside-left-bottom) (quote outside-right-top) (quote outside-right) (quote outside-right-bottom) (quote outside-bottom-left) (quote outside-bottom) (quote outside-bottom-right))) #:title (or/c string? pict? #f) #:x-label (or/c string? pict? #f) #:x-max (or/c real? #f) #:x-min (or/c real? #f) #:y-label (or/c string? pict? #f) #:y-max (or/c real? #f) #:y-min (or/c real? #f)) (object/c (get-plot-bounds (->m (vectorof (vector/c real? real?)))) (plot->dc (->m (vectorof real?) (vectorof real?))) (dc->plot (->m (vectorof real?) (vectorof real?))) (plane-vector (->m (vectorof real?))) (get-plot-metrics-functions (->m (list/c (-> (vectorof (vector/c real? real?))) (-> (vectorof real?) (vectorof real?)) (-> (vectorof real?) (vectorof real?)) (-> (vectorof real?)))))))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/share/pkgs/db-lib/db/base.rkt" "no-negative-party" "db-lib/db/base.rkt:311:2")
  5 ms
  (->* () (#:character-mode (or/c (quote wchar) (quote utf-8) (quote latin-1)) #:dsn string? #:notice-handler (or/c (quote output) (quote error)) #:password string? #:quirks (listof symbol?) #:strict-parameter-types? boolean? #:use-place boolean? #:user string?) data-source?)
