cpu time: 9853 real time: 9854 gc time: 302
Running time is 47.24% contracts
4989/10561 ms

("(interface for unsafe-array-proc)" "/users/ben_g/usynth/cfg/mixer.rkt" "mixer.rkt:12:3")
  1133.5 ms
  (-> any/c (-> (vectorof exact-integer?) flonum?))
("(interface for unsafe-build-array)" "/users/ben_g/usynth/cfg/array-transform.rkt" "array-transform.rkt:12:3")
  742 ms
  (-> (vectorof exact-integer?) (-> (vectorof exact-integer?) any) Array?)
("(interface for unsafe-array-proc)" "/users/ben_g/usynth/cfg/array-transform.rkt" "array-transform.rkt:10:3")
  706.5 ms
  (-> any/c (-> (vectorof exact-integer?) flonum?))
("(interface for unsafe-build-array)" "/users/ben_g/usynth/cfg/mixer.rkt" "mixer.rkt:13:3")
  650.5 ms
  (-> (vectorof exact-integer?) (-> (vectorof exact-integer?) any) Array?)
("/users/ben_g/usynth/cfg/array-utils.rkt" "/users/ben_g/usynth/cfg/synth.rkt" "array-utils.rkt:152:9")
  555 ms
  (-> (vectorof exact-integer?) exact-integer? (vectorof exact-integer?) any)
("(interface for unsafe-array-proc)" "/users/ben_g/usynth/cfg/array-broadcast.rkt" "array-broadcast.rkt:15:3")
  431 ms
  (-> any/c (-> (vectorof exact-integer?) flonum?))
("(interface for unsafe-build-array)" "/users/ben_g/usynth/cfg/array-broadcast.rkt" "array-broadcast.rkt:16:3")
  392.5 ms
  (-> (vectorof exact-integer?) (-> (vectorof exact-integer?) any) Array?)
("/users/ben_g/usynth/cfg/array-broadcast.rkt" "/users/ben_g/usynth/cfg/array-utils.rkt" "array-utils.rkt:143:9")
  318.5 ms
  (-> exact-integer? (-> (vectorof exact-integer?)))
("/users/ben_g/usynth/cfg/array-struct.rkt" "/users/ben_g/usynth/cfg/array-utils.rkt" "array-utils.rkt:63:11")
  28.5 ms
  (-> (vectorof exact-integer?) (vectorof exact-integer?) any)
("(interface for array-shape)" "/users/ben_g/usynth/cfg/array-broadcast.rkt" "array-broadcast.rkt:13:3")
  26 ms
  (-> any/c (vectorof exact-integer?))
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/collects/syntax/parse/experimental/contract.rkt" "no-negative-party" "<collects>/syntax/parse/experimental/provide.rkt:94:18")
  5 ms
  (syntax-class/c (syntax?) (#:arg? any/c #:positive (or/c syntax? string? module-path-index? (quote from-macro) (quote use-site) (quote unknown)) #:negative (or/c syntax? string? module-path-index? (quote from-macro) (quote use-site) (quote unknown)) #:name (or/c identifier? string? symbol? #f) #:macro (or/c identifier? string? symbol? #f) #:context (or/c syntax? #f) #:phase exact-integer?))
