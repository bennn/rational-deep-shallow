cpu time: 738 real time: 738 gc time: 140
Running time is 18.08% contracts
203/1120 ms

("(interface for match-up*)" "/users/ben_g/bnd-bench/fsm/cfg/main.rkt" "main.rkt:15:2")
  83.5 ms
  (-> (cons/c (vectorof automaton?) (vectorof automaton?)) any/c (cons/c (vectorof automaton?) (vectorof automaton?)))
("(interface for death-birth)" "/users/ben_g/bnd-bench/fsm/cfg/main.rkt" "main.rkt:13:2")
  66.5 ms
  (->* ((cons/c (vectorof automaton?) (vectorof automaton?)) any/c) (#:random any/c) (cons/c (vectorof automaton?) (vectorof automaton?)))
("(interface for population-payoffs)" "/users/ben_g/bnd-bench/fsm/cfg/main.rkt" "main.rkt:12:2")
  34 ms
  (-> (cons/c (vectorof automaton?) (vectorof automaton?)) (listof (and/c real? nonnegative?)))
("/users/ben_g/bnd-bench/fsm/cfg/population.rkt" "/users/ben_g/bnd-bench/fsm/cfg/utilities.rkt" "utilities.rkt:33:9")
  7 ms
  (->* ((listof (and/c real? nonnegative?)) natural?) (#:random (or/c real? #f)) any)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/collects/syntax/id-table.rkt" "no-negative-party" "(lib syntax/id-table.rkt)")
  6 ms
  (->* () (dict? #:phase (or/c #f exact-integer?)) immutable-free-id-table?)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/collects/racket/dict.rkt" "no-negative-party" "<collects>/racket/dict.rkt:166:2")
  5.5 ms
  (struct-type-property/c (list/c (vector/c (->i ((d dict?) (k (d) (dict-key-contract d))) ((default any/c)) any) (or/c #f (->i ((d (dict-implements/c dict-set!)) (k (d) (dict-key-contract d)) (value (d) (dict-value-contract d))) (_r void?))) (or/c #f (->i ((d (dict-implements/c dict-set)) (k (d) (dict-key-contract d)) (value (d) (dict-value-contract d))) (_r dict?))) (or/c #f (->i ((d (dict-implements/c dict-remove!)) (k (d) (dict-key-contract d))) (_r void?))) (or/c #f (->i ((d (dict-implements/c dict-remove)) (k (d) (dict-key-contract d))) (_r dict?))) (-> dict? natural?) (->i ((d dict?)) (_r (d) (or/c #f (dict-iter-contract d)))) (->i ((d dict?) (iter (d) (dict-iter-contract d))) (_r (d) (or/c #f (dict-iter-contract d)))) (->i ((d dict?) (iter (d) (dict-iter-contract d))) (_r (d) (dict-key-contract d))) (->i ((d dict?) (iter (d) (dict-iter-contract d))) (_r (d) (dict-value-contract d))) #:immutable #t) (vector/c contract? contract? contract? (or/c #f (-> dict? contract?)) (or/c #f (-> dict? contract?)) (or/c #f (-> dict? contract?)) #:immutable #t)))
