cpu time: 776 real time: 776 gc time: 126
Running time is 22.71% contracts
292/1286 ms

("/users/ben_g/bnd-bench/fsm/cfg/main.rkt" "/users/ben_g/bnd-bench/fsm/cfg/population.rkt" "population.rkt:76:9")
  193.5 ms
  (->* ((cons/c (vectorof automaton?) (vectorof automaton?)) natural?) (#:random (or/c real? #f)) (cons/c (vectorof automaton?) (vectorof automaton?)))
("/users/ben_g/bnd-bench/fsm/cfg/main.rkt" "/users/ben_g/bnd-bench/fsm/cfg/population.rkt" "population.rkt:54:9")
  63 ms
  (-> (cons/c (vectorof automaton?) (vectorof automaton?)) natural? (cons/c (vectorof automaton?) (vectorof automaton?)))
("(/users/ben_g/bnd-bench/fsm/cfg/automata-adapted.rkt population)" "(interface for automaton-payoff)" "automata-adapted.rkt:42:4")
  23.5 ms
  (-> any/c (and/c real? nonnegative?))
("/users/ben_g/bnd-bench/fsm/cfg/main.rkt" "/users/ben_g/bnd-bench/fsm/cfg/population.rkt" "population.rkt:48:9")
  6.5 ms
  (-> (cons/c (vectorof automaton?) (vectorof automaton?)) any)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/collects/racket/dict.rkt" "no-negative-party" "<collects>/racket/dict.rkt:166:2")
  5.5 ms
  (struct-type-property/c (list/c (vector/c (->i ((d dict?) (k (d) (dict-key-contract d))) ((default any/c)) any) (or/c #f (->i ((d (dict-implements/c dict-set!)) (k (d) (dict-key-contract d)) (value (d) (dict-value-contract d))) (_r void?))) (or/c #f (->i ((d (dict-implements/c dict-set)) (k (d) (dict-key-contract d)) (value (d) (dict-value-contract d))) (_r dict?))) (or/c #f (->i ((d (dict-implements/c dict-remove!)) (k (d) (dict-key-contract d))) (_r void?))) (or/c #f (->i ((d (dict-implements/c dict-remove)) (k (d) (dict-key-contract d))) (_r dict?))) (-> dict? natural?) (->i ((d dict?)) (_r (d) (or/c #f (dict-iter-contract d)))) (->i ((d dict?) (iter (d) (dict-iter-contract d))) (_r (d) (or/c #f (dict-iter-contract d)))) (->i ((d dict?) (iter (d) (dict-iter-contract d))) (_r (d) (dict-key-contract d))) (->i ((d dict?) (iter (d) (dict-iter-contract d))) (_r (d) (dict-value-contract d))) #:immutable #t) (vector/c contract? contract? contract? (or/c #f (-> dict? contract?)) (or/c #f (-> dict? contract?)) (or/c #f (-> dict? contract?)) #:immutable #t)))
