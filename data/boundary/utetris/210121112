cpu time: 13484 real time: 13484 gc time: 174
Running time is 28.84% contracts
4100/14217 ms

("/users/ben_g/utetris/cfg/block.rkt" "/users/ben_g/utetris/cfg/data.rkt" "data.rkt:5:9")
  2647 ms
  (-> block? real?)
  (-> block? symbol?)
  (-> real? real? symbol? block?)
("/users/ben_g/utetris/cfg/block.rkt" "/users/ben_g/utetris/cfg/bset.rkt" "block.rkt:10:9")
  1346.5 ms
  (-> block? block? any)
("(interface for blocks-union)" "/users/ben_g/utetris/cfg/elim.rkt" "elim.rkt:8:4")
  40 ms
  (-> any/c any/c (listof block?))
("(interface for blocks-move)" "/users/ben_g/utetris/cfg/elim.rkt" "elim.rkt:6:4")
  13 ms
  (-> any/c any/c any/c (listof block?))
("(interface for blocks-row)" "/users/ben_g/utetris/cfg/elim.rkt" "elim.rkt:9:4")
  11.5 ms
  (-> any/c any/c (listof block?))
("/users/ben_g/utetris/cfg/elim.rkt" "/users/ben_g/utetris/cfg/world.rkt" "elim.rkt:15:9")
  6 ms
  (-> (listof block?) any)
("/users/ben_g/utetris/cfg/tetras.rkt" "/users/ben_g/utetris/cfg/world.rkt" "tetras.rkt:38:9")
  6 ms
  (-> tetra? (listof block?) any)
("/users/ben_g/utetris/cfg/data.rkt" "/users/ben_g/utetris/cfg/main.rkt" "data.rkt:10:9")
  6 ms
  (-> world? (listof block?))
("(interface for blocks-move)" "/users/ben_g/utetris/cfg/tetras.rkt" "tetras.rkt:7:4")
  6 ms
  (-> any/c any/c any/c (listof block?))
("/users/ben_g/utetris/cfg/block.rkt" "/users/ben_g/utetris/cfg/bset.rkt" "block.rkt:15:9")
  6 ms
  (-> real? real? block? any)
("/users/ben_g/utetris/cfg/data.rkt" "/users/ben_g/utetris/cfg/tetras.rkt" "data.rkt:8:9")
  6 ms
  (-> posn? (listof block?) tetra?)
("/users/ben_g/rds-cloudlab/racket-8.6.0.2/collects/syntax/parse/experimental/contract.rkt" "no-negative-party" "<collects>/syntax/parse/experimental/provide.rkt:94:18")
  5.5 ms
  (syntax-class/c (syntax?) (#:arg? any/c #:positive (or/c syntax? string? module-path-index? (quote from-macro) (quote use-site) (quote unknown)) #:negative (or/c syntax? string? module-path-index? (quote from-macro) (quote use-site) (quote unknown)) #:name (or/c identifier? string? symbol? #f) #:macro (or/c identifier? string? symbol? #f) #:context (or/c syntax? #f) #:phase exact-integer?))
