


- - -

# Original Output

To reproduce:

 1. Apply patch to TR
 2. Recompile benchmarks
 3. Collect the logs

#### 1. TR Patch

```
diff --git a/typed-racket-lib/typed-racket/private/type-contract.rkt b/typed-racket-lib/typed-racket/private/type-contract.rkt
index 988018b7..332188f9 100644
--- a/typed-racket-lib/typed-racket/private/type-contract.rkt
+++ b/typed-racket-lib/typed-racket/private/type-contract.rkt
@@ -116,6 +116,8 @@
        (if reason (~a ": " reason) "."))
    to-check))

+(define ctclogger (make-parameter #f))
+
 ;; The cache is used to share contract definitions in the generated code
 ;; across multiple calls to type->contract.
 ;; This saves computation time and zo space for excessively large types
@@ -137,6 +139,7 @@
                  ((map fld-t (Struct-flds ty)) #f . t:->* . *typ)])]
              [else *typ]))
      (match-define (list defs ctc)
+      (parameterize ((ctclogger (from-untyped? typed-side)))
        (type->contract
         typ
         ;; this value is from the typed side (require/typed, make-predicate, etc)
@@ -147,7 +150,7 @@
         #:cache cache
         (type->contract-fail
          typ type-stx
-         #:ctc-str (if flat? "predicate" "contract"))))
+         #:ctc-str (if flat? "predicate" "contract")))))
      (ignore ; should be ignored by the optimizer
       (quasisyntax/loc stx
         (begin #,@defs (define-values (n) #,ctc))))]
@@ -343,10 +346,14 @@
       (if (eq? typed-side 'both)
         (values #f #f)
         (values typed-side (not typed-side))))
+    (define result
     (instantiate/optimize sc fail kind
       #:cache cache
       #:trusted-positive trust-pos?
-      #:trusted-negative trust-neg?)))
+      #:trusted-negative trust-neg?))
+    (when (ctclogger)
+      (printf "type->contract:~n ~s~n ~s~n ~s~n" ty sc result))
+    result))

 (define any-wrap/sc (chaperone/sc #'any-wrap/c))

```

#### 2. Recompile script

```
for X in acquire/ dungeon/ forth/ fsm/ fsmoo/ jpeg/ kcfa/ lnm/ mbta/ morsecode/ quadT/ sieve/ snake/ suffixtree/ synth/ take5/ tetris/ zombie/ ; do
  echo ${X} ; cd ${X} ;
  rm -rf cfg ; mkdir cfg ; cp typed/*rkt both/*rkt cfg/. ; cd cfg ;
  PLTSTDERR="error info@require-typed-check" DISABLE_REQUIRE_TYPED_CHECK=1 raco make main.rkt >& LOG.txt ;
  cd ../../ ;
done
```

#### 3. Collect script

```
for X in acquire dungeon forth fsm fsmoo jpeg kcfa lnm mbta morsecode quadT sieve snake suffixtree synth take5 tetris zombie ; do
  echo ${X} >> ctc-checklist.txt  ;
  echo "" >> ctc-checklist.txt ;
  cat ${X}/cfg/LOG* >> ctc-checklist.txt ;
  echo "" >> ctc-checklist.txt  ; echo "" >> ctc-checklist.txt ;
done
```


#### Finally, the Log outpu

```
acquire

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/board-adapted.rkt" (require/typed/check "board.rkt" (#:struct tile ((column : Column) (row : Row))) (tile<=? (-> Tile Tile Boolean)) (tile->string (-> Tile String)) (ALL-TILES (Listof Tile)) (STARTER-TILES# Natural) (FOUNDING (quote FOUNDING)) (GROWING (quote GROWING)) (MERGING (quote MERGING)) (SINGLETON (quote SINGLETON)) (IMPOSSIBLE (quote IMPOSSIBLE)) (deduplicate/hotel (-> (Listof Hotel) (Listof Hotel))) (make-board (-> Board)) (board-tiles (-> Board (Listof Tile))) (what-kind-of-spot (-> Board Tile SpotType)) (growing-which (-> Board Tile (Option Hotel))) (merging-which (-> Board Tile (Values (Pairof Hotel (Listof Hotel)) (Listof Hotel)))) (size-of-hotel (-> Board Hotel Natural)) (free-spot? (-> Board Tile Boolean)) (merge-hotels (-> Board Tile Hotel Board)) (found-hotel (-> Board Tile Hotel Board)) (grow-hotel (-> Board Tile Board)) (place-tile (-> Board Tile Board)) (set-board (-> Board Tile Kind (Option Hotel) Board)) (affordable? (-> Board (Listof Hotel) Cash Boolean)) (*create-board-with-hotels (-> (Listof Tile) (Listof (Pairof Hotel (Listof Tile))) Board)) (distinct-and-properly-formed (-> (Listof Tile) (-> (Listof (Pairof Hotel (Listof Tile))) Boolean)))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/board.rkt" (require/typed/check "basics.rkt" (hotel? (-> Any Boolean)) (SAFE# Natural) (price-per-share (-> Hotel Natural (Option Cash))) (shares-order? (-> Any Boolean)) (hotel->color (-> Hotel Color)) (hotel->label (-> Hotel String))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/basics.rkt" (require/typed/check "auxiliaries.rkt" (randomly-pick (-> (Listof Hotel) Hotel))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/board.rkt" (require/typed/check "auxiliaries.rkt" (aux:partition (All (A B) (-> (Listof A) (-> A Real) (-> A B) (Listof (Listof B))))) (distinct (-> (Listof Any) Boolean)) (randomly-pick (All (A) (-> (Listof A) A)))))
type->contract:
 (-> (Listof String) String)
 #<->/sc #<listof/sc #<flat/sc string?>> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g114 (simple-result-> string? 1))>) #<syntax g114>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g147 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g148 (->* (any-wrap/c) () (values g147)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g149 (or/c struct-predicate-procedure?/c struct-type-property-predicate-procedure? g148))>) #<syntax g149>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 (-> String Nonnegative-Integer (U Cash False))
 #<->/sc #<flat/sc string?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g152 (or/c exact-nonnegative-integer? (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g152))>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 (() #<syntax g149>)
type->contract:
 (-> String Symbol)
 #<->/sc #<flat/sc string?> #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g155 (simple-result-> symbol? 1))>) #<syntax g155>)
type->contract:
 (-> String String)
 #<->/sc #<flat/sc string?> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g157 (simple-result-> string? 1))>) #<syntax g157>)
type->contract:
 (All (A B) (-> (Listof A) (-> A Real) (-> A B) (Listof (Listof B))))
 #<parametric->/sc #<->/sc #<listof/sc A158> #<->/sc A158 #<or/sc #<flat/sc real?>>> #<->/sc A158 B159> #<listof/sc #<listof/sc B159>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A158 B159) (->* ((listof A158) (->* (A158) () any) (->* (A158) () (values B159))) () (values (listof (listof B159)))))>)
type->contract:
 (-> (Listof Any) Boolean)
 #<->/sc #<listof/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g162 (listof any-wrap/c))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g162) () (values g147))>)
type->contract:
 (All (A) (-> (Listof A) A))
 #<parametric->/sc #<->/sc #<listof/sc A163> A163>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A163) (->* ((listof A163)) () (values A163)))>)
type->contract:
 (-> Nonnegative-Integer Symbol tile)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g44 (flat-named-contract (quote tile?) (lambda (x) (tile? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g45 (simple-result-> g44 2))>) #<syntax g45>)
type->contract:
 (-> tile Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g47 (simple-result-> exact-nonnegative-integer? 1))>) #<syntax g47>)
type->contract:
 (-> tile Symbol)
 #<->/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g49 (simple-result-> symbol? 1))>) #<syntax g49>)
type->contract:
 (-> tile tile Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g51 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g51))>)
type->contract:
 (-> tile String)
 #<->/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g53 (simple-result-> string? 1))>) #<syntax g53>)
type->contract:
 (Listof tile)
 #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g55 (listof g44))>) #<syntax g55>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 'FOUNDING
 #<flat/sc (quote FOUNDING)>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:493:23 (quote FOUNDING)>)
type->contract:
 'GROWING
 #<flat/sc (quote GROWING)>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:493:23 (quote GROWING)>)
type->contract:
 'MERGING
 #<flat/sc (quote MERGING)>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:493:23 (quote MERGING)>)
type->contract:
 'SINGLETON
 #<flat/sc (quote SINGLETON)>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:493:23 (quote SINGLETON)>)
type->contract:
 'IMPOSSIBLE
 #<flat/sc (quote IMPOSSIBLE)>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:493:23 (quote IMPOSSIBLE)>)
type->contract:
 (-> (Listof String) (Listof String))
 #<->/sc #<listof/sc #<flat/sc string?>> #<listof/sc #<flat/sc string?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g63 (listof string?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g63))>)
type->contract:
 (-> Board)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g65 (or/c string? (quote taken-no-hotel) (quote UNTAKEN)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g66 (typed-racket-hash/c g44 g65))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () (values g66))>)
type->contract:
 (-> Board (Listof tile))
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g66) () (values g55))>)
type->contract:
 (-> Board tile SpotType)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc (quote IMPOSSIBLE)> #<flat/sc (quote SINGLETON)> #<flat/sc (quote MERGING)> #<flat/sc (quote GROWING)> #<flat/sc (quote FOUNDING)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g69 (or/c (quote IMPOSSIBLE) (quote SINGLETON) (quote MERGING) (quote GROWING) (quote FOUNDING)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g66 any/c) () (values g69))>)
type->contract:
 (-> Board tile (U False String))
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g71 (or/c string? (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g66 any/c) () (values g71))>)
type->contract:
 (-> Board tile (values (Pairof String (Listof String)) (Listof String)))
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<cons/sc #<flat/sc string?> #<listof/sc #<flat/sc string?>>> #<listof/sc #<flat/sc string?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g73 (cons/c string? g63))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g66 any/c) () (values g73 g63))>)
type->contract:
 (-> Board String Nonnegative-Integer)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<flat/sc string?> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g66 any/c) () (values exact-nonnegative-integer?))>)
type->contract:
 (-> Board tile Boolean)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g66 any/c) () (values g51))>)
type->contract:
 (-> Board tile String Board)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc string?> #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g66 any/c any/c) () (values g66))>)
type->contract:
 (-> Board tile String Board)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc string?> #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g66 any/c any/c) () (values g66))>)
type->contract:
 (-> Board tile Board)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g66 any/c) () (values g66))>)
type->contract:
 (-> Board tile Board)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g66 any/c) () (values g66))>)
type->contract:
 (-> Board tile Kind (U False String) Board)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc (quote SINGLETON)> #<flat/sc (quote MERGING)> #<flat/sc (quote GROWING)> #<flat/sc (quote FOUNDING)>> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g66 any/c any/c any/c) () (values g66))>)
type->contract:
 (-> Board (Listof String) Nonnegative-Integer Boolean)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/state-adapted.rkt" (require/typed/check "state.rkt" (score? (-> Any Boolean)) (#:struct player ((name : String) (tiles : (Listof Tile)) (money : Cash) (shares : Shares) (external : (Option (Instance Player%))))) (#:struct state ((board : Board) (players : (Listof Player)) (tiles : (Listof Tile)) (hotels : (Listof Hotel)) (shares : Shares) (bad : (Listof Player)))) (*create-player (-> String Cash Shares (Listof Tile) Player)) (player0 (-> String Tile Tile Tile Tile Tile Tile (Instance Player%) Player)) (state0 (-> Player * State)) (state-sub-shares (-> State Shares State)) (*cs0 (-> String * State)) (*create-state (-> Board (Listof Player) State)) (state-place-tile (->* (State Tile) ((Option Hotel)) State)) (state-move-tile (-> State Tile State)) (state-next-turn (-> State State)) (state-remove-current-player (-> State State)) (state-eliminate (-> State (Listof Player) State)) (state-current-player (-> State Player)) (state-buy-shares (-> State (Listof Hotel) State)) (state-return-shares (->* (State Decisions) (Board) State)) (state-score (-> State (Listof (List String Cash)))) (state-final? (-> State Boolean))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/state.rkt" (require/typed/check "basics.rkt" (ALL-HOTELS (Listof Hotel)) (CASH0 Cash) (FINAL# Natural) (SAFE# Natural) (banker-shares0 Shares) (bonus (-> M*ority Hotel Natural Cash)) (cash? (-> Any Boolean)) (player-shares0 Shares) (price-per-share (-> Hotel Natural (Option Cash))) (shares++ (-> Shares Hotel Shares)) (shares-- (-> Shares Hotel Shares)) (shares->string (-> Shares String)) (shares-available (-> Shares Hotel Share)) (shares-available? (-> Shares (Listof Hotel) Boolean)) (shares-combinable? (-> (Listof Shares) Boolean)) (shares-order? (-> Any Boolean)) (shares-minus (-> Shares Shares Shares)) (shares-plus (-> Shares Shares Shares))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/state.rkt" (require/typed/check "auxiliaries.rkt" (aux:partition (All (A B) (-> (Listof A) (-> A Real) (-> A B) (Listof (Listof B))))) (distinct (-> (Listof Any) Boolean))))
lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<listof/sc #<flat/sc string?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g66 any/c any/c) () (values g51))>)
type->contract:
 (-> (Listof tile) (Listof (Pairof String (Listof tile))) Board)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>> #<listof/sc #<cons/sc #<flat/sc string?> #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>>>> #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g66))>)
type->contract:
 (-> (Listof tile) (-> (Listof (Pairof String (Listof tile))) Boolean))
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>> #<->/sc #<listof/sc #<cons/sc #<flat/sc string?> #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>>>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g84 (->* (any/c) () (values g51)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g84))>)
type->contract:
 (Listof String)
 #<listof/sc #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g345 (listof string?))>) #<syntax g345>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Shares
 #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g350 (typed-racket-hash/c string? exact-integer?))>) #<syntax g350>)
type->contract:
 (-> M*ority String Nonnegative-Integer Nonnegative-Integer)
 #<->/sc #<or/sc #<flat/sc (quote minority)> #<flat/sc (quote majority)>> #<flat/sc string?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g352 (simple-result-> exact-nonnegative-integer? 3))>) #<syntax g352>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g354 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g355 (->* (any-wrap/c) () (values g354)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g356 (or/c struct-predicate-procedure?/c struct-type-property-predicate-procedure? g355))>) #<syntax g356>)
type->contract:
 Shares
 #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax g350>)
type->contract:
 (-> String Nonnegative-Integer (U Cash False))
 #<->/sc #<flat/sc string?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g359 (or/c exact-nonnegative-integer? (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g359))>)
type->contract:
 (-> Shares String Shares)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<flat/sc string?> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g350 any/c) () (values g350))>)
type->contract:
 (-> Shares String Shares)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<flat/sc string?> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g350 any/c) () (values g350))>)
type->contract:
 (-> Shares String)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<flat/sc string?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g350) () (values string?))>)
type->contract:
 (-> Shares String Share)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g350 any/c) () (values exact-integer?))>)
type->contract:
 (-> Shares (Listof String) Boolean)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<listof/sc #<flat/sc string?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g350 any/c) () (values g354))>)
type->contract:
 (-> (Listof Shares) Boolean)
 #<->/sc #<listof/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g366 (listof g350))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g366) () (values g354))>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 (() #<syntax g356>)
type->contract:
 (-> Shares Shares Shares)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g350 g350) () (values g350))>)
type->contract:
 (-> Shares Shares Shares)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g350 g350) () (values g350))>)
type->contract:
 (All (A B) (-> (Listof A) (-> A Real) (-> A B) (Listof (Listof B))))
 #<parametric->/sc #<->/sc #<listof/sc A370> #<->/sc A370 #<or/sc #<flat/sc real?>>> #<->/sc A370 B371> #<listof/sc #<listof/sc B371>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A370 B371) (->* ((listof A370) (->* (A370) () any) (->* (A370) () (values B371))) () (values (listof (listof B371)))))>)
type->contract:
 (-> (Listof Any) Boolean)
 #<->/sc #<listof/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g374 (listof any-wrap/c))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g374) () (values g354))>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g90 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g91 (->* (any-wrap/c) () (values g90)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g92 (or/c struct-predicate-procedure?/c struct-type-property-predicate-procedure? g91))>) #<syntax g92>)
type->contract:
 (-> String (Listof tile) Nonnegative-Integer Shares (U (Instance Player%) False) player)
 #<->/sc #<flat/sc string?> #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc (quote #f)> #<name/sc>> #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g93 (recursive-contract g135 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g94 (recursive-contract g148 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g95 (recursive-contract g152 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g96 (recursive-contract g161 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g97 (recursive-contract g167 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g98 (recursive-contract g170 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g100 (typed-racket-hash/c string? exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g101 (or/c (quote #f) g94))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g102 (flat-named-contract (quote player?) (lambda (x) (player? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g103 (->* (any/c g97) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g104 (flat-named-contract (quote state?) (lambda (x) (state? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g105 (simple-result-> void? 2))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g106 (listof string?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g107 (listof g90))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g108 (->* (any/c g106) () (values g107)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g109 (flat-named-contract (quote tile?) (lambda (x) (tile? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g110 (simple-result-> void? 2))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g111 (or/c (quote #f) g109))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g112 (or/c string? (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g113 (list/c string? g90))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g114 (listof g113))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g115 (list/c g102 g114))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g116 (listof g115))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g117 (->* (any/c) () (values g111 g112 g116)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g118 (listof g102))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g119 (->* (any/c) () (values g118)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g120 (or/c void? g118))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g121 (->* (any/c g109 string?) () (values g120)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g122 (->* (any/c) () (values g90)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g123 (or/c exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g124 (typed-racket-hash/c string? g123))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g125 (->* (any/c g124) () (values g124)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g126 (or/c string? (quote taken-no-hotel) (quote UNTAKEN)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g127 (typed-racket-hash/c g109 g126))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g128 (or/c exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g129 (listof g109))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g130 (object/c-opaque (decisions g117) (eliminated g119) (place g121) (place-called g122) (reconcile-shares g125) (field (board g127)) (field (cash g128)) (field (current g102)) (field (current-state g104)) (field (hotels g106)) (field (players ...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g131 (->* (any/c g130) () (values g111 g112 g106)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g132 (and/c any/c any-wrap/c))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g133 (->* (any/c g104 g132) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g134 (->* (g130) () (values g111 g112 g106)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g135 (object/c (go g103) (inform g105) (keep g108) (receive-tile g110) (setup g105) (take-turn g131) (the-end g133) (field (*bad g118)) (field (*players g118)) (field (choice g134)) (field (name string?))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g136 (->* (any/c g98) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g137 (->* (any/c g104) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g138 (->* (any/c g106) () (values g107)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g139 (->* (any/c g109) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g140 (->* (any/c) () (values g111 g112 g116)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g141 (->* (any/c) () (values g118)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g142 (->* (any/c g109 string?) () (values g120)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g143 (->* (any/c) () (values g90)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g144 (->* (any/c g124) () (values g124)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g145 (object/c (decisions g140) (eliminated g141) (place g142) (place-called g143) (reconcile-shares g144) (field (board g127)) (field (cash g128)) (field (current g102)) (field (current-state g104)) (field (hotels g106)) (field (players g118)) ...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g146 (->* (any/c g145) () (values g111 g112 g106)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g147 (->* (any/c g104 any/c) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g148 (object/c-opaque (go g136) (inform g137) (keep g138) (receive-tile g139) (setup g137) (take-turn g146) (the-end g147) (field (*bad g118)) (field (*players g118)) (field (choice g134)) (field (name string?))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g149 (->* (any/c g96) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g150 (->* (any/c g130) () (values g111 g112 g106)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g151 (->* (any/c g104 g132) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g152 (object/c-opaque (go g149) (inform g137) (keep g138) (receive-tile g139) (setup g137) (take-turn g150) (the-end g151) (field (*bad g118)) (field (*players g118)) (field (choice g134)) (field (name string?))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g153 (->* () () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g154 (or/c (quote done) (quote exhausted) (quote score) (quote IMPOSSIBLE)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g155 (listof g104))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g156 (list/c g154 any/c g155))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g157 (->* (any/c g128) (#:show g153) (values g156)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g158 (->* (any/c) () (values g106)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g159 (->* (any/c string? g94) () (values string?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g160 (->* (g129) () (values g109)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g161 (object/c (run g157) (show-players g158) (sign-up g159) (field (next-tile g160))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g162 (simple-result-> void? 0))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g163 (list/c g154 g132 g155))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g164 (->* (any/c g128) (#:show g162) (values g163)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g165 (->* (any/c) () (values g106)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g166 (->* (any/c string? g95) () (values string?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g167 (object/c-opaque (run g164) (show-players g165) (sign-up g166) (field (next-tile g160))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g168 (->* (any/c g128) (#:show g153) (values g163)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g169 (->* (any/c string? g93) () (values string?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g170 (object/c-opaque (run g168) (show-players g165) (sign-up g169) (field (next-tile g160))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c g100 g101) () (values g102))>)
type->contract:
 (-> player String)
 #<->/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g172 (simple-result-> string? 1))>) #<syntax g172>)
type->contract:
 (-> player (Listof tile))
 #<->/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g129))>)
type->contract:
 (-> player Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g175 (simple-result-> exact-nonnegative-integer? 1))>) #<syntax g175>)
type->contract:
 (-> player Shares)
 #<->/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g100))>)
type->contract:
 (-> player (U (Instance Player%) False))
 #<->/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))> #<or/sc #<flat/sc (quote #f)> #<name/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g178 (or/c (quote #f) g95))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g178))>)
type->contract:
 (-> Board (Listof player) (Listof tile) (Listof String) Shares (Listof player) state)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>> #<listof/sc #<flat/sc string?>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g127 any/c any/c any/c g100 any/c) () (values g104))>)
type->contract:
 (-> state Board)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g127))>)
type->contract:
 (-> state (Listof player))
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>>>
 (() #<syntax g141>)
type->contract:
 (-> state (Listof tile))
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g129))>)
type->contract:
 (-> state (Listof String))
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<listof/sc #<flat/sc string?>>>
 (() #<syntax g158>)
type->contract:
 (-> state Shares)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g100))>)
type->contract:
 (-> state (Listof player))
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>>>
 (() #<syntax g141>)
type->contract:
 (-> String Nonnegative-Integer Shares (Listof tile) player)
 #<->/sc #<flat/sc string?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>> #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c g100 any/c) () (values g102))>)
type->contract:
 (-> String tile tile tile tile tile tile (Instance Player%) player)
 #<->/sc #<flat/sc string?> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<name/sc> #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c any/c any/c any/c g94) () (values g102))>)
type->contract:
 (-> player * state)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () #:rest any/c (values g104))>)
type->contract:
 (-> state Shares state)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g100) () (values g104))>)
type->contract:
 (-> String * state)
 #<->/sc #<listof/sc #<flat/sc string?>> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () #:rest any/c (values g104))>)
type->contract:
 (-> Board (Listof player) state)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g127 any/c) () (values g104))>)
type->contract:
 (->* (state tile) ((U False String)) state)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) (any/c) (values g104))>)
type->contract:
 (-> state tile state)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g194 (simple-result-> g104 2))>) #<syntax g194>)
type->contract:
 (-> state state)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g196 (simple-result-> g104 1))>) #<syntax g196>)
type->contract:
 (-> state state)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))>>
 (() #<syntax g196>)
type->contract:
 (-> state (Listof player) state)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))>>
 (() #<syntax g194>)
type->contract:
 (-> state player)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g200 (simple-result-> g102 1))>) #<syntax g200>)
type->contract:
 (-> state (Listof String) state)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<listof/sc #<flat/sc string?>> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))>>
 (() #<syntax g194>)
type->contract:
 (->* (state Decisions) (Board) state)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<listof/sc #<list/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))> #<listof/sc #<list/sc #<flat/sc string?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>>> #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/main.rkt" (require/typed/check "admin.rkt" (administrator% Administrator%)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/tree.rkt" (require/typed/check "basics.rkt" (shares-available? (-> Shares (Listof Hotel) Boolean)) (shares-order? (-> Any Boolean))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/admin.rkt" (require/typed/check "basics.rkt" (ALL-HOTELS (Listof Hotel)) (hotel? (-> Any Boolean)) (shares-available? (-> Shares (Listof Hotel) Boolean)) (shares? (-> Any Boolean)) (shares-order? (-> Any Boolean))))
 (->* (any/c any/c) (g127) (values g104))>)
type->contract:
 (-> state Score)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<listof/sc #<list/sc #<flat/sc string?> #<or/sc #<flat/sc exact-nonnegative-integer?>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g204 (list/c string? exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g205 (listof g204))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g205))>)
type->contract:
 (-> state Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax g143>)
type->contract:
 (-> Shares (Listof String) Boolean)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<listof/sc #<flat/sc string?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g255 (typed-racket-hash/c string? exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g256 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g255 any/c) () (values g256))>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g258 (->* (any-wrap/c) () (values g256)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g259 (or/c struct-predicate-procedure?/c struct-type-property-predicate-procedure? g258))>) #<syntax g259>)
type->contract:
 (All (A) (-> Nonnegative-Integer Nonnegative-Integer (-> A) A))
 #<parametric->/sc #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<->/sc A236> A236>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A236) (->* (any/c any/c (->* () () (values A236))) () (values A236)))>)
type->contract:
 (All (A) (-> A Boolean))
 #<parametric->/sc #<->/sc A238 #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g240 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A238) (->* (A238) () (values g240)))>)
type->contract:
 (Listof String)
 #<listof/sc #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g242 (listof string?))>) #<syntax g242>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g244 (->* (any-wrap/c) () (values g240)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/main.rkt" (require/typed/check "player.rkt" (random-players (-> Natural (Listof (Instance Player%)))) (ordered-players (-> Natural (Listof (Instance Player%)))) (inf-loop-player (-> Natural (Instance Player%)))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/player.rkt" (require/typed/check "admin.rkt" (administrator% Administrator%) (turn% Turn%)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/player.rkt" (require/typed/check "basics.rkt" (player-shares0 Shares) (*combine-shares (-> (Listof Shares) Shares)) (shares-minus (-> Shares Shares Shares)) (banker-shares0 Shares)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/player.rkt" (require/typed/check "strategy.rkt" (ordered-s Strategy) (random-s Strategy)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/strategy.rkt" (require/typed/check "basics.rkt" (ALL-HOTELS (Listof Hotel)) (SHARES-PER-TURN# Integer) (hotel<=? (-> Hotel Hotel Boolean)) (price-per-share (-> Hotel Natural (Option Cash))) (shares++ (-> Shares Hotel Shares)) (shares-- (-> Shares Hotel Shares)) (shares-available (-> Shares Hotel Share))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/strategy.rkt" (require/typed/check "auxiliaries.rkt" (randomly-pick (All (A) (-> (Listof A) A)))))
 (define g245 (or/c struct-predicate-procedure?/c struct-type-property-predicate-procedure? g244))>) #<syntax g245>)
type->contract:
 (-> Shares (Listof String) Boolean)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<listof/sc #<flat/sc string?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g247 (typed-racket-hash/c string? exact-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g247 any/c) () (values g240))>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 (() #<syntax g245>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 (() #<syntax g245>)
type->contract:
 (Listof String)
 #<listof/sc #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g31 (listof string?))>) #<syntax g31>)
type->contract:
 Share
 #<or/sc #<flat/sc exact-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1587:41 exact-integer?>)
type->contract:
 (-> String String Boolean)
 #<->/sc #<flat/sc string?> #<flat/sc string?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g34 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g34))>)
type->contract:
 (-> String Nonnegative-Integer (U Cash False))
 #<->/sc #<flat/sc string?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g36 (or/c exact-nonnegative-integer? (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g36))>)
type->contract:
 (-> Shares String Shares)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<flat/sc string?> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g38 (typed-racket-hash/c string? exact-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g38 any/c) () (values g38))>)
type->contract:
 (-> Shares String Shares)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<flat/sc string?> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g38 any/c) () (values g38))>)
type->contract:
 (-> Shares String Share)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g38 any/c) () (values exact-integer?))>)
type->contract:
 (All (A) (-> (Listof A) A))
 #<parametric->/sc #<->/sc #<listof/sc A41> A41>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A41) (->* ((listof A41)) () (values A41)))>)
type->contract:
 Administrator%
 #<name/sc>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g115 (recursive-contract g156 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g116 (recursive-contract g169 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g117 (recursive-contract g173 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g112 (recursive-contract g185 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g113 (recursive-contract g195 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g114 (recursive-contract g201 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g118 (recursive-contract g202 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g119 (recursive-contract g203 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g120 (recursive-contract g204 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g122 (->* (any/c g119) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g123 (flat-named-contract (quote state?) (lambda (x) (state? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g124 (simple-result-> void? 2))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g125 (listof string?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g126 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g127 (listof g126))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g128 (->* (any/c g125) () (values g127)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g129 (flat-named-contract (quote tile?) (lambda (x) (tile? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g130 (simple-result-> void? 2))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g131 (or/c (quote #f) g129))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g132 (or/c string? (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g133 (flat-named-contract (quote player?) (lambda (x) (player? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g134 (list/c string? g126))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g135 (listof g134))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g136 (list/c g133 g135))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g137 (listof g136))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g138 (->* (any/c) () (values g131 g132 g137)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g139 (listof g133))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g140 (->* (any/c) () (values g139)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g141 (or/c void? g139))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g142 (->* (any/c g129 string?) () (values g141)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g143 (->* (any/c) () (values g126)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g144 (or/c exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g145 (typed-racket-hash/c string? g144))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g146 (->* (any/c g145) () (values g145)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g147 (or/c string? (quote taken-no-hotel) (quote UNTAKEN)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g148 (typed-racket-hash/c g129 g147))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g149 (or/c exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g150 (listof g129))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g151 (object/c-opaque (decisions g138) (eliminated g140) (place g142) (place-called g143) (reconcile-shares g146) (field (board g148)) (field (cash g149)) (field (current g133)) (field (current-state g123)) (field (hotels g125)) (field (players ...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g152 (->* (any/c g151) () (values g131 g132 g125)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g153 (and/c any/c any-wrap/c))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g154 (->* (any/c g123 g153) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g155 (->* (g151) () (values g131 g132 g125)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g156 (object/c (go g122) (inform g124) (keep g128) (receive-tile g130) (setup g124) (take-turn g152) (the-end g154) (field (*bad g139)) (field (*players g139)) (field (choice g155)) (field (name string?))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g157 (->* (any/c g120) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g158 (->* (any/c g123) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g159 (->* (any/c g125) () (values g127)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g160 (->* (any/c g129) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g161 (->* (any/c) () (values g131 g132 g137)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g162 (->* (any/c) () (values g139)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g163 (->* (any/c g129 string?) () (values g141)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g164 (->* (any/c) () (values g126)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g165 (->* (any/c g145) () (values g145)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g166 (object/c (decisions g161) (eliminated g162) (place g163) (place-called g164) (reconcile-shares g165) (field (board g148)) (field (cash g149)) (field (current g133)) (field (current-state g123)) (field (hotels g125)) (field (players g139)) ...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g167 (->* (any/c g166) () (values g131 g132 g125)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g168 (->* (any/c g123 any/c) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g169 (object/c-opaque (go g157) (inform g158) (keep g159) (receive-tile g160) (setup g158) (take-turn g167) (the-end g168) (field (*bad g139)) (field (*players g139)) (field (choice g155)) (field (name string?))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g170 (->* (any/c g118) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g171 (->* (any/c g151) () (values g131 g132 g125)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g172 (->* (any/c g123 g153) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g173 (object/c-opaque (go g170) (inform g158) (keep g159) (receive-tile g160) (setup g158) (take-turn g171) (the-end g172) (field (*bad g139)) (field (*players g139)) (field (choice g155)) (field (name string?))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g174 (->* () () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g175 (or/c (quote IMPOSSIBLE) (quote score) (quote exhausted) (quote done)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g176 (listof g123))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g177 (list/c g175 any/c g176))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g178 (->* (any/c g149) (#:show g174) (values g177)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g179 (->* (any/c) () (values g125)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g180 (->* (any/c string? g116) () (values string?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g184 (->* (g150) () (values g129)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g185 (let ((g178181 g178) (g179182 g179) (g180183 g180)) (class/c #:opaque #:ignore-local-member-names (init (next-tile g184)) (field (next-tile g184)) (run g178181) (show-players g179182) (sign-up g180183) (override (run g178181) (show-players ...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g186 (simple-result-> void? 0))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g187 (list/c g175 g153 g176))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g188 (->* (any/c g149) (#:show g186) (values g187)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g189 (->* (any/c) () (values g125)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g190 (->* (any/c string? g117) () (values string?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g194 (->* (g150) () (values g129)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g195 (let ((g188191 g188) (g189192 g189) (g190193 g190)) (class/c (init (next-tile g194)) (field (next-tile g184)) (run g188191) (show-players g189192) (sign-up g190193) (override (run g188191) (show-players g189192) (sign-up g190193)) (super (r...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g196 (->* (any/c g149) (#:show g174) (values g187)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g197 (->* (any/c string? g115) () (values string?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g201 (let ((g196198 g196) (g189199 g189) (g197200 g197)) (class/c #:opaque #:ignore-local-member-names (init (next-tile g184)) (field (next-tile g184)) (run g196198) (show-players g189199) (sign-up g197200) (override (run g196198) (show-players ...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g202 (object/c (run g178) (show-players g179) (sign-up g180) (field (next-tile g184))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g203 (object/c-opaque (run g188) (show-players g189) (sign-up g190) (field (next-tile g184))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g204 (object/c-opaque (run g196) (show-players g189) (sign-up g197) (field (next-tile g184))))>) #<syntax g114>)
type->contract:
 Turn%
 #<class/sc #<->/sc #<any/sc> #<or/sc #<flat/sc (quote #f)> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<listof/sc #<list/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))> #<listof/sc #<list/sc #<flat/sc string?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>>>> #<->/sc #<any/sc> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>>> #<->/sc #<any/sc> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc string?> #<or/sc #<flat/sc void?> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>>>> #<->/sc #<any/sc> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<->/sc #<any/sc> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<listof/sc #<flat/sc string?>> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g206 (typed-racket-hash/c string? exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g207 (->* (any/c g206) () (values g206)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g213 (let ((g161208 g161) (g162209 g162) (g163210 g163) (g164211 g164) (g207212 g207)) (class/c #:opaque #:ignore-local-member-names (init (current-state g123)) (field (board g148)) (field (cash exact-nonnegative-integer?)) (field (current g133)...>) #<syntax g213>)
type->contract:
 Shares
 #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax g206>)
type->contract:
 (-> (Listof Shares) Shares)
 #<->/sc #<listof/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g216 (listof g206))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g216) () (values g206))>)
type->contract:
 (-> Shares Shares Shares)
 #<->/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g206 g206) () (values g206))>)
type->contract:
 Shares
 #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax g206>)
type->contract:
 Strategy
 #<->/sc #<object/sc #<->/sc #<any/sc> #<or/sc #<flat/sc (quote #f)> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<listof/sc #<list/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))> #<listof/sc #<list/sc #<flat/sc string?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>>>> #<->/sc #<any/sc> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>>> #<->/sc #<any/sc> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc string?> #<or/sc #<flat/sc void?> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>>>> #<->/sc #<any/sc> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<->/sc #<any/sc> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>> #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<listof/sc #<flat/sc string?>> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>>> #<or/sc #<flat/sc (quote #f)> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<listof/sc #<flat/sc string?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g220 (->* (any/c g206) () (values g206)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g221 (object/c-opaque (decisions g138) (eliminated g140) (place g142) (place-called g143) (reconcile-shares g220) (field (board g148)) (field (cash exact-nonnegative-integer?)) (field (current g133)) (field (current-state g123)) (field (hotels g...>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g221) () (values g131 g132 g125))>)
type->contract:
 Strategy
 #<->/sc #<object/sc #<->/sc #<any/sc> #<or/sc #<flat/sc (quote #f)> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<listof/sc #<list/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))> #<listof/sc #<list/sc #<flat/sc string?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>>>> #<->/sc #<any/sc> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>>> #<->/sc #<any/sc> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<flat/sc string?> #<or/sc #<flat/sc void?> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>>>> #<->/sc #<any/sc> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<->/sc #<any/sc> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>> #<hash/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote taken-no-hotel)> #<flat/sc (quote UNTAKEN)>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))> #<flat/sc (flat-named-contract (quote state?) (lambda (x) (state? x)))> #<listof/sc #<flat/sc string?>> #<listof/sc #<flat/sc (flat-named-contract (quote player?) (lambda (x) (player? x)))>> #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/acquire/cfg/main.rkt" (require/typed/check "auxiliaries.rkt" (randomly-pick (-> (Listof Tile) Tile))))
>>> #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>>> #<or/sc #<flat/sc (quote #f)> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<listof/sc #<flat/sc string?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g221) () (values g131 g132 g125))>)
type->contract:
 Administrator%
 #<name/sc>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g46 (recursive-contract g63 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g47 (recursive-contract g70 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g48 (recursive-contract g73 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g40 (recursive-contract g77 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g41 (recursive-contract g82 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g42 (recursive-contract g86 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g43 (recursive-contract g115 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g44 (recursive-contract g128 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g45 (recursive-contract g132 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g50 (or/c exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g51 (->* () () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g52 (or/c (quote IMPOSSIBLE) (quote score) (quote exhausted) (quote done)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g53 (flat-named-contract (quote state?) (lambda (x) (state? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g54 (listof g53))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g55 (list/c g52 any/c g54))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g56 (->* (any/c g50) (#:show g51) (values g55)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g57 (listof string?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g58 (->* (any/c) () (values g57)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g59 (->* (any/c string? g44) () (values string?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g60 (flat-named-contract (quote tile?) (lambda (x) (tile? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g61 (listof g60))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g62 (->* (g61) () (values g60)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g63 (object/c (run g56) (show-players g58) (sign-up g59) (field (next-tile g62))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g64 (simple-result-> void? 0))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g65 (and/c any/c any-wrap/c))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g66 (list/c g52 g65 g54))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g67 (->* (any/c g50) (#:show g64) (values g66)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g68 (->* (any/c) () (values g57)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g69 (->* (any/c string? g45) () (values string?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g70 (object/c-opaque (run g67) (show-players g68) (sign-up g69) (field (next-tile g62))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g71 (->* (any/c g50) (#:show g51) (values g66)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g72 (->* (any/c string? g43) () (values string?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g73 (object/c-opaque (run g71) (show-players g68) (sign-up g72) (field (next-tile g62))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g77 (let ((g5674 g56) (g5875 g58) (g5976 g59)) (class/c #:opaque #:ignore-local-member-names (init (next-tile g62)) (field (next-tile g62)) (run g5674) (show-players g5875) (sign-up g5976) (override (run g5674) (show-players g5875) (sign-up g597...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g81 (->* (g61) () (values g60)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g82 (let ((g6778 g67) (g6879 g68) (g6980 g69)) (class/c (init (next-tile g81)) (field (next-tile g62)) (run g6778) (show-players g6879) (sign-up g6980) (override (run g6778) (show-players g6879) (sign-up g6980)) (super (run g6778) (show-players ...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g86 (let ((g7183 g71) (g6884 g68) (g7285 g72)) (class/c #:opaque #:ignore-local-member-names (init (next-tile g62)) (field (next-tile g62)) (run g7183) (show-players g6884) (sign-up g7285) (override (run g7183) (show-players g6884) (sign-up g728...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g87 (->* (any/c g47) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g88 (simple-result-> void? 2))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g89 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g90 (listof g89))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g91 (->* (any/c g57) () (values g90)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g92 (simple-result-> void? 2))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g93 (or/c (quote #f) g60))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g94 (or/c string? (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g95 (flat-named-contract (quote player?) (lambda (x) (player? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g96 (list/c string? g89))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g97 (listof g96))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g98 (list/c g95 g97))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g99 (listof g98))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g100 (->* (any/c) () (values g93 g94 g99)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g101 (listof g95))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g102 (->* (any/c) () (values g101)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g103 (or/c void? g101))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g104 (->* (any/c g60 string?) () (values g103)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g105 (->* (any/c) () (values g89)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g106 (or/c exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g107 (typed-racket-hash/c string? g106))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g108 (->* (any/c g107) () (values g107)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g109 (or/c string? (quote UNTAKEN) (quote taken-no-hotel)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g110 (typed-racket-hash/c g60 g109))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g111 (object/c-opaque (decisions g100) (eliminated g102) (place g104) (place-called g105) (reconcile-shares g108) (field (board g110)) (field (cash g50)) (field (current g95)) (field (current-state g53)) (field (hotels g57)) (field (players g101...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g112 (->* (any/c g111) () (values g93 g94 g57)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g113 (->* (any/c g53 g65) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g114 (->* (g111) () (values g93 g94 g57)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g115 (object/c (go g87) (inform g88) (keep g91) (receive-tile g92) (setup g88) (take-turn g112) (the-end g113) (field (*bad g101)) (field (*players g101)) (field (choice g114)) (field (name string?))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g116 (->* (any/c g48) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g117 (->* (any/c g53) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g118 (->* (any/c g57) () (values g90)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g119 (->* (any/c g60) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g120 (->* (any/c) () (values g93 g94 g99)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g121 (->* (any/c) () (values g101)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g122 (->* (any/c g60 string?) () (values g103)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g123 (->* (any/c) () (values g89)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g124 (->* (any/c g107) () (values g107)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g125 (object/c (decisions g120) (eliminated g121) (place g122) (place-called g123) (reconcile-shares g124) (field (board g110)) (field (cash g50)) (field (current g95)) (field (current-state g53)) (field (hotels g57)) (field (players g101)) (fie...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g126 (->* (any/c g125) () (values g93 g94 g57)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g127 (->* (any/c g53 any/c) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g128 (object/c-opaque (go g116) (inform g117) (keep g118) (receive-tile g119) (setup g117) (take-turn g126) (the-end g127) (field (*bad g101)) (field (*players g101)) (field (choice g114)) (field (name string?))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g129 (->* (any/c g46) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g130 (->* (any/c g111) () (values g93 g94 g57)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g131 (->* (any/c g53 g65) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g132 (object/c-opaque (go g129) (inform g117) (keep g118) (receive-tile g119) (setup g117) (take-turn g130) (the-end g131) (field (*bad g101)) (field (*players g101)) (field (choice g114)) (field (name string?))))>) #<syntax g42>)
type->contract:
 (-> Nonnegative-Integer (Listof (Instance Player%)))
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<listof/sc #<name/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g134 (listof g45))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g134))>)
type->contract:
 (-> Nonnegative-Integer (Listof (Instance Player%)))
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<listof/sc #<name/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g134))>)
type->contract:
 (-> Nonnegative-Integer (Instance Player%))
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g45))>)
type->contract:
 (-> (Listof tile) tile)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>> #<flat/sc (flat-named-contract (quote tile?) (lambda (x) (tile? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g138 (simple-result-> g60 1))>) #<syntax g138>)


dungeon

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/dungeon/cfg/main.rkt" (require/typed/check "cell.rkt" (void-cell% Cell%) (wall% Cell%) (door% Door%) (vertical-door% Door%) (horizontal-door% Door%) (horizontal-wall% Cell%) (four-corner-wall% Cell%) (pillar% Cell%) (vertical-wall% Cell%) (north-west-wall% Cell%) (north-east-wall% Cell%) (south-west-wall% Cell%) (south-east-wall% Cell%) (north-tee-wall% Cell%) (west-tee-wall% Cell%) (east-tee-wall% Cell%) (south-tee-wall% Cell%) (empty-cell% Cell%)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/dungeon/cfg/cell.rkt" (require/typed/check "message-queue.rkt" (enqueue-message! (-> String Void))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/dungeon/cfg/main.rkt" (require/typed/check "grid.rkt" (array-set! (-> Grid Pos (Instance Cell%) Void)) (build-array (-> Pos (-> Any (Instance Cell%)) Grid)) (left (->* (Pos) (Index) Pos)) (right (->* (Pos) (Index) Pos)) (up (->* (Pos) (Index) Pos)) (down (->* (Pos) (Index) Pos)) (grid-ref (-> Grid Pos (U #f (Instance Cell%)))) (grid-height (-> Grid Index)) (grid-width (-> Grid Index)) (show-grid (-> Grid String))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/dungeon/cfg/grid.rkt" (require/typed/check "cell.rkt" (char->cell% (-> Char Cell%)) (void-cell% Cell%)))
type->contract:
 (-> String Void)
 #<->/sc #<flat/sc string?> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g492 (simple-result-> void? 1))>) #<syntax g492>)
type->contract:
 (-> Char Door%)
 #<->/sc #<flat/sc char?> #<name/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g57 (recursive-contract g76 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g58 (recursive-contract g86 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g59 (recursive-contract g91 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g60 (recursive-contract g92 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g61 (recursive-contract g93 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g62 (recursive-contract g93 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g64 (simple-result-> void? 1))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g65 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g66 (->* (any/c) () (values g65)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g67 (simple-result-> char? 1))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g72 (and/c any/c any-wrap/c))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g73 (listof g72))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g74 (or/c (quote #f) g61))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g75 (or/c (quote #f) g60))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g76 (let ((g6468 g64) (g6669 g66) (g6470 g64) (g6771 g67)) (class/c #:opaque #:ignore-local-member-names (init (items g73)) (init (occupant g74)) (field (items g73)) (field (occupant g75)) (close g6468) (free? g6669) (open g6470) (show g6771) (o...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g77 (->* (any/c) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g78 (->* (any/c) () (values g65)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g79 (->* (any/c) () (values char?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g84 (listof any/c))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g85 (or/c (quote #f) g62))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/dungeon/cfg/main.rkt" (require/typed/check "utils.rkt" (random (-> Integer Natural)) (random-between (-> Integer Integer Integer)) (random-from (All (A) (-> (Listof A) A))) (reset! (-> Void))))
 (define g86 (let ((g7780 g77) (g7881 g78) (g7782 g77) (g7983 g79)) (class/c (init (items g84)) (init (occupant g85)) (field (items g73)) (field (occupant g75)) (close g7780) (free? g7881) (open g7782) (show g7983) (override (close g7780) (free? g7881) (...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g91 (let ((g7787 g77) (g7888 g78) (g7789 g77) (g7990 g79)) (class/c #:opaque #:ignore-local-member-names (init (items g73)) (init (occupant g75)) (field (items g73)) (field (occupant g75)) (close g7787) (free? g7888) (open g7789) (show g7990) (o...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g92 (object/c (close g64) (free? g66) (open g64) (show g67) (field (items g73)) (field (occupant g75))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g93 (object/c-opaque (close g77) (free? g78) (open g77) (show g79) (field (items g73)) (field (occupant g75))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g59))>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g59>)
type->contract:
 (All (A) (-> (Listof A) (Listof A) (Listof A)))
 #<parametric->/sc #<->/sc #<listof/sc A177> #<listof/sc A177> #<listof/sc A177>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A177) (->* ((listof A177) (listof A177)) () (values (listof A177))))>)
type->contract:
 Door%
 #<name/sc>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g179 (recursive-contract g198 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g180 (recursive-contract g208 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g181 (recursive-contract g213 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g182 (recursive-contract g214 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g183 (recursive-contract g215 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g184 (recursive-contract g215 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g186 (simple-result-> void? 1))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g187 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g188 (->* (any/c) () (values g187)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g189 (simple-result-> char? 1))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g194 (and/c any/c any-wrap/c))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g195 (listof g194))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g196 (or/c (quote #f) g183))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g197 (or/c (quote #f) g182))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g198 (let ((g186190 g186) (g188191 g188) (g186192 g186) (g189193 g189)) (class/c #:opaque #:ignore-local-member-names (init (items g195)) (init (occupant g196)) (field (items g195)) (field (occupant g197)) (close g186190) (free? g188191) (open g...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g199 (->* (any/c) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g200 (->* (any/c) () (values g187)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g201 (->* (any/c) () (values char?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g206 (listof any/c))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g207 (or/c (quote #f) g184))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g208 (let ((g199202 g199) (g200203 g200) (g199204 g199) (g201205 g201)) (class/c (init (items g206)) (init (occupant g207)) (field (items g195)) (field (occupant g197)) (close g199202) (free? g200203) (open g199204) (show g201205) (override (clo...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g213 (let ((g199209 g199) (g200210 g200) (g199211 g199) (g201212 g201)) (class/c #:opaque #:ignore-local-member-names (init (items g195)) (init (occupant g197)) (field (items g195)) (field (occupant g197)) (close g199209) (free? g200210) (open g...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g214 (object/c (close g186) (free? g188) (open g186) (show g189) (field (items g195)) (field (occupant g197))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g215 (object/c-opaque (close g199) (free? g200) (open g199) (show g201) (field (items g195)) (field (occupant g197))))>) #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 Door%
 #<name/sc>
 (() #<syntax g181>)
type->contract:
 (-> Grid Pos (Instance Door%) Void)
 #<->/sc #<vectorof/sc #<vectorof/sc #<name/sc>>> #<vector/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>> #<name/sc> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g234 (vectorof g183))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g235 (vectorof g234))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g236 (vector/c t:index? t:index?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g235 g236 g183) () (values void?))>)
type->contract:
 (-> Pos (-> Any (Instance Door%)) Grid)
 #<->/sc #<vector/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>> #<->/sc #<any/sc> #<name/sc>> #<vectorof/sc #<vectorof/sc #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g238 (->* (any/c) () (values g183)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g239 (vectorof g184))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g240 (vectorof g239))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g236 g238) () (values g240))>)
type->contract:
 Direction
 #<->/sc #<vector/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>> #<or/sc #<flat/sc t:index?>> #<vector/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g236) (any/c) (values g236))>)
type->contract:
 Direction
 #<->/sc #<vector/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>> #<or/sc #<flat/sc t:index?>> #<vector/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g236) (any/c) (values g236))>)
type->contract:
 Direction
 #<->/sc #<vector/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>> #<or/sc #<flat/sc t:index?>> #<vector/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g236) (any/c) (values g236))>)
type->contract:
 Direction
 #<->/sc #<vector/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>> #<or/sc #<flat/sc t:index?>> #<vector/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g236) (any/c) (values g236))>)
type->contract:
 (-> Grid Pos (U (Instance Door%) False))
 #<->/sc #<vectorof/sc #<vectorof/sc #<name/sc>>> #<vector/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>> #<or/sc #<flat/sc (quote #f)> #<name/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g235 g236) () (values g207))>)
type->contract:
 (-> Grid Index)
 #<->/sc #<vectorof/sc #<vectorof/sc #<name/sc>>> #<or/sc #<flat/sc t:index?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g235) () (values t:index?))>)
type->contract:
 (-> Grid Index)
 #<->/sc #<vectorof/sc #<vectorof/sc #<name/sc>>> #<or/sc #<flat/sc t:index?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g235) () (values t:index?))>)
type->contract:
 (-> Grid String)
 #<->/sc #<vectorof/sc #<vectorof/sc #<name/sc>>> #<flat/sc string?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g235) () (values string?))>)
type->contract:
 (-> Integer Nonnegative-Integer)
 #<->/sc #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g250 (simple-result-> exact-nonnegative-integer? 1))>) #<syntax g250>)
type->contract:
 (-> Integer Integer Integer)
 #<->/sc #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g252 (simple-result-> exact-integer? 2))>) #<syntax g252>)
type->contract:
 (All (A) (-> (Listof A) A))
 #<parametric->/sc #<->/sc #<listof/sc A253> A253>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A253) (->* ((listof A253)) () (values A253)))>)
type->contract:
 (-> Void)
 #<->/sc #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g256 (simple-result-> void? 0))>) #<syntax g256>)


forth

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/forth/cfg/main.rkt" (require/typed/check "eval.rkt" (forth-eval* (-> (Listof String) (Values Any Any)))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/forth/cfg/eval.rkt" (require/typed/check "command.rkt" (CMD* (Listof (Instance Command%))) (command% Command%)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/forth/cfg/command.rkt" (require/typed/check "stack.rkt" (stack-drop (-> Stack Stack)) (stack-dup (-> Stack Stack)) (stack-init (-> Stack)) (stack-over (-> Stack Stack)) (stack-pop (-> Stack (Values Integer Stack))) (stack-push (-> Stack Integer Stack)) (stack-swap (-> Stack Stack))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/forth/cfg/eval.rkt" (require/typed/check "stack.rkt" (stack-init (-> Stack))))
type->contract:
 (-> State State)
 #<->/sc #<listof/sc #<or/sc #<flat/sc exact-integer?>>> #<listof/sc #<or/sc #<flat/sc exact-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g132 (listof exact-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g132))>)
type->contract:
 (-> State State)
 #<->/sc #<listof/sc #<or/sc #<flat/sc exact-integer?>>> #<listof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g132))>)
type->contract:
 (-> State)
 #<->/sc #<listof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () (values g132))>)
type->contract:
 (-> State State)
 #<->/sc #<listof/sc #<or/sc #<flat/sc exact-integer?>>> #<listof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g132))>)
type->contract:
 (-> State (values Integer State))
 #<->/sc #<listof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc exact-integer?>> #<listof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values exact-integer? g132))>)
type->contract:
 (-> State Integer State)
 #<->/sc #<listof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc exact-integer?>> #<listof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g132))>)
type->contract:
 (-> State State)
 #<->/sc #<listof/sc #<or/sc #<flat/sc exact-integer?>>> #<listof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g132))>)
type->contract:
 Env
 #<listof/sc #<name/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g56 (recursive-contract g71 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g57 (recursive-contract g72 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g58 (recursive-contract g72 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g62 (recursive-contract g74 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g63 (recursive-contract g76 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g64 (recursive-contract g78 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g59 (recursive-contract g66 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g60 (recursive-contract g79 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g61 (recursive-contract g80 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g66 (listof g58))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g67 (or/c exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g68 (listof g67))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g69 (and/c any/c any-wrap/c))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g70 (->* (g59 g68 g69) () (values g62)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g71 (object/c (field (descr string?)) (field (exec g70)) (field (id symbol?))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g72 (object/c-opaque (field (descr string?)) (field (exec g70)) (field (id symbol?))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g73 (cons/c g61 g68))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g74 (or/c (quote #f) g73 (quote EXIT)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g75 (cons/c g60 g68))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g76 (or/c (quote #f) g75 (quote EXIT)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g77 (cons/c g59 g68))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g78 (or/c (quote #f) g77 (quote EXIT)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g79 (listof g57))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g80 (listof g56))>) #<syntax g66>)
type->contract:
 Command%
 #<name/sc>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g81 (recursive-contract g86 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g82 (recursive-contract g88 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g83 (recursive-contract g89 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g85 (->* (g61 g68 any/c) () (values g63)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g86 (let () (class/c #:opaque #:ignore-local-member-names (init (id symbol?)) (init (descr string?)) (init (exec g85)) (field (descr string?)) (field (exec g70)) (field (id symbol?)) (override) (super) (inherit) (augment) (inherit) (absent))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g87 (->* (g60 g68 g69) () (values g64)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g88 (let () (class/c (init (id symbol?)) (init (descr string?)) (init (exec g87)) (field (descr string?)) (field (exec g70)) (field (id symbol?)) (override) (super) (inherit) (augment) (inherit) (absent))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g89 (let () (class/c #:opaque #:ignore-local-member-names (init (id symbol?)) (init (descr string?)) (init (exec g70)) (field (descr string?)) (field (exec g70)) (field (id symbol?)) (override) (super) (inherit) (augment) (inherit) (absent))))>) #<syntax g83>)
type->contract:
 (-> State)
 #<->/sc #<listof/sc #<or/sc #<flat/sc exact-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g91 (listof exact-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () (values g91))>)
type->contract:
 (-> (Listof String) (values Any Any))
 #<->/sc #<listof/sc #<flat/sc string?>> #<any/sc> #<any/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values any/c any/c))>)


fsm

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/fsm/cfg/main.rkt" (require/typed/check "population.rkt" (build-random-population (-> Natural Population)) (population-payoffs (-> Population (Listof Payoff))) (death-birth (-> Population Natural (#:random (U False Real)) Population)) (match-up* (-> Population Natural Population))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/fsm/cfg/population.rkt" (require/typed/check "utilities.rkt" (choose-randomly (-> (Listof Probability) Natural (#:random (U False Real)) (Listof Natural)))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/fsm/cfg/main.rkt" (require/typed/check "utilities.rkt" (relative-average (-> (Listof Real) Real Real))))
type->contract:
 (-> (Listof Probability) State [#:random (U False Real)] (Listof State))
 #<->/sc #<listof/sc #<or/sc #<flat/sc (and/c real? nonnegative?)>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc real?> #<flat/sc (quote #f)>> #<listof/sc #<or/sc #<flat/sc exact-nonnegative-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (listof exact-nonnegative-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) (#:random any/c) (values g39))>)
type->contract:
 (-> State Population)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<cons/sc #<vectorof/sc #<flat/sc (flat-named-contract (quote automaton?) (lambda (x) (automaton? x)))>> #<vectorof/sc #<flat/sc (flat-named-contract (quote automaton?) (lambda (x) (automaton? x)))>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g9 (flat-named-contract (quote automaton?) (lambda (x) (automaton? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g10 (vectorof g9))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g11 (cons/c g10 g10))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g11))>)
type->contract:
 (-> Population (Listof Probability))
 #<->/sc #<cons/sc #<vectorof/sc #<flat/sc (flat-named-contract (quote automaton?) (lambda (x) (automaton? x)))>> #<vectorof/sc #<flat/sc (flat-named-contract (quote automaton?) (lambda (x) (automaton? x)))>>> #<listof/sc #<or/sc #<flat/sc (and/c real? nonnegative?)>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g13 (and/c real? nonnegative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g14 (listof g13))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g11) () (values g14))>)
type->contract:
 (-> Population State [#:random (U False Real)] Population)
 #<->/sc #<cons/sc #<vectorof/sc #<flat/sc (flat-named-contract (quote automaton?) (lambda (x) (automaton? x)))>> #<vectorof/sc #<flat/sc (flat-named-contract (quote automaton?) (lambda (x) (automaton? x)))>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc real?> #<flat/sc (quote #f)>> #<cons/sc #<vectorof/sc #<flat/sc (flat-named-contract (quote automaton?) (lambda (x) (automaton? x)))>> #<vectorof/sc #<flat/sc (flat-named-contract (quote automaton?) (lambda (x) (automaton? x)))>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g11 any/c) (#:random any/c) (values g11))>)
type->contract:
 (-> Population State Population)
 #<->/sc #<cons/sc #<vectorof/sc #<flat/sc (flat-named-contract (quote automaton?) (lambda (x) (automaton? x)))>> #<vectorof/sc #<flat/sc (flat-named-contract (quote automaton?) (lambda (x) (automaton? x)))>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<cons/sc #<vectorof/sc #<flat/sc (flat-named-contract (quote automaton?) (lambda (x) (automaton? x)))>> #<vectorof/sc #<flat/sc (flat-named-contract (quote automaton?) (lambda (x) (automaton? x)))>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g11 any/c) () (values g11))>)
type->contract:
 (-> (Listof Real) Real Real)
 #<->/sc #<listof/sc #<or/sc #<flat/sc real?>>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g18 (simple-result-> real? 2))>) #<syntax g18>)


fsmoo

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/fsmoo/cfg/automata-adapted.rkt" (require/typed/check "automata.rkt" (make-random-automaton (-> Natural oAutomaton))))
type->contract:
 (-> State oAutomaton)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<name/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g7 (recursive-contract g22 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g8 (recursive-contract g28 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g9 (recursive-contract g32 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g4 (recursive-contract g9 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g5 (recursive-contract g8 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g6 (recursive-contract g7 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g11 (->* (any/c) () (values g6)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g12 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g13 (->* (any/c g5) () (values g12)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g14 (or/c exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g15 (and/c real? nonnegative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g16 (or/c g15))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g17 (->* (any/c g14 g16) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g18 (->* (any/c g5 g14) () (values g6 g6)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g19 (->* (any/c) () (values g16)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g20 (vectorof g14))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g21 (vectorof g20))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g22 (object/c (clone g11) (equal g13) (jump g17) (match-pair g18) (pay g19) (reset g11) (field (current g14)) (field (original g14)) (field (payoff g16)) (field (table g21))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g23 (->* (any/c) () (values g5)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g24 (->* (any/c g6) () (values g12)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g25 (->* (any/c g14 g16) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g26 (->* (any/c g6 require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/fsmoo/cfg/population-adapted.rkt" (require/typed/check "population.rkt" (build-random-population (-> Natural oPopulation))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/fsmoo/cfg/population.rkt" (require/typed/check "utilities.rkt" (choose-randomly (-> (Listof Probability) Natural (#:random (U False Real)) (Listof Natural)))))
g14) () (values g5 g5)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g27 (->* (any/c) () (values g16)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g28 (object/c-opaque (clone g23) (equal g24) (jump g25) (match-pair g26) (pay g27) (reset g23) (field (current g14)) (field (original g14)) (field (payoff g16)) (field (table g21))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g29 (->* (any/c) () (values g4)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g30 (->* (any/c g4) () (values g12)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g31 (->* (any/c g4 g14) () (values g4 g4)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g32 (object/c-opaque (clone g29) (equal g30) (jump g25) (match-pair g31) (pay g27) (reset g29) (field (current g14)) (field (original g14)) (field (payoff g16)) (field (table g21))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g6))>)
type->contract:
 (-> (Listof Probability) State [#:random (U False Real)] (Listof State))
 #<->/sc #<listof/sc #<or/sc #<flat/sc (and/c real? nonnegative?)>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc real?> #<flat/sc (quote #f)>> #<listof/sc #<or/sc #<flat/sc exact-nonnegative-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g78 (listof exact-nonnegative-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) (#:random any/c) (values g78))>)
type->contract:
 (-> State oPopulation)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<object/sc #<->/sc #<any/sc> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc (and/c real? nonnegative?)> #<flat/sc (quote #f)>> #<flat/sc void?>> #<->/sc #<any/sc> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc void?>> #<->/sc #<any/sc> #<listof/sc #<or/sc #<flat/sc (and/c real? nonnegative?)>>>> #<vectorof/sc #<name/sc>> #<vectorof/sc #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g4 (recursive-contract g9 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g5 (recursive-contract g8 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g6 (recursive-contract g7 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g7 (recursive-contract g29 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g8 (recursive-contract g35 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g9 (recursive-contract g39 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g11 (and/c real? nonnegative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g12 (or/c g11 (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g13 (->* (any/c exact-nonnegative-integer?) (#:random g12) (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g14 (simple-result-> void? 2))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g15 (listof g11))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g16 (->* (any/c) () (values g15)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g17 (vectorof g4))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g18 (object/c (death-birth g13) (match-up* g14) (payoffs g16) (field (a* g17)) (field (b* g17))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g19 (->* (any/c) () (values g6)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g20 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g21 (->* (any/c g5) () (values g20)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g22 (or/c exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g23 (or/c g11))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g24 (->* (any/c g22 g23) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g25 (->* (any/c g5 g22) () (values g6 g6)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g26 (->* (any/c) () (values g23)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g27 (vectorof g22))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g28 (vectorof g27))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g29 (object/c (clone g19) (equal g21) (jump g24) (match-pair g25) (pay g26) (reset g19) (field (current g22)) (field (original g22)) (field (payoff g23)) (field (table g28))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g30 (->* (any/c) () (values g5)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g31 (->* (any/c g6) () (values g20)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g32 (->* (any/c g22 g23) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g33 (->* (any/c g6 g22) () (values g5 g5)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g34 (->* (any/c) () (values g23)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/fsmoo/cfg/main.rkt" (require/typed/check "utilities.rkt" (relative-average (-> (Listof Real) Real Real))))
 (define g35 (object/c-opaque (clone g30) (equal g31) (jump g32) (match-pair g33) (pay g34) (reset g30) (field (current g22)) (field (original g22)) (field (payoff g23)) (field (table g28))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g36 (->* (any/c) () (values g4)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g37 (->* (any/c g4) () (values g20)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g38 (->* (any/c g4 g22) () (values g4 g4)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (object/c-opaque (clone g36) (equal g37) (jump g32) (match-pair g38) (pay g34) (reset g36) (field (current g22)) (field (original g22)) (field (payoff g23)) (field (table g28))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g18))>)
type->contract:
 (-> (Listof Real) Real Real)
 #<->/sc #<listof/sc #<or/sc #<flat/sc real?>>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g19 (simple-result-> real? 2))>) #<syntax g19>)


jpeg

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/jpeg/cfg/main.rkt" (require/typed/check "jfif.rkt" (#:struct jfif ((frame : frame) (misc-segments : (Listof misc)) (mcu-array : (Array MCU)))) (#:struct frame ((marker : Natural) (precision : Byte) (y : Natural) (x : Natural) (components : (Vectorof component)) (samp-x : Natural) (samp-y : Natural))) (#:struct component ((id : Byte) (index : Natural) (samp-x : Natural) (samp-y : Natural) (q-table : Natural))) (#:struct misc ((marker : Natural) (bytes : Bytes))) (#:struct params ((q-tables : QT*) (dc-tables : H*) (ac-tables : H*) (restart-interval : Natural) (misc-segments : (Listof misc)))) (read-jfif (->* ((U String Bytes Input-Port)) (#:with-body? Boolean #:with-misc-sections? Boolean) jfif)) (write-jfif (-> (U String Output-Port) jfif Void))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/jpeg/cfg/jfif.rkt" (require/typed/check "bit-ports.rkt" (make-bit-port (-> Port Bit-Port)) (read-signed-bits (-> Bit-Port Natural Integer)) (write-bits (-> Bit-Port Integer Natural Void)) (flush-bits (-> Bit-Port Void))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/jpeg/cfg/jfif.rkt" (require/typed/check "huffman.rkt" (make-huffman-table (-> Bytes Bytes Huffman)) (read-huffman-coded-value (-> Bit-Port Huffman Byte)) (compute-huffman-table-for-freqs (-> Q-Table Huffman))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/jpeg/cfg/huffman.rkt" (require/typed/check "bit-ports.rkt" (read-bit (-> Bit-Port Integer))))
type->contract:
 (-> Bit-Port Integer)
 #<->/sc #<vector/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc input-port?> #<flat/sc output-port?>>> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g61 (or/c input-port? output-port?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g62 (vector/c exact-nonnegative-integer? exact-nonnegative-integer? g61))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g62) () (values exact-integer?))>)
type->contract:
 (-> Port Bit-Port)
 #<->/sc #<or/sc #<flat/sc input-port?> #<flat/sc output-port?>> #<vector/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc input-port?> #<flat/sc output-port?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g376 (or/c input-port? output-port?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g377 (vector/c exact-nonnegative-integer? exact-nonnegative-integer? g376))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g377))>)
type->contract:
 (-> Bit-Port Nonnegative-Integer Integer)
 #<->/sc #<vector/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc input-port?> #<flat/sc output-port?>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g377 any/c) () (values exact-integer?))>)
type->contract:
 (-> Bit-Port Integer Nonnegative-Integer Void)
 #<->/sc #<vector/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc input-port?> #<flat/sc output-port?>>> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc void?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g377 any/c any/c) () (values void?))>)
type->contract:
 (-> Bit-Port Void)
 #<->/sc #<vector/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc input-port?> #<flat/sc output-port?>>> #<flat/sc void?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g377) () (values void?))>)
type->contract:
 (-> Bytes Bytes Huffman)
 #<->/sc #<flat/sc bytes?> #<flat/sc bytes?> #<vector/sc #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g382 (or/c exact-nonnegative-integer? (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g383 (vectorof g382))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g384 (vectorof exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g385 (vector/c bytes? g383 bytes? g383 bytes? g383 g384))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g385))>)
type->contract:
 (-> Bit-Port Huffman Byte)
 #<->/sc #<vector/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc input-port?> #<flat/sc output-port?>>> #<vector/sc #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>> #<or/sc #<flat/sc byte?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g377 g385) () (values byte?))>)
type->contract:
 (-> Q-Table Huffman)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<vector/sc #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g383) () (values g385))>)
type->contract:
 check-impl-ish-ty
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc string?> #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g213 (->* (any-wrap/c any-wrap/c) (any/c) (values any/c)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g213))>)
type->contract:
 check-impl-ish-ty
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc string?> #<any/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g213))>)
type->contract:
 check-impl-ish-ty
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc string?> #<any/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g213))>)
type->contract:
 check-impl-ish-ty
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc string?> #<any/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g213))>)
type->contract:
 check-impl-ish-ty
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc string?> #<any/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g213))>)
type->contract:
 check-impl-ish-ty
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc string?> #<any/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g213))>)
type->contract:
 unary-check-impl-ish-ty
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc string?> #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g220 (->* (any-wrap/c) (any/c) (values any/c)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g220))>)
type->contract:
 unary-check-impl-ish-ty
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc string?> #<any/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g220))>)
type->contract:
 unary-check-impl-ish-ty
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc string?> #<any/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g220))>)
type->contract:
 (-> #:expression Any #:location Any (All (A) (->* ((-> A Any) A) (String) Any)))
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<parametric->/sc #<->/sc #<->/sc A223 #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> A223 #<flat/sc string?> #<any/sc>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values (parametric->/c (A223) (->* ((->* (A223) () (values any-wrap/c)) A223) (any/c) (values any/c)))))>)
type->contract:
 (-> #:expression Any #:location Any (->* (Real Real Real) (String) Any))
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<flat/sc string?> #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g226 (->* (any/c any/c any/c) (any/c) (values any/c)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g226))>)
type->contract:
 (-> #:expression Any #:location Any (->* ((U (-> Any Boolean) Regexp) (-> Any)) (String) Any))
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<or/sc #<flat/sc pregexp?> #<flat/sc (and/c regexp? (not/c pregexp?))> #<or/sc #<flat/sc struct-predicate-procedure?> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<any/sc> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<flat/sc string?> #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g228 (and/c regexp? (not/c pregexp?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g229 (->* (any/c) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g230 (or/c struct-predicate-procedure? struct-type-property-predicate-procedure? g229))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g231 (or/c pregexp? g228 g230))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g232 (->* () () (values any-wrap/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g233 (->* (g231 g232) (any/c) (values any/c)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g233))>)
type->contract:
 (-> #:expression Any #:location Any (->* ((-> Any)) (String) Any))
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<flat/sc string?> #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g235 (->* (g232) (any/c) (values any/c)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g235))>)
type->contract:
 (-> #:expression Any #:location Any (All (A B) (->* ((-> A B Any) A B) (String) Any)))
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<parametric->/sc #<->/sc #<->/sc A236 B237 #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> A236 B237 #<flat/sc string?> #<any/sc>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values (parametric->/c (A236 B237) (->* ((->* (A236 B237) () (values any-wrap/c)) A236 B237) (any/c) (values any/c)))))>)
type->contract:
 (-> #:expression Any #:location Any (->* () (String) Void))
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<flat/sc string?> #<flat/sc void?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g240 (->* () (any/c) (values void?)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g240))>)
type->contract:
 (-> #:expression Any #:location Any (-> Regexp String Any Any))
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<->/sc #<or/sc #<flat/sc pregexp?> #<flat/sc (and/c regexp? (not/c pregexp?))>> #<flat/sc string?> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g242 (->* (any/c any/c any-wrap/c) () (values any/c)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (#:expression any-wrap/c #:location any-wrap/c) () (values g242))>)
type->contract:
 (-> Any Any)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g244 (->* (any-wrap/c) () (values any/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g245 (or/c struct-predicate-procedure?/c struct-type-property-predicate-procedure? g244))>) #<syntax g245>)
type->contract:
 (-> Symbol Any check-info)
 #<->/sc #<flat/sc symbol?> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g247 (flat-named-contract (quote check-info?) (lambda (x) (check-info? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any-wrap/c) () (values g247))>)
type->contract:
 (-> check-info Symbol)
 #<->/sc #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))> #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g249 (simple-result-> symbol? 1))>) #<syntax g249>)
type->contract:
 (-> check-info Any)
 #<->/sc #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))> #<any/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g251 (simple-result-> any/c 1))>) #<syntax g251>)
type->contract:
 (-> String check-info)
 #<->/sc #<flat/sc string?> #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g253 (simple-result-> g247 1))>) #<syntax g253>)
type->contract:
 (-> (Listof Any) check-info)
 #<->/sc #<listof/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g255 (listof any-wrap/c))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g255) () (values g247))>)
type->contract:
 (-> (List Any (U Complex False) (U Complex False) (U Complex False) (U Complex False)) check-info)
 #<->/sc #<list/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc number?> #<flat/sc (quote #f)>> #<or/sc #<flat/sc number?> #<flat/sc (quote #f)>> #<or/sc #<flat/sc number?> #<flat/sc (quote #f)>> #<or/sc #<flat/sc number?> #<flat/sc (quote #f)>>> #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g257 (list/c any-wrap/c any/c any/c any/c any/c))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g257) () (values g247))>)
type->contract:
 (-> Any check-info)
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any-wrap/c) () (values g247))>)
type->contract:
 (-> String check-info)
 #<->/sc #<flat/sc string?> #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))>>
 (() #<syntax g253>)
type->contract:
 (-> Any check-info)
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any-wrap/c) () (values g247))>)
type->contract:
 (-> Any check-info)
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any-wrap/c) () (values g247))>)
type->contract:
 (All (A) (-> (Listof check-info) (-> A) A))
 #<parametric->/sc #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))>> #<->/sc A262> A262>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A262) (->* (any/c (->* () () (values A262))) () (values A262)))>)
type->contract:
 (-> (U False String) (-> Any) rackunit-test-case)
 #<->/sc #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<flat/sc (flat-named-contract (quote rackunit-test-case?) (lambda (x) (rackunit-test-case? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g265 (flat-named-contract (quote rackunit-test-case?) (lambda (x) (rackunit-test-case? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g232) () (values g265))>)
type->contract:
 (-> rackunit-test-case (U False String))
 #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-case?) (lambda (x) (rackunit-test-case? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g267 (or/c string? (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g267))>)
type->contract:
 (-> rackunit-test-case (-> Any))
 #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-case?) (lambda (x) (rackunit-test-case? x)))> #<->/sc #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g269 (simple-result-> any/c 0))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g269))>)
type->contract:
 (-> String (-> test-suite-handler-down test-suite-handler-up test-suite-handler-here Any Any) (-> Any) (-> Any) rackunit-test-suite)
 #<->/sc #<flat/sc string?> #<->/sc #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<any/sc>> #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<any/sc>> #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-case?) (lambda (x) (rackunit-test-case? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<any/sc>> #<any/sc> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g271 (->* (any/c any/c g232 g232 any-wrap/c) () (values any/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g272 (->* (any/c any/c g232 g232 any-wrap/c any-wrap/c) () (values any/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g273 (->* (any/c any/c g232 any-wrap/c) () (values any/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g274 (->* (g271 g272 g273 any/c) () (values any-wrap/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g275 (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g274 g232 g232) () (values g275))>)
type->contract:
 (-> rackunit-test-suite String)
 #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g277 (simple-result-> string? 1))>) #<syntax g277>)
type->contract:
 (-> rackunit-test-suite (-> test-suite-handler-down test-suite-handler-up test-suite-handler-here Any Any))
 #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<->/sc #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<->/sc #<any/sc>> #<->/sc #<any/sc>> #<any/sc> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<->/sc #<any/sc>> #<->/sc #<any/sc>> #<any/sc> #<any/sc> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-case?) (lambda (x) (rackunit-test-case? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<->/sc #<any/sc>> #<any/sc> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g279 (->* (g275 g267 g269 g269 any/c) () (values any-wrap/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g280 (->* (g275 g267 g269 g269 any/c any/c) () (values any-wrap/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g281 (->* (g265 g267 g269 any/c) () (values any-wrap/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g282 (->* (g279 g280 g281 any-wrap/c) () (values any/c)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g282))>)
type->contract:
 (-> rackunit-test-suite (-> Any))
 #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<->/sc #<any/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g269))>)
type->contract:
 (-> rackunit-test-suite (-> Any))
 #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<->/sc #<any/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g269))>)
type->contract:
 (-> rackunit-test-suite test-suite-handler-down test-suite-handler-up test-suite-handler-here Any Any)
 #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<->/sc #<any/sc>> #<->/sc #<any/sc>> #<any/sc> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<->/sc #<any/sc>> #<->/sc #<any/sc>> #<any/sc> #<any/sc> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<->/sc #<flat/sc (flat-named-contract (quote rackunit-test-case?) (lambda (x) (rackunit-test-case? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<->/sc #<any/sc>> #<any/sc> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<any/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g279 g280 g281 any-wrap/c) () (values any/c))>)
type->contract:
 (-> String (Listof Test) [#:after (-> Any)] [#:before (-> Any)] rackunit-test-suite)
 #<->/sc #<flat/sc string?> #<listof/sc #<or/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<flat/sc test-case?>>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) (#:after g232 #:before g232) (values g275))>)
type->contract:
 (Parameterof (U False String))
 #<parameter/sc #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g288 (parameter/c any/c g267))>) #<syntax g288>)
type->contract:
 (Parameterof (-> (-> Any) Any))
 #<parameter/sc #<->/sc #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<any/sc>> #<->/sc #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g290 (->* (g232) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g291 (->* (g232) () (values any/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g292 (parameter/c g290 g291))>) #<syntax g292>)
type->contract:
 (-> String Continuation-Mark-Set exn:test)
 #<->/sc #<flat/sc string?> #<flat/sc continuation-mark-set?> #<flat/sc (flat-named-contract (quote exn:test?) (lambda (x) (exn:test? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g294 (flat-named-contract (quote exn:test?) (lambda (x) (exn:test? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g295 (simple-result-> g294 2))>) #<syntax g295>)
type->contract:
 (-> String Continuation-Mark-Set (Listof check-info) exn:test:check)
 #<->/sc #<flat/sc string?> #<flat/sc continuation-mark-set?> #<listof/sc #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))>> #<flat/sc (flat-named-contract (quote exn:test:check?) (lambda (x) (exn:test:check? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g297 (flat-named-contract (quote exn:test:check?) (lambda (x) (exn:test:check? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g298 (simple-result-> g297 3))>) #<syntax g298>)
type->contract:
 (-> exn:test:check (Listof check-info))
 #<->/sc #<flat/sc (flat-named-contract (quote exn:test:check?) (lambda (x) (exn:test:check? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote check-info?) (lambda (x) (check-info? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g300 (listof g247))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g300))>)
type->contract:
 (-> (U False String) test-result)
 #<->/sc #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<flat/sc (flat-named-contract (quote test-result?) (lambda (x) (test-result? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g302 (flat-named-contract (quote test-result?) (lambda (x) (test-result? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g303 (simple-result-> g302 1))>) #<syntax g303>)
type->contract:
 (-> test-result (U False String))
 #<->/sc #<flat/sc (flat-named-contract (quote test-result?) (lambda (x) (test-result? x)))> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g267))>)
type->contract:
 (-> (U False String) Any test-failure)
 #<->/sc #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc (flat-named-contract (quote test-failure?) (lambda (x) (test-failure? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g306 (flat-named-contract (quote test-failure?) (lambda (x) (test-failure? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any-wrap/c) () (values g306))>)
type->contract:
 (-> test-failure Any)
 #<->/sc #<flat/sc (flat-named-contract (quote test-failure?) (lambda (x) (test-failure? x)))> #<any/sc>>
 (() #<syntax g251>)
type->contract:
 (-> (U False String) Any test-error)
 #<->/sc #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc (flat-named-contract (quote test-error?) (lambda (x) (test-error? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g309 (flat-named-contract (quote test-error?) (lambda (x) (test-error? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any-wrap/c) () (values g309))>)
type->contract:
 (-> test-error Any)
 #<->/sc #<flat/sc (flat-named-contract (quote test-error?) (lambda (x) (test-error? x)))> #<any/sc>>
 (() #<syntax g251>)
type->contract:
 (-> (U False String) Any test-success)
 #<->/sc #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc (flat-named-contract (quote test-success?) (lambda (x) (test-success? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g312 (flat-named-contract (quote test-success?) (lambda (x) (test-success? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any-wrap/c) () (values g312))>)
type->contract:
 (-> test-success Any)
 #<->/sc #<flat/sc (flat-named-contract (quote test-success?) (lambda (x) (test-success? x)))> #<any/sc>>
 (() #<syntax g251>)
type->contract:
 (-> (U False String) (-> Any) test-result)
 #<->/sc #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<flat/sc (flat-named-contract (quote test-result?) (lambda (x) (test-result? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g232) () (values g302))>)
type->contract:
 (-> Test (Rec g72429 (Listof (U g72429 test-result))))
 #<->/sc #<or/sc #<flat/sc (flat-named-contract (quote rackunit-test-suite?) (lambda (x) (rackunit-test-suite? x)))> #<flat/sc test-case?>> #<rec/sc ((g72427315 #<listof/sc #<or/sc #<flat/sc (flat-named-contract (quote test-result?) (lambda (x) (test-result? x)))> g72427315>>) (g72427316 #<listof/sc #<or/sc #<flat/sc (flat-named-contract (quote test-result?) (lambda (x) (test-result? x)))> g72427316>>) (g72427317 #<listof/sc #<or/sc #<flat/sc (flat-named-contract (quote test-result?) (lambda (x) (test-result? x)))> g72427317>>)) g72427315>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g320 (letrec ((g72427315 (recursive-contract g72427315319 #:flat)) (g72427315319 (listof (or/c g302 g72427315)))) g72427315))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g320))>)
type->contract:
 (Parameterof (-> (U (Rec flat (U (Pairof flat flat) Boolean Char Complex Keyword Null String Symbol)) exn) Any))
 #<parameter/sc #<->/sc #<or/sc #<flat/sc (flat-named-contract (quote exn?) (lambda (x) (exn? x)))> #<rec/sc ((g72432321 #<or/sc #<flat/sc keyword?> #<flat/sc string?> #<flat/sc symbol?> #<flat/sc char?> #<flat/sc (quote ())> #<flat/sc (quote #t)> #<flat/sc (quote #f)> #<flat/sc (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (single-flonum? (real-part x)))))> #<flat/sc (and/c number? (lambda (x) (and (flonum? (imag-part x)) (flonum? (real-part x)))))> #<flat/sc (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (eqv? 0 (real-part x)))))> #<flat/sc (and/c number? (λ (x) (and (flonum? (imag-part x)) (eqv? 0 (real-part x)))))> #<flat/sc (and/c number? (not/c real?) (lambda (x) (and (not (eqv? 0 (real-part x))) (exact? (real-part x)) (exact? (imag-part x)))))> #<flat/sc (and/c number? (not/c real?) (λ (x) (and (eqv? 0 (real-part x)) (exact? (imag-part x)))))> #<flat/sc (and/c single-flonum? negative?)> #<flat/sc (and/c single-flonum? positive?)> #<flat/sc (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum -0.0))))> #<flat/sc (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum 0.0))))> #<flat/sc (and/c single-flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c flonum? negative?)> #<flat/sc (and/c flonum? positive?)> #<flat/sc (λ (x) (eqv? x -0.0))> #<flat/sc (λ (x) (eqv? x 0.0))> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c exact-rational? negative? (not/c integer?))> #<flat/sc (and/c exact-rational? positive? (not/c integer?))> #<flat/sc (and/c exact-integer? negative? (not/c fixnum?))> #<flat/sc (and/c exact-integer? positive? (not/c fixnum?))> #<flat/sc (and/c fixnum? negative?)> #<flat/sc (and/c fixnum? positive? (not/c index?))> #<flat/sc (and/c index? positive? (not/c byte?))> #<flat/sc (λ (n) (and (byte? n) (> n 1)))> #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))> #<cons/sc g72432321 g72432321>>) (g72432322 #<or/sc #<flat/sc keyword?> #<flat/sc string?> #<flat/sc symbol?> #<flat/sc char?> #<flat/sc (quote ())> #<flat/sc (quote #t)> #<flat/sc (quote #f)> #<flat/sc (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (single-flonum? (real-part x)))))> #<flat/sc (and/c number? (lambda (x) (and (flonum? (imag-part x)) (flonum? (real-part x)))))> #<flat/sc (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (eqv? 0 (real-part x)))))> #<flat/sc (and/c number? (λ (x) (and (flonum? (imag-part x)) (eqv? 0 (real-part x)))))> #<flat/sc (and/c number? (not/c real?) (lambda (x) (and (not (eqv? 0 (real-part x))) (exact? (real-part x)) (exact? (imag-part x)))))> #<flat/sc (and/c number? (not/c real?) (λ (x) (and (eqv? 0 (real-part x)) (exact? (imag-part x)))))> #<flat/sc (and/c single-flonum? negative?)> #<flat/sc (and/c single-flonum? positive?)> #<flat/sc (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum -0.0))))> #<flat/sc (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum 0.0))))> #<flat/sc (and/c single-flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c flonum? negative?)> #<flat/sc (and/c flonum? positive?)> #<flat/sc (λ (x) (eqv? x -0.0))> #<flat/sc (λ (x) (eqv? x 0.0))> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c exact-rational? negative? (not/c integer?))> #<flat/sc (and/c exact-rational? positive? (not/c integer?))> #<flat/sc (and/c exact-integer? negative? (not/c fixnum?))> #<flat/sc (and/c exact-integer? positive? (not/c fixnum?))> #<flat/sc (and/c fixnum? negative?)> #<flat/sc (and/c fixnum? positive? (not/c index?))> #<flat/sc (and/c index? positive? (not/c byte?))> #<flat/sc (λ (n) (and (byte? n) (> n 1)))> #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))> #<cons/sc g72432322 g72432322>>) (g72432323 #<or/sc #<flat/sc keyword?> #<flat/sc string?> #<flat/sc symbol?> #<flat/sc char?> #<flat/sc (quote ())> #<flat/sc (quote #t)> #<flat/sc (quote #f)> #<flat/sc (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (single-flonum? (real-part x)))))> #<flat/sc (and/c number? (lambda (x) (and (flonum? (imag-part x)) (flonum? (real-part x)))))> #<flat/sc (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (eqv? 0 (real-part x)))))> #<flat/sc (and/c number? (λ (x) (and (flonum? (imag-part x)) (eqv? 0 (real-part x)))))> #<flat/sc (and/c number? (not/c real?) (lambda (x) (and (not (eqv? 0 (real-part x))) (exact? (real-part x)) (exact? (imag-part x)))))> #<flat/sc (and/c number? (not/c real?) (λ (x) (and (eqv? 0 (real-part x)) (exact? (imag-part x)))))> #<flat/sc (and/c single-flonum? negative?)> #<flat/sc (and/c single-flonum? positive?)> #<flat/sc (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum -0.0))))> #<flat/sc (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum 0.0))))> #<flat/sc (and/c single-flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c flonum? negative?)> #<flat/sc (and/c flonum? positive?)> #<flat/sc (λ (x) (eqv? x -0.0))> #<flat/sc (λ (x) (eqv? x 0.0))> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c exact-rational? negative? (not/c integer?))> #<flat/sc (and/c exact-rational? positive? (not/c integer?))> #<flat/sc (and/c exact-integer? negative? (not/c fixnum?))> #<flat/sc (and/c exact-integer? positive? (not/c fixnum?))> #<flat/sc (and/c fixnum? negative?)> #<flat/sc (and/c fixnum? positive? (not/c index?))> #<flat/sc (and/c index? positive? (not/c byte?))> #<flat/sc (λ (n) (and (byte? n) (> n 1)))> #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))> #<cons/sc g72432323 g72432323>>)) g72432322>> #<any/sc>> #<->/sc #<or/sc #<flat/sc (flat-named-contract (quote exn?) (lambda (x) (exn? x)))> #<rec/sc ((g72435324 #<or/sc #<flat/sc keyword?> #<flat/sc string?> #<flat/sc symbol?> #<flat/sc char?> #<flat/sc (quote ())> #<flat/sc (quote #t)> #<flat/sc (quote #f)> #<flat/sc (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (single-flonum? (real-part x)))))> #<flat/sc (and/c number? (lambda (x) (and (flonum? (imag-part x)) (flonum? (real-part x)))))> #<flat/sc (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (eqv? 0 (real-part x)))))> #<flat/sc (and/c number? (λ (x) (and (flonum? (imag-part x)) (eqv? 0 (real-part x)))))> #<flat/sc (and/c number? (not/c real?) (lambda (x) (and (not (eqv? 0 (real-part x))) (exact? (real-part x)) (exact? (imag-part x)))))> #<flat/sc (and/c number? (not/c real?) (λ (x) (and (eqv? 0 (real-part x)) (exact? (imag-part x)))))> #<flat/sc (and/c single-flonum? negative?)> #<flat/sc (and/c single-flonum? positive?)> #<flat/sc (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum -0.0))))> #<flat/sc (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum 0.0))))> #<flat/sc (and/c single-flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c flonum? negative?)> #<flat/sc (and/c flonum? positive?)> #<flat/sc (λ (x) (eqv? x -0.0))> #<flat/sc (λ (x) (eqv? x 0.0))> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c exact-rational? negative? (not/c integer?))> #<flat/sc (and/c exact-rational? positive? (not/c integer?))> #<flat/sc (and/c exact-integer? negative? (not/c fixnum?))> #<flat/sc (and/c exact-integer? positive? (not/c fixnum?))> #<flat/sc (and/c fixnum? negative?)> #<flat/sc (and/c fixnum? positive? (not/c index?))> #<flat/sc (and/c index? positive? (not/c byte?))> #<flat/sc (λ (n) (and (byte? n) (> n 1)))> #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))> #<cons/sc g72435324 g72435324>>) (g72435325 #<or/sc #<flat/sc keyword?> #<flat/sc string?> #<flat/sc symbol?> #<flat/sc char?> #<flat/sc (quote ())> #<flat/sc (quote #t)> #<flat/sc (quote #f)> #<flat/sc (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (single-flonum? (real-part x)))))> #<flat/sc (and/c number? (lambda (x) (and (flonum? (imag-part x)) (flonum? (real-part x)))))> #<flat/sc (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (eqv? 0 (real-part x)))))> #<flat/sc (and/c number? (λ (x) (and (flonum? (imag-part x)) (eqv? 0 (real-part x)))))> #<flat/sc (and/c number? (not/c real?) (lambda (x) (and (not (eqv? 0 (real-part x))) (exact? (real-part x)) (exact? (imag-part x)))))> #<flat/sc (and/c number? (not/c real?) (λ (x) (and (eqv? 0 (real-part x)) (exact? (imag-part x)))))> #<flat/sc (and/c single-flonum? negative?)> #<flat/sc (and/c single-flonum? positive?)> #<flat/sc (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum -0.0))))> #<flat/sc (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum 0.0))))> #<flat/sc (and/c single-flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c flonum? negative?)> #<flat/sc (and/c flonum? positive?)> #<flat/sc (λ (x) (eqv? x -0.0))> #<flat/sc (λ (x) (eqv? x 0.0))> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c exact-rational? negative? (not/c integer?))> #<flat/sc (and/c exact-rational? positive? (not/c integer?))> #<flat/sc (and/c exact-integer? negative? (not/c fixnum?))> #<flat/sc (and/c exact-integer? positive? (not/c fixnum?))> #<flat/sc (and/c fixnum? negative?)> #<flat/sc (and/c fixnum? positive? (not/c index?))> #<flat/sc (and/c index? positive? (not/c byte?))> #<flat/sc (λ (n) (and (byte? n) (> n 1)))> #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))> #<cons/sc g72435325 g72435325>>) (g72435326 #<or/sc #<flat/sc keyword?> #<flat/sc string?> #<flat/sc symbol?> #<flat/sc char?> #<flat/sc (quote ())> #<flat/sc (quote #t)> #<flat/sc (quote #f)> #<flat/sc (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (single-flonum? (real-part x)))))> #<flat/sc (and/c number? (lambda (x) (and (flonum? (imag-part x)) (flonum? (real-part x)))))> #<flat/sc (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (eqv? 0 (real-part x)))))> #<flat/sc (and/c number? (λ (x) (and (flonum? (imag-part x)) (eqv? 0 (real-part x)))))> #<flat/sc (and/c number? (not/c real?) (lambda (x) (and (not (eqv? 0 (real-part x))) (exact? (real-part x)) (exact? (imag-part x)))))> #<flat/sc (and/c number? (not/c real?) (λ (x) (and (eqv? 0 (real-part x)) (exact? (imag-part x)))))> #<flat/sc (and/c single-flonum? negative?)> #<flat/sc (and/c single-flonum? positive?)> #<flat/sc (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum -0.0))))> #<flat/sc (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum 0.0))))> #<flat/sc (and/c single-flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c flonum? negative?)> #<flat/sc (and/c flonum? positive?)> #<flat/sc (λ (x) (eqv? x -0.0))> #<flat/sc (λ (x) (eqv? x 0.0))> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c exact-rational? negative? (not/c integer?))> #<flat/sc (and/c exact-rational? positive? (not/c integer?))> #<flat/sc (and/c exact-integer? negative? (not/c fixnum?))> #<flat/sc (and/c exact-integer? positive? (not/c fixnum?))> #<flat/sc (and/c fixnum? negative?)> #<flat/sc (and/c fixnum? positive? (not/c index?))> #<flat/sc (and/c index? positive? (not/c byte?))> #<flat/sc (λ (n) (and (byte? n) (> n 1)))> #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))> #<cons/sc g72435326 g72435326>>)) g72435325>> #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g328 (flat-named-contract (quote exn?) (lambda (x) (exn? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g330 (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (single-flonum? (real-part x))))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g331 (and/c number? (lambda (x) (and (flonum? (imag-part x)) (flonum? (real-part x))))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g332 (and/c number? (λ (x) (and (single-flonum? (imag-part x)) (eqv? 0 (real-part x))))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g333 (and/c number? (λ (x) (and (flonum? (imag-part x)) (eqv? 0 (real-part x))))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g334 (and/c number? (not/c real?) (lambda (x) (and (not (eqv? 0 (real-part x))) (exact? (real-part x)) (exact? (imag-part x))))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g335 (and/c number? (not/c real?) (λ (x) (and (eqv? 0 (real-part x)) (exact? (imag-part x))))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g336 (and/c single-flonum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g337 (and/c single-flonum? positive?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g338 (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum -0.0)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g339 (λ (x) (and (single-flonum? x) (eqv? x (real->single-flonum 0.0)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g340 (and/c single-flonum? (lambda (x) (eqv? x +nan.0))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g341 (and/c flonum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g342 (and/c flonum? positive?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g343 (λ (x) (eqv? x -0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g344 (λ (x) (eqv? x 0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g345 (and/c flonum? (lambda (x) (eqv? x +nan.0))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g346 (and/c exact-rational? negative? (not/c integer?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g347 (and/c exact-rational? positive? (not/c integer?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g348 (and/c exact-integer? negative? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g349 (and/c exact-integer? positive? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g350 (and/c fixnum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g351 (and/c fixnum? positive? (not/c index?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g352 (and/c index? positive? (not/c byte?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g353 (λ (n) (and (byte? n) (> n 1))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g354 (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g355 (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g356 (letrec ((g72432322 (recursive-contract g72432322329 #:flat)) (g72432322329 (or/c keyword? string? symbol? char? (quote ()) (quote #t) (quote #f) g330 g331 g332 g333 g334 g335 g336 g337 g338 g339 g340 g341 g342 g343 g344 g345 g346 g347 g348...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g357 (or/c g328 g356))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g358 (->* (g357) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g359 (parameter/c g358 g251))>) #<syntax g359>)
type->contract:
 (Parameterof (-> (-> Any) Any))
 #<parameter/sc #<->/sc #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<any/sc>> #<->/sc #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/crequire-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/jpeg/cfg/main.rkt" (require/typed/check "exif.rkt" (parse-exif (-> Bytes (Listof PTs)))))
>>> #<any/sc>>>
 (() #<syntax g292>)
type->contract:
 (-> Bytes Nonnegative-Integer Symbol Nonnegative-Integer)
 #<->/sc #<flat/sc bytes?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc symbol?> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g15 (simple-result-> exact-nonnegative-integer? 3))>) #<syntax g15>)
type->contract:
 (-> Bytes Nonnegative-Integer Symbol Nonnegative-Integer)
 #<->/sc #<flat/sc bytes?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc symbol?> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g15>)
type->contract:
 (-> Bytes Nonnegative-Integer Byte)
 #<->/sc #<flat/sc bytes?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc byte?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g18 (simple-result-> byte? 2))>) #<syntax g18>)
type->contract:
 (-> Bytes Nonnegative-Integer Symbol Nonnegative-Integer)
 #<->/sc #<flat/sc bytes?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc symbol?> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g15>)
type->contract:
 (-> Bytes Nonnegative-Integer Symbol Nonnegative-Integer)
 #<->/sc #<flat/sc bytes?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc symbol?> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g15>)
type->contract:
 (-> Bytes Nonnegative-Integer Byte)
 #<->/sc #<flat/sc bytes?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc byte?>>>
 (() #<syntax g18>)
type->contract:
 (-> Bytes Nonnegative-Integer Symbol Nonnegative-Integer)
 #<->/sc #<flat/sc bytes?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc symbol?> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g15>)
type->contract:
 (-> Bytes Nonnegative-Integer Symbol Nonnegative-Integer)
 #<->/sc #<flat/sc bytes?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc symbol?> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g15>)
type->contract:
 (-> Nonnegative-Integer Bytes)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc bytes?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g25 (simple-result-> bytes? 1))>) #<syntax g25>)
type->contract:
 (-> Bytes Nonnegative-Integer Bytes Nonnegative-Integer Nonnegative-Integer Void)
 #<->/sc #<flat/sc bytes?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc bytes?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc void?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c any/c) () (values void?))>)
type->contract:
 (-> Bytes String)
 #<->/sc #<flat/sc bytes?> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g28 (simple-result-> string? 1))>) #<syntax g28>)
type->contract:
 (-> frame (Listof misc) #(struct:Array (Indexes Index (Boxof Boolean) (-> Void) (-> Indexes MCU)) #<syntax:/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/jpeg/base/math/private/array/typed-array-struct.rkt:56:13 prop:equal+hash> #<syntax:/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/jpeg/base/math/private/array/typed-array-struct.rkt:55:13 prop:custom-write> #<syntax:/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/jpeg/base/math/private/array/typed-array-struct.rkt:54:13 prop:custom-print-quotable>) jfif)
 #<->/sc #<flat/sc (flat-named-contract (quote frame?) (lambda (x) (frame? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote misc?) (lambda (x) (misc? x)))>> #<rec/sc ((n*86 #<struct/sc #<vectorof/sc #<or/sc #<flat/sc t:index?>>> #<or/sc #<flat/sc t:index?>> #<box/sc #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<->/sc #<flat/sc void?>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc t:index?>>> #<vectorof/sc n*86>>>)) n*86> #<flat/sc (flat-named-contract (quote jfif?) (lambda (x) (jfif? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g89 (vectorof t:index?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g90 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g91 (box/c g90))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g92 (letrec ((n*86 (recursive-contract n*8688 #:chaperone)) (n*8688 (struct/c Array g89 any/c g91 any/c (->* (g89) () (values (vectorof n*86)))))) n*86))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g93 (flat-named-contract (quote jfif?) (lambda (x) (jfif? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c g92) () (values g93))>)
type->contract:
 (-> jfif frame)
 #<->/sc #<flat/sc (flat-named-contract (quote jfif?) (lambda (x) (jfif? x)))> #<flat/sc (flat-named-contract (quote frame?) (lambda (x) (frame? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g95 (flat-named-contract (quote frame?) (lambda (x) (frame? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g96 (simple-result-> g95 1))>) #<syntax g96>)
type->contract:
 (-> jfif (Listof misc))
 #<->/sc #<flat/sc (flat-named-contract (quote jfif?) (lambda (x) (jfif? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote misc?) (lambda (x) (misc? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g98 (flat-named-contract (quote misc?) (lambda (x) (misc? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g99 (listof g98))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g99))>)
type->contract:
 (-> jfif #(struct:Array (Indexes Index (Boxof Boolean) (-> Void) (-> Indexes MCU)) #<syntax:/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/jpeg/base/math/private/array/typed-array-struct.rkt:56:13 prop:equal+hash> #<syntax:/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/jpeg/base/math/private/array/typed-array-struct.rkt:55:13 prop:custom-write> #<syntax:/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/jpeg/base/math/private/array/typed-array-struct.rkt:54:13 prop:custom-print-quotable>))
 #<->/sc #<flat/sc (flat-named-contract (quote jfif?) (lambda (x) (jfif? x)))> #<rec/sc ((n*100 #<struct/sc #<vectorof/sc #<or/sc #<flat/sc t:index?>>> #<or/sc #<flat/sc t:index?>> #<box/sc #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<->/sc #<flat/sc void?>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc t:index?>>> #<vectorof/sc n*100>>>)) n*100>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g103 (simple-result-> void? 0))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g104 (letrec ((n*100 (recursive-contract n*100102 #:chaperone)) (n*100102 (struct/c Array g89 t:index? g91 g103 (->* (g89) () (values (vectorof n*100)))))) n*100))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g104))>)
type->contract:
 (-> Nonnegative-Integer Byte Nonnegative-Integer Nonnegative-Integer (Vectorof component) Nonnegative-Integer Nonnegative-Integer frame)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<vectorof/sc #<flat/sc (flat-named-contract (quote component?) (lambda (x) (component? x)))>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc (flat-named-contract (quote frame?) (lambda (x) (frame? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g106 (flat-named-contract (quote component?) (lambda (x) (component? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g107 (vectorof g106))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c g107 any/c any/c) () (values g95))>)
type->contract:
 (-> frame Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote frame?) (lambda (x) (frame? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g109 (simple-result-> exact-nonnegative-integer? 1))>) #<syntax g109>)
type->contract:
 (-> frame Byte)
 #<->/sc #<flat/sc (flat-named-contract (quote frame?) (lambda (x) (frame? x)))> #<or/sc #<flat/sc byte?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g111 (simple-result-> byte? 1))>) #<syntax g111>)
type->contract:
 (-> frame Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote frame?) (lambda (x) (frame? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g109>)
type->contract:
 (-> frame Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote frame?) (lambda (x) (frame? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g109>)
type->contract:
 (-> frame (Vectorof component))
 #<->/sc #<flat/sc (flat-named-contract (quote frame?) (lambda (x) (frame? x)))> #<vectorof/sc #<flat/sc (flat-named-contract (quote component?) (lambda (x) (component? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g107))>)
type->contract:
 (-> frame Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote frame?) (lambda (x) (frame? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g109>)
type->contract:
 (-> frame Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote frame?) (lambda (x) (frame? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g109>)
type->contract:
 (-> Byte Nonnegative-Integer Nonnegative-Integer Nonnegative-Integer Nonnegative-Integer component)
 #<->/sc #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc (flat-named-contract (quote component?) (lambda (x) (component? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c any/c) () (values g106))>)
type->contract:
 (-> component Byte)
 #<->/sc #<flat/sc (flat-named-contract (quote component?) (lambda (x) (component? x)))> #<or/sc #<flat/sc byte?>>>
 (() #<syntax g111>)
type->contract:
 (-> component Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote component?) (lambda (x) (component? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g109>)
type->contract:
 (-> component Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote component?) (lambda (x) (component? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g109>)
type->contract:
 (-> component Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote component?) (lambda (x) (component? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g109>)
type->contract:
 (-> component Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote component?) (lambda (x) (component? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g109>)
type->contract:
 (-> Nonnegative-Integer Bytes misc)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc bytes?> #<flat/sc (flat-named-contract (quote misc?) (lambda (x) (misc? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g124 (simple-result-> g98 2))>) #<syntax g124>)
type->contract:
 (-> misc Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote misc?) (lambda (x) (misc? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g109>)
type->contract:
 (-> misc Bytes)
 #<->/sc #<flat/sc (flat-named-contract (quote misc?) (lambda (x) (misc? x)))> #<flat/sc bytes?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g127 (simple-result-> bytes? 1))>) #<syntax g127>)
type->contract:
 (-> QT* H* H* Nonnegative-Integer (Listof misc) params)
 #<->/sc #<vectorof/sc #<or/sc #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc (quote #f)>>> #<vectorof/sc #<or/sc #<vector/sc #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>> #<flat/sc (quote #f)>>> #<vectorof/sc #<or/sc #<vector/sc #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>> #<flat/sc (quote #f)>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<listof/sc #<flat/sc (flat-named-contract (quote misc?) (lambda (x) (misc? x)))>> #<flat/sc (flat-named-contract (quote params?) (lambda (x) (params? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g129 (or/c exact-nonnegative-integer? (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g130 (vectorof g129))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g131 (or/c g130 (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g132 (vectorof g131))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g133 (vectorof exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g134 (vector/c bytes? g130 bytes? g130 bytes? g130 g133))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g135 (or/c g134 (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g136 (vectorof g135))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g137 (flat-named-contract (quote params?) (lambda (x) (params? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g132 g136 g136 any/c any/c) () (values g137))>)
type->contract:
 (-> params QT*)
 #<->/sc #<flat/sc (flat-named-contract (quote params?) (lambda (x) (params? x)))> #<vectorof/sc #<or/sc #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc (quote #f)>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g132))>)
type->contract:
 (-> params H*)
 #<->/sc #<flat/sc (flat-named-contract (quote params?) (lambda (x) (params? x)))> #<vectorof/sc #<or/sc #<vector/sc #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>> #<flat/sc (quote #f)>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g136))>)
type->contract:
 (-> params H*)
 #<->/sc #<flat/sc (flat-named-contract (quote params?) (lambda (x) (params? x)))> #<vectorof/sc #<or/sc #<vector/sc #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<flat/sc bytes?> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>> #<flat/sc (quote #f)>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g136))>)
type->contract:
 (-> params Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote params?) (lambda (x) (params? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g109>)
type->contract:
 (-> params (Listof misc))
 #<->/sc #<flat/sc (flat-named-contract (quote params?) (lambda (x) (params? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote misc?) (lambda (x) (misc? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g99))>)
type->contract:
 (-> (U Bytes Input-Port String) [#:with-body? Boolean] [#:with-misc-sections? Boolean] jfif)
 #<->/sc #<or/sc #<flat/sc bytes?> #<flat/sc input-port?> #<flat/sc string?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>> #<flat/sc (flat-named-contract (quote jfif?) (lambda (x) (jfif? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (#:with-body? any/c #:with-misc-sections? any/c) (values g93))>)
type->contract:
 (-> (U Output-Port String) jfif Void)
 #<->/sc #<or/sc #<flat/sc output-port?> #<flat/sc string?>> #<flat/sc (flat-named-contract (quote jfif?) (lambda (x) (jfif? x)))> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g145 (simple-result-> void? 2))>) #<syntax g145>)
type->contract:
 (-> Bytes (Listof PTs))
 #<->/sc #<flat/sc bytes?> #<listof/sc #<listof/sc #<cons/sc #<or/sc #<flat/sc exact-integer?> #<flat/sc symbol?>> #<or/sc #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<flat/sc bytes?> #<flat/sc string?> #<flat/sc void?> #<flat/sc (quote #t)> #<flat/sc (quote #f)> #<flat/sc (and/c exact-integer? positive? (not/c fixnum?))> #<flat/sc (and/c fixnum? positive? (not/c index?))> #<flat/sc (and/c index? positive? (not/c byte?))> #<flat/sc (λ (n) (and (byte? n) (> n 1)))> #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))> #<listof/sc #<cons/sc #<flat/sc symbol?> #<or/sc #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<flat/sc bytes?> #<flat/sc string?> #<flat/sc void?> #<flat/sc (quote #t)> #<flat/sc (quote #f)> #<flat/sc (and/c exact-integer? positive? (not/c fixnum?))> #<flat/sc (and/c fixnum? positive? (not/c index?))> #<flat/sc (and/c index? positive? (not/c byte?))> #<flat/sc (λ (n) (and (byte? n) (> n 1)))> #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))> #<cons/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>>>>>> #<cons/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>>>>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g147 (or/c exact-integer? symbol?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g148 (vectorof exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g149 (and/c exact-integer? positive? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g150 (and/c fixnum? positive? (not/c index?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g151 (and/c index? positive? (not/c byte?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g152 (λ (n) (and (byte? n) (> n 1))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g153 (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g154 (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g155 (cons/c exact-nonnegative-integer? exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g156 (or/c g148 bytes? string? void? (quote #t) (quote #f) g149 g150 g151 g152 g153 g154 g155))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g157 (cons/c symbol? g156))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g158 (listof g157))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g159 (or/c g148 bytes? string? void? (quote #t) (quote #f) g149 g150 g151 g152 g153 g154 g158 g155))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g160 (cons/c g147 g159))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g161 (listof g160))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g162 (listof g161))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g162))>)


kcfa

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/kcfa/cfg/structs-adapted.rkt" (require/typed/check "structs.rkt" (#:struct Stx ((label : Label))) (#:struct (exp Stx) ()) (#:struct (Ref exp) ((var : Var))) (#:struct (Lam exp) ((formals : (Listof Var)) (call : Exp))) (#:struct (Call Stx) ((fun : Exp) (args : (Listof Exp))))))
type->contract:
 (-> Var Stx)
 #<->/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Stx?) (lambda (x) (Stx? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g119 (flat-named-contract (quote Stx?) (lambda (x) (Stx? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g120 (simple-result-> g119 1))>) #<syntax g120>)
type->contract:
 (-> Stx Var)
 #<->/sc #<flat/sc (flat-named-contract (quote Stx?) (lambda (x) (Stx? x)))> #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g122 (simple-result-> symbol? 1))>) #<syntax g122>)
type->contract:
 (-> Var exp)
 #<->/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g124 (flat-named-contract (quote exp?) (lambda (x) (exp? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g125 (simple-result-> g124 1))>) #<syntax g125>)
type->contract:
 (-> Var Var Ref)
 #<->/sc #<flat/sc symbol?> #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Ref?) (lambda (x) (Ref? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g127 (flat-named-contract (quote Ref?) (lambda (x) (Ref? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g128 (simple-result-> g127 2))>) #<syntax g128>)
type->contract:
 (-> Ref Var)
 #<->/sc #<flat/sc (flat-named-contract (quote Ref?) (lambda (x) (Ref? x)))> #<flat/sc symbol?>>
 (() #<syntax g122>)
type->contract:
 (-> Var (Listof Var) Exp Lam)
 #<->/sc #<flat/sc symbol?> #<listof/sc #<flat/sc symbol?>> #<or/sc #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))> #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))>> #<flat/sc (flat-named-contract (quote Lam?) (lambda (x) (Lam? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g131 (flat-named-contract (quote Lam?) (lambda (x) (Lam? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g132 (simple-result-> g131 3))>) #<syntax g132>)
type->contract:
 (-> Lam (Listof Var))
 #<->/sc #<flat/sc (flat-named-contract (quote Lam?) (lambda (x) (Lam? x)))> #<listof/sc #<flat/sc symbol?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g134 (listof symbol?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g134))>)
type->contract:
 (-> Lam Exp)
 #<->/sc #<flat/sc (flat-named-contract (quote Lam?) (lambda (x) (Lam? x)))> #<or/sc #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))> #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g136 (flat-named-contract (quote Call?) (lambda (x) (Call? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g137 (or/c g136 g124))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g137))>)
type->contract:
 (-> Var Exp (Listof Exp) Call)
 #<->/screquire-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/kcfa/cfg/main.rkt" (require/typed/check "ui.rkt" (analyze (-> Exp MonoStore)) (format-mono-store (-> MonoStore String))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/kcfa/cfg/benv-adapted.rkt" (require/typed/check "benv.rkt" (#:struct Closure ((lam : Lam) (benv : BEnv))) (#:struct Binding ((var : Var) (time : Time))) (empty-benv BEnv) (benv-lookup (-> BEnv Var Addr)) (benv-extend (-> BEnv Var Addr BEnv)) (benv-extend* (-> BEnv (Listof Var) (Listof Addr) BEnv))))
 #<flat/sc symbol?> #<or/sc #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))> #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))>> #<listof/sc #<or/sc #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))> #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))>>> #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g139 (simple-result-> g136 3))>) #<syntax g139>)
type->contract:
 (-> Call Exp)
 #<->/sc #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))> #<or/sc #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))> #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g137))>)
type->contract:
 (-> Call (Listof Exp))
 #<->/sc #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))> #<listof/sc #<or/sc #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))> #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g142 (listof g137))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g142))>)
type->contract:
 (-> Lam BEnv Closure)
 #<->/sc #<flat/sc (flat-named-contract (quote Lam?) (lambda (x) (Lam? x)))> #<hash/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>> #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g62 (flat-named-contract (quote Binding?) (lambda (x) (Binding? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g63 (typed-racket-hash/c symbol? g62))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g64 (flat-named-contract (quote Closure?) (lambda (x) (Closure? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g63) () (values g64))>)
type->contract:
 (-> Closure Lam)
 #<->/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))> #<flat/sc (flat-named-contract (quote Lam?) (lambda (x) (Lam? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g66 (flat-named-contract (quote Lam?) (lambda (x) (Lam? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g67 (simple-result-> g66 1))>) #<syntax g67>)
type->contract:
 (-> Closure BEnv)
 #<->/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))> #<hash/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g63))>)
type->contract:
 (-> Var Time Binding)
 #<->/sc #<flat/sc symbol?> #<listof/sc #<flat/sc symbol?>> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g70 (simple-result-> g62 2))>) #<syntax g70>)
type->contract:
 (-> Binding Var)
 #<->/sc #<flat/screquire-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/kcfa/cfg/time-adapted.rkt" (require/typed/check "time.rkt" (time-zero Time) (k (Parameterof Natural)) (tick (-> Stx Time Time)) (alloc (-> Time (-> Var Addr)))))
 (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g72 (simple-result-> symbol? 1))>) #<syntax g72>)
type->contract:
 (-> Binding Time)
 #<->/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<listof/sc #<flat/sc symbol?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g74 (listof symbol?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g74))>)
type->contract:
 BEnv
 #<hash/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>>
 (() #<syntax g63>)
type->contract:
 (-> BEnv Var Binding)
 #<->/sc #<hash/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>> #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g63 any/c) () (values g62))>)
type->contract:
 (-> BEnv Var Binding BEnv)
 #<->/sc #<hash/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>> #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<hash/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g63 any/c any/c) () (values g63))>)
type->contract:
 (-> BEnv Time (Listof Binding) BEnv)
 #<->/sc #<hash/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>> #<listof/sc #<flat/sc symbol?>> #<listof/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>> #<hash/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g63 any/c any/c) () (values g63))>)
type->contract:
 Time
 #<listof/sc #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g8 (listof symbol?))>) #<syntax g8>)
type->contract:
 (Parameterof Nonnegative-Integer)
 #<parameter/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g10 (parameter/c any/c exact-nonnegative-integer?))>) #<syntax g10>)
type->contract:
 (-> Stx Time Time)
 #<->/sc #<flat/sc (flat-named-contract (quote Stx?) (lambda (x) (Stx? x)))> #<listof/sc #<flat/sc symbol?>> #<listof/sc #<flat/sc symbol?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g8))>)
type->contract:
 (-> Time (-> Var Binding))
 #<->/sc #<listof/sc #<flat/sc symbol?>> #<->/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g13 (flat-named-contract (quote Binding?) (lambda (x) (Binding? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g14 (simple-result-> g13 1))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/kcfa/cfg/denotable-adapted.rkt" (require/typed/check "denotable.rkt" (#:struct State ((call : Exp) (benv : BEnv) (store : Store) (time : Time))) (d-bot Denotable) (d-join (-> Denotable Denotable Denotable)) (empty-store Store) (store-lookup (-> Store Addr Denotable)) (store-update (-> Store Addr Denotable Store)) (store-update* (-> Store (Listof Addr) (Listof Denotable) Store)) (store-join (-> Store Store Store))))
 (->* (any/c) () (values g14))>)
type->contract:
 (-> Exp BEnv Store Time State)
 #<->/sc #<or/sc #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))> #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))>> #<hash/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>> #<hash/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>> #<listof/sc #<flat/sc symbol?>> #<flat/sc (flat-named-contract (quote State?) (lambda (x) (State? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g48 (flat-named-contract (quote Binding?) (lambda (x) (Binding? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g49 (typed-racket-hash/c symbol? g48))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g50 (flat-named-contract (quote Closure?) (lambda (x) (Closure? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g51 (set/c g50))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g52 (typed-racket-hash/c g48 g51))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g53 (flat-named-contract (quote State?) (lambda (x) (State? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g49 g52 any/c) () (values g53))>)
type->contract:
 (-> State Exp)
 #<->/sc #<flat/sc (flat-named-contract (quote State?) (lambda (x) (State? x)))> #<or/sc #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))> #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g55 (flat-named-contract (quote Call?) (lambda (x) (Call? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g56 (flat-named-contract (quote exp?) (lambda (x) (exp? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g57 (or/c g55 g56))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g57))>)
type->contract:
 (-> State BEnv)
 #<->/sc #<flat/sc (flat-named-contract (quote State?) (lambda (x) (State? x)))> #<hash/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g49))>)
type->contract:
 (-> State Store)
 #<->/sc #<flat/sc (flat-named-contract (quote State?) (lambda (x) (State? x)))> #<hash/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g52))>)
type->contract:
 (-> State Time)
 #<->/sc #<flat/sc (flat-named-contract (quote State?) (lambda (x) (State? x)))> #<listof/sc #<flat/sc symbol?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g61 (listof symbol?require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/kcfa/cfg/ui.rkt" (require/typed/check "ai.rkt" (atom-eval (-> BEnv Store (-> Exp Denotable))) (next (-> State (Setof State))) (explore (-> (Setof State) (Listof State) (Setof State)))))
))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g61))>)
type->contract:
 Denotable
 #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>
 (() #<syntax g51>)
type->contract:
 (-> Denotable Denotable Denotable)
 #<->/sc #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g51))>)
type->contract:
 Store
 #<hash/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>>
 (() #<syntax g52>)
type->contract:
 (-> Store Binding Denotable)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g52 any/c) () (values g51))>)
type->contract:
 (-> Store Binding Denotable Store)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>> #<hash/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g52 any/c any/c) () (values g52))>)
type->contract:
 (-> Store (Listof Binding) (Listof Denotable) Store)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>> #<listof/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>> #<listof/sc #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>> #<hash/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g52 any/c any/c) () (values g52))>)
type->contract:
 (-> Store Store Store)
 #<->/sc #<hash/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>> #<hash/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>> #<hash/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g52 g52) () (values g52))>)
type->contract:
 (-> BEnv Store (-> Exp Denotable))
 #<->/sc #<hash/sc #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))>> #<hash/sc #<flat/sc (flat-named-contract (quote Binding?) (lambda (x) (Binding? x)))> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>> #<->/sc #<or/sc #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))> #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))>> #<set/sc #<flat/sc (flat-named-contract (quote Closure?) (lambda (x) (Closure? x)))>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g37 (flat-named-contract (quote Binding?) (lambda (x) (Binding? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g38 (typed-racket-hash/c symbol? g37))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (flat-named-contract (quote Closure?) (lambda (x) (Closure? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g40 (set/c g39))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g41 (typed-racket-hash/c g37 g40))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g42 (->* (any/c) () (values g40)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g38 g41) () (values g42))>)
type->contract:
 (-> State (Setof State))
 #<->/sc #<flat/sc (flat-named-contract (quote State?) (lambda (x) (State? x)))> #<set/sc #<flat/sc (flat-named-contract (quote State?) (lambda (x) (State? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g44 (flat-named-contract (quote State?) (lambda (x) (State? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g45 (set/c g44))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g45))>)
type->contract:
 (-> (Setof State) (Listof State) (Setof State))
 #<->/sc #<set/sc #<flat/sc (flat-named-contract (quote State?) (lambda (x) (State? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote State?) (lambda (x) (State? x)))>> #<set/sc #<flat/sc (flat-named-contract (quote State?) (lambda (x) (State? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g45))>)
type->contract:
 (-> Exp MonoStore)
 #<->/sc #<or/sc #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))> #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))>> #<hash/sc #<flat/sc symbol?> #<set/sc #<or/sc #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))> #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g6 (flat-named-contract (quote exp?) (lambda (x) (exp? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g7 (flat-named-contract (quote Call?) (lambda (x) (Call? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g8 (or/c g6 g7))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g9 (set/c g8))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g10 (typed-racket-hash/c symbol? g9))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g10))>)
type->contract:
 (-> MonoStore String)
 #<->/sc #<hash/sc #<flat/sc symbol?> #<set/sc #<or/sc #<flat/sc (flat-named-contract (quote exp?) (lambda (x) (exp? x)))> #<flat/sc (flat-named-contract (quote Call?) (lambda (x) (Call? x)))>>>> #<flat/sc string?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g10) () (values string?))>)


lnm

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/lnm/cfg/modulegraph-adapted.rkt" (require/typed/check "modulegraph.rkt" (#:struct modulegraph ((project-name : String) (adjlist : (Listof (Listof String))))) (project-name (-> ModuleGraph String)) (from-tex (-> Path-String ModuleGraph)) (module-names (-> ModuleGraph (Listof String))) (path->project-name (-> Path String))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/lnm/cfg/summary-adapted.rkt" (require/typed/check "summary.rkt" (#:struct summary ((source : Path-String) (dataset : (Vectorof (Listof Index))) (modulegraph : ModuleGraph))) (from-rktd (->* (String) (#:graph (U Path #f)) Summary)) (all-variations (-> Summary (Sequenceof String))) (get-num-variations (-> Summary Index)) (get-project-name (-> Summary String)) (predicate->variations (-> Summary (-> String Boolean) (Sequenceof String))) (untyped-mean (-> Summary Real)) (variation->mean-runtime (-> Summary String Real))))
type->contract:
 (-> String (Listof (Listof String)) modulegraph)
 #<->/sc #<flat/sc string?> #<listof/sc #<listof/sc #<flat/sc string?>>> #<flat/sc (flat-named-contract (quote modulegraph?) (lambda (x) (modulegraph? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g15 (flat-named-contract (quote modulegraph?) (lambda (x) (modulegraph? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g16 (simple-result-> g15 2))>) #<syntax g16>)
type->contract:
 (-> modulegraph String)
 #<->/sc #<flat/sc (flat-named-contract (quote modulegraph?) (lambda (x) (modulegraph? x)))> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g18 (simple-result-> string? 1))>) #<syntax g18>)
type->contract:
 (-> modulegraph (Listof (Listof String)))
 #<->/sc #<flat/sc (flat-named-contract (quote modulegraph?) (lambda (x) (modulegraph? x)))> #<listof/sc #<listof/sc #<flat/sc string?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g20 (listof string?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g21 (listof g20))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g21))>)
type->contract:
 (-> modulegraph String)
 #<->/sc #<flat/sc (flat-named-contract (quote modulegraph?) (lambda (x) (modulegraph? x)))> #<flat/sc string?>>
 (() #<syntax g18>)
type->contract:
 (-> Path-String modulegraph)
 #<->/sc #<or/sc #<flat/sc path?> #<flat/sc string?>> #<flat/sc (flat-named-contract (quote modulegraph?) (lambda (x) (modulegraph? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g24 (simple-result-> g15 1))>) #<syntax g24>)
type->contract:
 (-> modulegraph (Listof String))
 #<->/sc #<flat/sc (flat-named-contract (quote modulegraph?) (lambda (x) (modulegraph? x)))> #<listof/sc #<flat/sc string?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g20))>)
type->contract:
 (-> Path String)
 #<->/sc #<flat/sc path?> #<flat/sc string?>>
 (() #<syntax g18>)
type->contract:
 Float-Complex
 #<flat/sc (and/c number? (lambda (x) (and (flonum? (imag-part x)) (flonum? (real-part x)))))>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g40 (and/c number? (lambda (x) (and (flonum? (imag-part x)) (flonum? (real-part x))))))>) #<syntax g40>)
type->contract:
 (Parameterof Rounding-Mode)
 #<parameter/sc #<or/sc #<flat/sc (quote down)> #<flat/sc (quote up)> #<flat/sc (quote zero)> #<flat/sc (quote nearest)>> #<or/sc #<flat/sc (quote down)> #<flat/sc (quote up)> #<flat/sc (quote zero)> #<flat/sc (quote nearest)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g177 (or/c (quote down) (quote up) (quote zero) (quote nearest)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g178 (parameter/c any/c g177))>) #<syntax g178>)
type->contract:
 Positive-Integer
 #<or/sc #<flat/sc (and/c exact-integer? positive?)>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g180 (and/c exact-integer? positive?))>) #<syntax g180>)
type->contract:
 Positive-Integer
 #<or/sc #<flat/sc (and/c exact-integer? positive?)>>
 (() #<syntax g180>)
type->contract:
 (Parameterof Integer)
 #<parameter/sc #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g183 (parameter/c any/c exact-integer?))>) #<syntax g183>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g185 (simple-result-> bigfloat? 1))>) #<syntax g185>)
type->contract:
 (-> Bigfloat Positive-Integer)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc (and/c exact-integer? positive?)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g187 (simple-result-> g180 1))>) #<syntax g187>)
type->contract:
 (-> Bigfloat (U One Zero))
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g189 (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g190 (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g191 (or/c g189 g190))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g191))>)
type->contract:
 (-> Bigfloat Integer)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g193 (simple-result-> exact-integer? 1))>) #<syntax g193>)
type->contract:
 (-> Bigfloat Integer)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax g193>)
type->contract:
 (-> Bigfloat (values Integer Integer))
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values exact-integer? exact-integer?))>)
type->contract:
 (-> Bigfloat Flonum)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc flonum?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g197 (simple-result-> flonum? 1))>) #<syntax g197>)
type->contract:
 (-> Bigfloat Integer)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax g193>)
type->contract:
 (-> Bigfloat Exact-Rational)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc t:exact-rational?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g200 (simple-result-> t:exact-rational? 1))>) #<syntax g200>)
type->contract:
 (-> Bigfloat (U Exact-Rational Float))
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc (and/c flonum? negative?)> #<flat/sc (and/c flonum? positive?)> #<flat/sc (λ (x) (eqv? x -0.0))> #<flat/sc (λ (x) (eqv? x 0.0))> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))> #<flat/sc (and/c exact-rational? negative? (not/c integer?))> #<flat/sc (and/c exact-rational? positive? (not/c integer?))> #<flat/sc (and/c exact-integer? negative? (not/c fixnum?))> #<flat/sc (and/c exact-integer? positive? (not/c fixnum?))> #<flat/sc (and/c fixnum? negative?)> #<flat/sc (and/c fixnum? positive? (not/c index?))> #<flat/sc (and/c index? positive? (not/c byte?))> #<flat/sc (λ (n) (and (byte? n) (> n 1)))> #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g202 (and/c flonum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g203 (and/c flonum? positive?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g204 (λ (x) (eqv? x -0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g205 (λ (x) (eqv? x 0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g206 (and/c flonum? (lambda (x) (eqv? x +nan.0))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g207 (and/c exact-rational? negative? (not/c integer?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g208 (and/c exact-rational? positive? (not/c integer?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g209 (and/c exact-integer? negative? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g210 (and/c exact-integer? positive? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g211 (and/c fixnum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g212 (and/c fixnum? positive? (not/c index?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g213 (and/c index? positive? (not/c byte?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g214 (λ (n) (and (byte? n) (> n 1))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g215 (or/c g202 g203 g204 g205 g206 g207 g208 g209 g210 g211 g212 g213 g214 g189 g190))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g215))>)
type->contract:
 (-> Bigfloat String)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g217 (simple-result-> string? 1))>) #<syntax g217>)
type->contract:
 (-> Integer Integer Bigfloat)
 #<->/sc #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc exact-integer?>> #<flat/sc bigfloat?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g219 (simple-result-> bigfloat? 2))>) #<syntax g219>)
type->contract:
 (-> Flonum Bigfloat)
 #<->/sc #<or/sc #<flat/sc flonum?>> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Integer Bigfloat)
 #<->/sc #<or/sc #<flat/sc exact-integer?>> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Exact-Rational Bigfloat)
 #<->/sc #<or/sc #<flat/sc t:exact-rational?>> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Real Bigfloat)
 #<->/sc #<or/sc #<flat/sc real?>> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> String (U Bigfloat False))
 #<->/sc #<flat/sc string?> #<or/sc #<flat/sc (quote #f)> #<flat/sc bigfloat?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g225 (or/c (quote #f) bigfloat?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g225))>)
type->contract:
 (case-> (-> (U Real String) Bigfloat) (-> Integer Integer Bigfloat))
 #<case->/sc #<arr/sc #<or/sc #<flat/sc real?> #<flat/sc string?>> #<flat/sc bigfloat?>> #<arr/sc #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc exact-integer?>> #<flat/sc bigfloat?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (any/c) (values bigfloat?))>)
type->contract:
 (-> Bigfloat Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> (Listof Bigfloat) Bigfloat)
 #<->/sc #<listof/sc #<flat/sc bigfloat?>> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g236 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g236))>)
type->contract:
 (-> Bigfloat Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g236))>)
type->contract:
 (-> Bigfloat Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g236))>)
type->contract:
 (-> Bigfloat Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g236))>)
type->contract:
 (-> Bigfloat Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g236))>)
type->contract:
 (-> Integer Bigfloat)
 #<->/sc #<or/sc #<flat/sc exact-integer?>> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Integer Bigfloat Bigfloat)
 #<->/sc #<or/sc #<flat/sc exact-integer?>> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Integer Bigfloat Bigfloat)
 #<->/sc #<or/sc #<flat/sc exact-integer?>> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Integer Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc exact-integer?>> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Integer Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc exact-integer?>> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Integer)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax g193>)
type->contract:
 (-> Integer Bigfloat)
 #<->/sc #<or/sc #<flat/sc exact-integer?>> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat Integer)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g249 (simple-result-> exact-integer? 2))>) #<syntax g249>)
type->contract:
 (-> Bigfloat Integer Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc exact-integer?>> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat (values Bigfloat (U -1 One)))
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<or/sc #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote -1) (lambda (x) (equal? x (quote -1))))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g254 (flat-named-contract (quote -1) (lambda (x) (equal? x (quote -1)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g255 (or/c g189 g254))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values bigfloat? g255))>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g185>)
type->contract:
 (-> Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g236))>)
type->contract:
 (-> Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g236))>)
type->contract:
 (-> Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g236))>)
type->contract:
 (-> Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g236))>)
type->contract:
 (-> Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g236))>)
type->contract:
 (-> Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g236))>)
type->contract:
 (-> Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g236))>)
type->contract:
 (-> Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g236))>)
type->contract:
 (-> Bigfloat Boolean)
 #<->/sc #<flat/sc bigfloat?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g236))>)
type->contract:
 (-> Bigfloat (values Bigfloat Bigfloat))
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values bigfloat? bigfloat?))>)
type->contract:
 (-> Bigfloat (values Bigfloat Bigfloat))
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values bigfloat? bigfloat?))>)
type->contract:
 (-> Bigfloat (values Bigfloat Bigfloat))
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values bigfloat? bigfloat?))>)
type->contract:
 (-> Bigfloat Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/lnm/cfg/summary.rkt" (require/typed/check "bitstring.rkt" (bitstring->natural (-> String Index)) (log2 (-> Index Index)) (natural->bitstring (-> Index #:pad Index String))))
>
 (() #<syntax g219>)
type->contract:
 (-> Bigfloat Bigfloat Bigfloat)
 #<->/sc #<flat/sc bigfloat?> #<flat/sc bigfloat?> #<flat/sc bigfloat?>>
 (() #<syntax g219>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (promise-not-name/c bigfloat?))>) #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (Promise Bigfloat)
 #<promise/sc #<flat/sc bigfloat?>>
 (() #<syntax g39>)
type->contract:
 (-> Bigfloat)
 #<->/sc #<flat/sc bigfloat?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g65 (simple-result-> bigfloat? 0))>) #<syntax g65>)
type->contract:
 (-> Bigfloat)
 #<->/sc #<flat/sc bigfloat?>>
 (() #<syntax g65>)
type->contract:
 (-> Bigfloat)
 #<->/sc #<flat/sc bigfloat?>>
 (() #<syntax g65>)
type->contract:
 (-> Bigfloat)
 #<->/sc #<flat/sc bigfloat?>>
 (() #<syntax g65>)
type->contract:
 (-> Bigfloat)
 #<->/sc #<flat/sc bigfloat?>>
 (() #<syntax g65>)
type->contract:
 (-> Bigfloat)
 #<->/sc #<flat/sc bigfloat?>>
 (() #<syntax g65>)
type->contract:
 (-> Bigfloat)
 #<->/sc #<flat/sc bigfloat?>>
 (() #<syntax g65>)
type->contract:
 (-> Bigfloat)
 #<->/sc #<flat/sc bigfloat?>>
 (() #<syntax g65>)
type->contract:
 (-> Bigfloat)
 #<->/sc #<flat/sc bigfloat?>>
 (() #<syntax g65>)
type->contract:
 (-> Bigfloat)
 #<->/sc #<flat/sc bigfloat?>>
 (() #<syntax g65>)
type->contract:
 Nonnegative-Fixnum
 #<or/sc #<flat/sc (and/c fixnum? nonnegative?)>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g16 (and/c fixnum? nonnegative?))>) #<syntax g16>)
type->contract:
 (-> (-> Index String) (Sequenceof Index) (Sequenceof String))
 #<->/sc #<->/sc #<or/sc #<flat/sc t:index?>> #<flat/sc string?>> #<sequence/sc #<or/sc #<flat/sc t:index?>>> #<sequence/sc #<flat/sc string?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g69 (->* (t:index?) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g70 (sequence/c any/c))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g71 (sequence/c string?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g69 g70) () (values g71))>)
type->contract:
 (-> (-> String Boolean) (Sequenceof String) (Sequenceof String))
 #<->/sc #<->/sc #<flat/sc string?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<sequence/sc #<flat/sc string?>> #<sequence/sc #<flat/sc string?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g73 (->* (string?) () any))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g73 g70) () (values g71))>)
type->contract:
 (-> String Index)
 #<->/sc #<flat/sc string?> #<or/sc #<flat/sc t:index?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g75 (simple-result-> t:index? 1))>) #<syntax g75>)
type->contract:
 (-> Index Index)
 #<->/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>>
 (() #<syntax g75>)
type->contract:
 (-> Index #:pad Index String)
 #<->/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>> #<flat/sc string?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c #:pad any/c) () (values string?))>)
type->contract:
 (-> Path-String (Vectorof (Listof Index)) modulegraph summary)
 #<->/sc #<or/sc #<flat/sc path?> #<flat/sc string?>> #<vectorof/sc #<listof/sc #<or/sc #<flat/sc t:index?>>>> #<flat/sc (flat-named-contract (quote modulegraph?) (lambda (x) (modulegraph? x)))> #<flat/sc (flat-named-contract (quote summary?) (lambda (x) (summary? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g19 (listof t:index?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g20 (vectorof g19))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g21 (flat-named-contract (quote summary?) (lambda (x) (summary? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g20 any/c) () (values g21))>)
type->contract:
 (-> summary Path-String)
 #<->/sc #<flat/sc (flat-named-contract (quote summary?) (lambda (x) (summary? x)))> #<or/sc #<flat/sc path?> #<flat/sc string?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g23 (or/c path? string?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g23))>)
type->contract:
 (-> summary (Vectorof (Listof Index)))
 #<->/sc #<flat/sc (flat-named-contract (quote summary?) (lambda (x) (summary? x)))> #<vectorof/sc #<listof/sc #<or/sc #<flat/sc t:index?>>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g20))>)
type->contract:
 (-> summary modulegraph)
 #<->/sc #<flat/sc (flat-named-contract (quote summary?) (lambda (x) (summary? x)))require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/lnm/cfg/main.rkt" (require/typed/check "spreadsheet.rkt" (rktd->spreadsheet (-> Path-String #:output Path-String #:format Symbol Void))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/lnm/cfg/spreadsheet.rkt" (require/typed/check "bitstring.rkt" (log2 (-> Index Index)) (natural->bitstring (-> Index #:pad Index String))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/lnm/cfg/main.rkt" (require/typed/check "lnm-plot.rkt" (lnm-plot (-> Summary #:L (Listof Index) #:N Index #:M Index #:max-overhead Index #:cutoff-proportion Float #:num-samples Positive-Integer #:plot-height Positive-Integer #:plot-width Positive-Integer (Listof Any)))))
> #<flat/sc (flat-named-contract (quote modulegraph?) (lambda (x) (modulegraph? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g26 (flat-named-contract (quote modulegraph?) (lambda (x) (modulegraph? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g27 (simple-result-> g26 1))>) #<syntax g27>)
type->contract:
 (-> String [#:graph (U False Path)] summary)
 #<->/sc #<flat/sc string?> #<or/sc #<flat/sc path?> #<flat/sc (quote #f)>> #<flat/sc (flat-named-contract (quote summary?) (lambda (x) (summary? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (#:graph any/c) (values g21))>)
type->contract:
 (-> summary (Sequenceof String))
 #<->/sc #<flat/sc (flat-named-contract (quote summary?) (lambda (x) (summary? x)))> #<sequence/sc #<flat/sc string?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g30 (sequence/c string?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g30))>)
type->contract:
 (-> summary Index)
 #<->/sc #<flat/sc (flat-named-contract (quote summary?) (lambda (x) (summary? x)))> #<or/sc #<flat/sc t:index?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g32 (simple-result-> t:index? 1))>) #<syntax g32>)
type->contract:
 (-> summary String)
 #<->/sc #<flat/sc (flat-named-contract (quote summary?) (lambda (x) (summary? x)))> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g34 (simple-result-> string? 1))>) #<syntax g34>)
type->contract:
 (-> summary (-> String Boolean) (Sequenceof String))
 #<->/sc #<flat/sc (flat-named-contract (quote summary?) (lambda (x) (summary? x)))> #<->/sc #<flat/sc string?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<sequence/sc #<flat/sc string?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g36 (->* (string?) () any))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g36) () (values g30))>)
type->contract:
 (-> summary Real)
 #<->/sc #<flat/sc (flat-named-contract (quote summary?) (lambda (x) (summary? x)))> #<or/sc #<flat/sc real?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g38 (simple-result-> real? 1))>) #<syntax g38>)
type->contract:
 (-> summary String Real)
 #<->/sc #<flat/sc (flat-named-contract (quote summary?) (lambda (x) (summary? x)))> #<flat/sc string?> #<or/sc #<flat/sc real?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g40 (simple-result-> real? 2))>) #<syntax g40>)
type->contract:
 (-> Index Index)
 #<->/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g21 (simple-result-> t:index? 1))>) #<syntax g21>)
type->contract:
 (-> Index #:pad Index String)
 #<->/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>> #<flat/sc string?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c #:pad any/c) () (values string?))>)
type->contract:
 Anchor
 #<or/sc #<flat/sc (quote auto)> #<flat/sc (quote bottom-right)> #<flat/sc (quote bottom)> #<flat/sc (quote bottom-left)> #<flat/sc (quote right)> #<flat/sc (quote center)> #<flat/sc (quote left)> #<flat/sc (quote top-right)> #<flat/sc (quote top)> #<flat/sc (quote top-left)>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g46 (or/c (quote auto) (quote bottom-right) (quote bottom) (quote bottom-left) (quote right) (quote center) (quote left) (quote top-right) (quote top) (quote top-left)))>) #<syntax g46>)
type->contract:
 (-> Any Any Any Any Any Any Any Any SRFI-Date)
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc date?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any-wrap/c any-wrap/c any-wrap/c any-wrap/c any-wrap/c any-wrap/c any-wrap/c any-wrap/c) () (values date?))>)
type->contract:
 (-> SRFI-Date String String)
 #<->/sc #<flat/sc date?> #<flat/sc string?> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g9 (simple-result-> string? 2))>) #<syntax g9>)
type->contract:
 (-> Integer Byte Byte sql-date)
 #<->/sc #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>> #<flat/sc (flat-named-contract (quote sql-date?) (lambda (x) (sql-date? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g437 (flat-named-contract (quote sql-date?) (lambda (x) (sql-date? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g438 (simple-result-> g437 3))>) #<syntax g438>)
type->contract:
 (-> sql-date Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-date?) (lambda (x) (sql-date? x)))> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g440 (simple-result-> exact-integer? 1))>) #<syntax g440>)
type->contract:
 (-> sql-date Byte)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-date?) (lambda (x) (sql-date? x)))> #<or/sc #<flat/sc byte?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g442 (simple-result-> byte? 1))>) #<syntax g442>)
type->contract:
 (-> sql-date Byte)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-date?) (lambda (x) (sql-date? x)))> #<or/sc #<flat/sc byte?>>>
 (() #<syntax g442>)
type->contract:
 (-> Nonnegative-Integer Nonnegative-Integer Nonnegative-Integer Nonnegative-Integer (U False Integer) sql-time)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-integer?> #<flat/sc (quote #f)>> #<flat/sc (flat-named-contract (quote sql-time?) (lambda (x) (sql-time? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g445 (flat-named-contract (quote sql-time?) (lambda (x) (sql-time? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c any/c) () (values g445))>)
type->contract:
 (-> sql-time Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-time?) (lambda (x) (sql-time? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g447 (simple-result-> exact-nonnegative-integer? 1))>) #<syntax g447>)
type->contract:
 (-> sql-time Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-time?) (lambda (x) (sql-time? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g447>)
type->contract:
 (-> sql-time Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-time?) (lambda (x) (sql-time? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g447>)
type->contract:
 (-> sql-time Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-time?) (lambda (x) (sql-time? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g447>)
type->contract:
 (-> sql-time (U False Integer))
 #<->/sc #<flat/sc (flat-named-contract (quote sql-time?) (lambda (x) (sql-time? x)))> #<or/sc #<flat/sc exact-integer?> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g452 (or/c exact-integer? (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g452))>)
type->contract:
 (-> Integer Nonnegative-Integer Nonnegative-Integer Nonnegative-Integer Nonnegative-Integer Nonnegative-Integer Nonnegative-Integer (U False Integer) sql-timestamp)
 #<->/sc #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-integer?> #<flat/sc (quote #f)>> #<flat/sc (flat-named-contract (quote sql-timestamp?) (lambda (x) (sql-timestamp? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g454 (flat-named-contract (quote sql-timestamp?) (lambda (x) (sql-timestamp? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c any/c any/c any/c any/c) () (values g454))>)
type->contract:
 (-> sql-timestamp Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-timestamp?) (lambda (x) (sql-timestamp? x)))> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax g440>)
type->contract:
 (-> sql-timestamp Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-timestamp?) (lambda (x) (sql-timestamp? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g447>)
type->contract:
 (-> sql-timestamp Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-timestamp?) (lambda (x) (sql-timestamp? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g447>)
type->contract:
 (-> sql-timestamp Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-timestamp?) (lambda (x) (sql-timestamp? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g447>)
type->contract:
 (-> sql-timestamp Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-timestamp?) (lambda (x) (sql-timestamp? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g447>)
type->contract:
 (-> sql-timestamp Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-timestamp?) (lambda (x) (sql-timestamp? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g447>)
type->contract:
 (-> sql-timestamp Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote sql-timestamp?) (lambda (x) (sql-timestamp? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g447>)
type->contract:
 (-> sql-timestamp (U False Integer))
 #<->/sc #<flat/sc (flat-named-contract (quote sql-timestamp?) (lambda (x) (sql-timestamp? x)))> #<or/sc #<flat/sc exact-integer?> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g452))>)
type->contract:
 (-> Byte Byte Byte Positive-Byte Positive-Byte Integer Byte Index Boolean Integer date)
 #<->/sc #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc (and/c byte? positive?)>> #<or/sc #<flat/sc (and/c byte? positive?)>> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>> #<or/sc #<flat/sc exact-integer?>> #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g464 (flat-named-contract (quote date?) (lambda (x) (date? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c any/c any/c any/c any/c any/c any/c) () (values g464))>)
type->contract:
 (-> Byte Byte Byte Positive-Byte Positive-Byte Integer Byte Index Boolean Integer date)
 #<->/sc #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc (and/c byte? positive?)>> #<or/sc #<flat/sc (and/c byte? positive?)>> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>> #<or/sc #<flat/sc exact-integer?>> #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c any/c any/c any/c any/c any/c any/c) () (values g464))>)
type->contract:
 (-> date Byte)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<or/sc #<flat/sc byte?>>>
 (() #<syntax g442>)
type->contract:
 (-> date Byte)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<or/sc #<flat/sc byte?>>>
 (() #<syntax g442>)
type->contract:
 (-> date Byte)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<or/sc #<flat/sc byte?>>>
 (() #<syntax g442>)
type->contract:
 (-> date Positive-Byte)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<or/sc #<flat/sc (and/c byte? positive?)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g470 (and/c byte? positive?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g471 (simple-result-> g470 1))>) #<syntax g471>)
type->contract:
 (-> date Positive-Byte)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<or/sc #<flat/sc (and/c byte? positive?)>>>
 (() #<syntax g471>)
type->contract:
 (-> date Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax g440>)
type->contract:
 (-> date Byte)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<or/sc #<flat/sc byte?>>>
 (() #<syntax g442>)
type->contract:
 (-> date Index)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<or/sc #<flat/sc t:index?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g476 (simple-result-> t:index? 1))>) #<syntax g476>)
type->contract:
 (-> date Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g478 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g478))>)
type->contract:
 (-> date Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax g440>)
type->contract:
 (-> Byte Byte Byte Positive-Byte Positive-Byte Integer Byte Index Boolean Integer Nonnegative-Fixnum String date*)
 #<->/sc #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc (and/c byte? positive?)>> #<or/sc #<flat/sc (and/c byte? positive?)>> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc (and/c fixnum? nonnegative?)>> #<flat/sc string?> #<flat/sc (flat-named-contract (quote date*?) (lambda (x) (date*? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g481 (flat-named-contract (quote date*?) (lambda (x) (date*? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c any/c any/c any/c any/c any/c any/c any/c any/c) () (values g481))>)
type->contract:
 (-> Byte Byte Byte Positive-Byte Positive-Byte Integer Byte Index Boolean Integer Nonnegative-Fixnum String date*)
 #<->/sc #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc (and/c byte? positive?)>> #<or/sc #<flat/sc (and/c byte? positive?)>> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc (and/c fixnum? nonnegative?)>> #<flat/sc string?> #<flat/sc (flat-named-contract (quote date*?) (lambda (x) (date*? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c any/c any/c any/c any/c any/c any/c any/c any/c) () (values g481))>)
type->contract:
 (-> date* Nonnegative-Fixnum)
 #<->/sc #<flat/sc (flat-named-contract (quote date*?) (lambda (x) (date*? x)))> #<or/sc #<flat/sc (and/c fixnum? nonnegative?)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g484 (and/c fixnum? nonnegative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g485 (simple-result-> g484 1))>) #<syntax g485>)
type->contract:
 (-> date* String)
 #<->/sc #<flat/sc (flat-named-contract (quote date*?) (lambda (x) (date*? x)))> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g487 (simple-result-> string? 1))>) #<syntax g487>)
type->contract:
 (->* (Real) (Any) date*)
 #<->/sc #<or/sc #<flat/sc real?>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc (flat-named-contract (quote date*?) (lambda (x) (date*? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (any-wrap/c) (values g481))>)
type->contract:
 (-> date*)
 #<->/sc #<flat/sc (flat-named-contract (quote date*?) (lambda (x) (date*? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g490 (simple-result-> g481 0))>) #<syntax g490>)
type->contract:
 (->* (date) (Any) String)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc string?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (any-wrap/c) (values string?))>)
type->contract:
 (-> (U 'american 'chinese 'german 'indian 'irish 'iso-8601 'julian 'rfc2822))
 #<->/sc #<or/sc #<flat/sc (quote julian)> #<flat/sc (quote rfc2822)> #<flat/sc (quote iso-8601)> #<flat/sc (quote irish)> #<flat/sc (quote indian)> #<flat/sc (quote german)> #<flat/sc (quote chinese)> #<flat/sc (quote american)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g493 (or/c (quote julian) (quote rfc2822) (quote iso-8601) (quote irish) (quote indian) (quote german) (quote chinese) (quote american)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () (values g493))>)
type->contract:
 (->* (date) (Any) Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (any-wrap/c) (values exact-integer?))>)
type->contract:
 (->* (date) (Any) Real)
 #<->/sc #<flat/sc (flat-named-contract (quote date?) (lambda (x) (date? x)))> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc real?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (any-wrap/c) (values real?))>)
type->contract:
 Color-Map
 #<vectorof/sc #<list/sc #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g24 (list/c byte? byte? byte?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g25 (vectorof g24))>) #<syntax g25>)
type->contract:
 Color-Map
 #<vectorof/sc #<list/sc #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>> #<or/sc #<flat/sc byte?>>>>
 (() #<syntax g25>)
type->contract:
 (U (Immutable-Vector Real Real) (Mutable-Vector Real Real))
 #<vector/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g489 (vector/c real? real?))>) #<syntax g489>)
type->contract:
 Real
 #<or/sc #<flat/sc real?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1612:35 real?>)
type->contract:
 Real
 #<or/sc #<flat/sc real?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1612:35 real?>)
type->contract:
 Nonnegative-Real
 #<or/sc #<flat/sc (and/c real? nonnegative?)>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g126 (and/c real? nonnegative?))>) #<syntax g126>)
type->contract:
 Zero
 #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g12 (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0)))))>) #<syntax g12>)
type->contract:
 (-> Integer Boolean BitVector)
 #<->/sc #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>> #<flat/sc bit-vector?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g17 (simple-result-> bit-vector? 2))>) #<syntax g17>)
type->contract:
 (-> BitVector Integer Boolean Void)
 #<->/sc #<flat/sc bit-vector?> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g19 (simple-result-> void? 3))>) #<syntax g19>)
type->contract:
 (-> BitVector Integer Boolean)
 #<->/sc #<flat/sc bit-vector?> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g21 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g21))>)
type->contract:
 (-> Nonnegative-Integer (values Nonnegative-Integer Nonnegative-Integer))
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values exact-nonnegative-integer? exact-nonnegative-integer?))>)
type->contract:
 (Listof Integer)
 #<listof/sc #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g134 (listof exact-integer?))>) #<syntax g134>)
type->contract:
 (U -1 One Zero)
 #<or/sc #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))> #<flat/sc (flat-named-contract (quote -1) (lambda (x) (equal? x (quote -1))))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g16 (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g17 (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g18 (flat-named-contract (quote -1) (lambda (x) (equal? x (quote -1)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g19 (or/c g16 g17 g18))>) #<syntax g19>)
type->contract:
 Real
 #<or/sc #<flat/sc real?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1612:35 real?>)
type->contract:
 Real
 #<or/sc #<flat/sc real?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1612:35 real?>)
type->contract:
 Real
 #<or/sc #<flat/sc real?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1612:35 real?>)
type->contract:
 Real
 #<or/sc #<flat/sc real?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1612:35 real?>)
type->contract:
 (All (A) (-> Symbol (U (-> (U (Immutable-Vector Real Real) (Mutable-Vector Real Real)) A) (-> Real Real A)) (-> Real Real A)))
 #<parametric->/sc #<->/sc #<flat/sc symbol?> #<or/sc #<->/sc #<vector/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>>> A76> #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> A76>> #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> A76>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g78 (vector/c real? real?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A76) (->* (any/c (or/c (->* (g78) () (values A76)) (->* (real? real?) () (values A76)))) () (values (->* (any/c any/c) () (values A76)))))>)
type->contract:
 (-> Symbol (U (-> (U (Immutable-Vector Real Real) (Mutable-Vector Real Real)) (Sequenceof Real)) (-> Real Real (Sequenceof Real))) (-> Real Real (Vectorof Real)))
 #<->/sc #<flat/sc symbol?> #<or/sc #<->/sc #<vector/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>>> #<or/sc #<flat/sc exact-nonnegative-integer?> #<sequence/sc #<or/sc #<flat/sc real?>>>>> #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc exact-nonnegative-integer?> #<sequence/sc #<or/sc #<flat/sc real?>>>>>> #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<vectorof/sc #<or/sc #<flat/sc real?>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g441 (vector/c real? real?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g442 (sequence/c any/c))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g443 (or/c exact-nonnegative-integer? g442))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g444 (->* (g441) () (values g443)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g445 (->* (real? real?) () (values g443)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g446 (or/c g444 g445))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g447 (vectorof real?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g448 (->* (any/c any/c) () (values g447)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g446) () (values g448))>)
type->contract:
 (-> Symbol (U (-> (U (Immutable-Vector Real Real Real) (Mutable-Vector Real Real Real)) (Sequenceof Real)) (-> Real Real Real (Sequenceof Real))) (-> Real Real Real (Vectorof Real)))
 #<->/sc #<flat/sc symbol?> #<or/sc #<->/sc #<vector/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>>> #<or/sc #<flat/sc exact-nonnegative-integer?> #<sequence/sc #<or/sc #<flat/sc real?>>>>> #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc exact-nonnegative-integer?> #<sequence/sc #<or/sc #<flat/sc real?>>>>>> #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<vectorof/sc #<or/sc #<flat/sc real?>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g226 (vector/c real? real? real?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g227 (sequence/c any/c))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g228 (or/c exact-nonnegative-integer? g227))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g229 (->* (g226) () (values g228)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g230 (->* (real? real? real?) () (values g228)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g231 (or/c g229 g230))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/lnm/cfg/lnm-plot.rkt" (require/typed/check "bitstring.rkt" (in-reach (-> String Index (Listof String))) (log2 (-> Index Index))))
 (define g232 (vectorof real?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g233 (->* (any/c any/c any/c) () (values g232)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g231) () (values g233))>)
type->contract:
 (-> (Sequenceof String) Index)
 #<->/sc #<sequence/sc #<flat/sc string?>> #<or/sc #<flat/sc t:index?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g123 (sequence/c any/c))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g123) () (values t:index?))>)
type->contract:
 (-> (Sequenceof String) (Listof String))
 #<->/sc #<sequence/sc #<flat/sc string?>> #<listof/sc #<flat/sc string?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g125 (listof string?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g123) () (values g125))>)
type->contract:
 (-> (-> String Boolean) (Sequenceof String) (Sequenceof String))
 #<->/sc #<->/sc #<flat/sc string?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<sequence/sc #<flat/sc string?>> #<sequence/sc #<flat/sc string?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g127 (->* (string?) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g128 (sequence/c string?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g127 g123) () (values g128))>)
type->contract:
 (-> String Index (Listof String))
 #<->/sc #<flat/sc string?> #<or/sc #<flat/sc t:index?>> #<listof/sc #<flat/sc string?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g125))>)
type->contract:
 (-> Index Index)
 #<->/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g131 (simple-result-> t:index? 1))>) #<syntax g131>)
type->contract:
 (-> Path-String #:format Symbol #:output Path-String Void)
 #<->/sc #<or/sc #<flat/sc path?> #<flat/sc string?>> #<flat/sc symbol?> #<or/sc #<flat/sc path?> #<flat/sc string?>> #<flat/sc void?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c #:format any/c #:output any/c) () (values void?))>)
type->contract:
 (-> summary #:L (Listof Index) #:M Index #:N Index #:cutoff-proportion Flonum #:max-overhead Index #:num-samples Positive-Integer #:plot-height Positive-Integer #:plot-width Positive-Integer (Listof Any))
 #<->/sc #<flat/sc (flat-named-contract (quote summary?) (lambda (x) (summary? x)))> #<listof/sc #<or/sc #<flat/sc t:index?>>> #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc (and/c exact-integer? positive?)>> #<or/sc #<flat/sc (and/c exact-integer? positive?)>> #<or/sc #<flat/sc (and/c exact-integer? positive?)>> #<listof/sc #<any/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c #:L any/c #:M any/c #:N any/c #:cutoff-proportion any/c #:max-overhead any/c #:num-samples any/c #:plot-height any/c #:plot-width any/c) () (values list?))>)


mbta

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/mbta/cfg/main.rkt" (require/typed/check "run-t.rkt" (EOM String) (run-t (-> String String))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/mbta/cfg/run-t.rkt" (require/typed/check "t-view.rkt" (manage% Manage)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/mbta/cfg/t-view.rkt" (require/typed/check "t-graph.rkt" (read-t-graph (-> (Instance MBTA)))))
type->contract:
 (-> Connection* Graph)
 #<->/sc #<listof/sc #<list/sc #<flat/sc string?> #<flat/sc string?>>> #<flat/sc graph?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g82 (simple-result-> graph? 1))>) #<syntax g82>)
type->contract:
 (-> Graph String (Sequenceof String))
 #<->/sc #<flat/sc graph?> #<flat/sc string?> #<sequence/sc #<flat/sc string?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g84 (sequence/c string?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g84))>)
type->contract:
 (-> Graph [#:for-each Any] [#:init (Setof Line)] (values (-> String String (Setof Line)) Any (-> String String (Setof Line) Void)))
 #<->/sc #<flat/sc graph?> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<set/sc #<or/sc #<flat/sc (quote "green")> #<flat/sc (quote "E")> #<flat/sc (quote "D")> #<flat/sc (quote "C")> #<flat/sc (quote "B")> #<flat/sc (quote "red")> #<flat/sc (quote "Mattapan")> #<flat/sc (quote "Braintree")> #<flat/sc (quote "orange")> #<flat/sc (quote "blue")>>> #<->/sc #<flat/sc string?> #<flat/sc string?> #<set/sc #<or/sc #<flat/sc (quote "green")> #<flat/sc (quote "E")> #<flat/sc (quote "D")> #<flat/sc (quote "C")> #<flat/sc (quote "B")> #<flat/sc (quote "red")> #<flat/sc (quote "Mattapan")> #<flat/sc (quote "Braintree")> #<flat/sc (quote "orange")> #<flat/sc (quote "blue")>>>> #<any/sc> #<->/sc #<flat/sc string?> #<flat/sc string?> #<set/sc #<or/sc #<flat/sc (quote "green")> #<flat/sc (quote "E")> #<flat/sc (quote "D")> #<flat/sc (quote "C")> #<flat/sc (quote "B")> #<flat/sc (quote "red")> #<flat/sc (quote "Mattapan")> #<flat/sc (quote "Braintree")> #<flat/sc (quote "orange")> #<flat/sc (quote "blue")>>> #<flat/sc void?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g86 (or/c (quote "green") (quote "E") (quote "D") (quote "C") (quote "B") (quote "red") (quote "Mattapan") (quote "Braintree") (quote "orange") (quote "blue")))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g87 (set/c g86))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g88 (->* (any/c any/c) () (values g87)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g89 (simple-result-> void? 3))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (#:for-each any-wrap/c #:init any/c) (values g88 any/c g89))>)
type->contract:
 (-> (Instance MBTA))
 #<->/sc #<object/sc #<->/sc #<any/sc> #<flat/sc string?> #<flat/sc string?> #<listof/sc #<listof/sc #<list/sc #<flat/sc string?> #<set/sc #<or/sc #<flat/sc (quote "blue")> #<flat/sc (quote "orange")> #<flat/sc (quote "Braintree")> #<flat/sc (quote "Mattapan")> #<flat/sc (quote "red")> #<flat/sc (quote "B")> #<flat/sc (quote "C")> #<flat/sc (quote "D")> #<flat/sc (quote "E")> #<flat/sc (quote "green")>>>>>>> #<->/sc #<any/sc> #<set/sc #<flat/sc string?>> #<flat/sc string?>> #<->/sc #<any/sc> #<flat/sc string?> #<or/sc #<flat/sc string?> #<listof/sc #<flat/sc string?>>>> #<->/sc #<any/sc> #<flat/sc string?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<flat/sc graph?> #<listof/sc #<list/sc #<flat/sc string?> #<set/sc #<or/sc #<flat/sc (quote "blue")> #<flat/sc (quote "orange")> #<flat/sc (quote "Braintree")> #<flat/sc (quote "Mattapan")> #<flat/sc (quote "red")> #<flat/sc (quote "B")> #<flat/sc (quote "C")> #<flat/sc (quote "D")> #<flat/sc (quote "E")> #<flat/sc (quote "green")>>>>> #<->/sc #<flat/sc string?> #<flat/sc string?> #<set/sc #<or/sc #<flat/sc (quote "blue")> #<flat/sc (quote "orange")> #<flat/sc (quote "Braintree")> #<flat/sc (quote "Mattapan")> #<flat/sc (quote "red")> #<flat/sc (quote "B")> #<flat/sc (quote "C")> #<flat/sc (quote "D")> #<flat/sc (quote "E")> #<flat/sc (quote "green")>>>> #<listof/sc #<flat/sc string?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g130 (or/c (quote "blue") (quote "orange") (quote "Braintree") (quote "Mattapan") (quote "red") (quote "B") (quote "C") (quote "D") (quote "E") (quote "green")))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g131 (set/c g130))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g132 (list/c string? g131))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g133 (listof g132))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g134 (listof g133))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g135 (->* (any/c string? string?) () (values g134)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g136 (set/c string?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g137 (->* (any/c g136) () (values string?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g138 (listof string?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g139 (or/c string? g138))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g140 (->* (any/c string?) () (values g139)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g141 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g142 (->* (any/c string?) () (values g141)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g143 (->* (string? string?) () (values g131)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g144 (object/c (find-path g135) (render g137) (station g140) (station? g142) (field (G graph?)) (field (bundles g133)) (field (connection-on g143)) (field (stations g138))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () (values g144))>)
type->contract:
 Manage
 #<class/sc #<->/sc #<any/sc> #<flat/sc string?> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>>> #<->/sc #<any/sc> #<flat/sc string?> #<flat/sc string?> #<flat/sc string?>> #<->/sc #<any/sc> #<flat/sc string?> #<or/sc #<flat/sc string?> #<flat/sc (quote #f)>>> #<listof/sc #<flat/sc string?>> #<object/sc #<->/sc #<any/sc> #<flat/sc string?> #<flat/sc string?> #<listof/sc #<listof/sc #<list/sc #<flat/sc string?> #<set/sc #<or/sc #<flat/sc (quote "green")> #<flat/sc (quote "E")> #<flat/sc (quote "D")> #<flat/sc (quote "C")> #<flat/sc (quote "B")> #<flat/sc (quote "red")> #<flat/sc (quote "Mattapan")> #<flat/sc (quote "Braintree")> #<flat/sc (quote "orange")> #<flat/sc (quote "blue")>>>>>>> #<->/sc #<any/sc> #<set/sc #<flat/sc string?>> #<flat/sc string?>> #<->/sc #<any/sc> #<flat/sc string?> #<or/sc #<flat/sc string?> #<listof/sc #<flat/sc string?>>>> #<->/sc #<any/sc> #<flat/sc string?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<flat/sc graph?> #<listof/sc #<list/sc #<flat/sc string?> #<set/sc #<or/sc #<flat/sc (quote "green")> #<flat/sc (quote "E")> #<flat/sc (quote "D")> #<flat/sc (quote "C")> #<flat/sc (quote "B")> #<flat/sc (quote "red")> #<flat/sc (quote "Mattapan")> #<flat/sc (quote "Braintree")> #<flat/sc (quote "orange")> #<flat/sc (quote "blue")>>>>> #<->/sc #<flat/sc string?> #<flat/sc string?> #<set/sc #<or/sc #<flat/sc (quote "green")> #<flat/sc (quote "E")> #<flat/sc (quote "D")> #<flat/sc (quote "C")> #<flat/sc (quote "B")> #<flat/sc (quote "red")> #<flat/sc (quote "Mattapan")> #<flat/sc (quote "Braintree")> #<flat/sc (quote "orange")> #<flat/sc (quote "blue")>>>> #<listof/sc #<flat/sc string?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g45 (or/c string? (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g46 (->* (any/c string?) () (values g45)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g47 (simple-result-> string? 3))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g51 (listof string?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g52 (or/c (quote "green") (quote "E") (quote "D") (quote "C") (quote "B") (quote "red") (quote "Mattapan") (quote "Braintree") (quote "orange") (quote "blue")))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g53 (set/c g52))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g54 (list/c string? g53))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g55 (listof g54))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g56 (listof g55))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g57 (->* (any/c string? string?) () (values g56)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g58 (set/c string?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g59 (->* (any/c g58) () (values string?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g60 (or/c string? g51))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g61 (->* (any/c string?) () (values g60)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g62 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g63 (->* (any/c string?) () (values g62)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g64 (->* (string? string?) () (values g53)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g65 (object/c-opaque (find-path g57) (render g59) (station g61) (station? g63) (field (G graph?)) (field (bundles g55)) (field (connection-on g64)) (field (stations g51))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g66 (let ((g4648 g46) (g4749 g47) (g4650 g46)) (class/c #:opaque #:ignore-local-member-names (field (disabled g51)) (field (mbta-subways g65)) (add-to-disabled g4648) (find g4749) (remove-from-disabled g4650) (override (add-to-disabled g4648) (f...>) #<syntax g66>)
type->contract:
 String
 #<flat/sc string?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:110:20 string?>)
type->contract:
 (-> String String)
 #<->/sc #<flat/sc string?> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g11 (simple-result-> string? 1))>) #<syntax g11>)


morsecode

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/morsecode/cfg/main.rkt" (require/typed/check "morse-code-strings.rkt" (string->morse (-> String String))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/morsecode/cfg/morse-code-strings.rkt" (require/typed/check "morse-code-table.rkt" (char-table (HashTable Char String))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/morsecode/cfg/main.rkt" (require/typed/check "levenshtein.rkt" (string-levenshtein (String String -> Integer))))
type->contract:
 (HashTable Char String)
 #<hash/sc #<flat/sc char?> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g10 (typed-racket-hash/c char? string?))>) #<syntax g10>)
type->contract:
 (-> String String)
 #<->/sc #<flat/sc string?> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g8 (simple-result-> string? 1))>) #<syntax g8>)
type->contract:
 (-> String String Integer)
 #<->/sc #<flat/sc string?> #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g10 (simple-result-> exact-integer? 2))>) #<syntax g10>)


quadT

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/main.rkt" (require/typed/check "world.rkt" (world:allow-hyphenated-last-word-in-paragraph Boolean) (world:quality-default (Parameterof Index)) (world:draft-quality Index)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/main.rkt" (require/typed/check "quad-main.rkt" (typeset (-> Quad DocQuad))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/quad-main.rkt" (require/typed/check "quads.rkt" (quads->doc (-> (Listof Quad) DocQuad)) (quads->page (-> (Listof Quad) PageQuad)) (quads->block (-> (Listof Quad) BlockQuad)) (quad-attrs (Quad -> QuadAttrs)) (line (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem LineQuad)) (quad-car (-> Quad QuadListItem)) (quad-name (-> Quad QuadName)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (group-quad-list (GroupQuad -> GroupQuadList)) (quad-list (Quad -> QuadList)) (quad-has-attr? (Quad QuadAttrKey -> Boolean)) (quads->column (-> (Listof Quad) ColumnQuad)) (page (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem PageQuad)) (column (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem ColumnQuad))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/quad-main.rkt" (require/typed/check "wrap.rkt" (insert-spacers-in-line (->* (LineQuad) ((Option Symbol)) LineQuad)) (wrap-adaptive (->* ((Listof Quad)) (Float) (Listof LineQuad))) (wrap-best (->* ((Listof Quad)) (Float) (Listof LineQuad))) (wrap-first (->* ((Listof Quad)) (Float) (Listof LineQuad))) (fill (->* (LineQuad) ((Option Float)) LineQuad)) (add-horiz-positions (-> GroupQuad GroupQuad))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/ocm-struct-adapted.rkt" (require/typed/check "ocm-struct.rkt" (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type)))))
type->contract:
 (-> $ocm Nonnegative-Integer Void)
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g61 (simple-result-> void? 2))>) #<syntax g61>)
type->contract:
 (-> $ocm (Vectorof Any) Void)
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<vectorof/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g63 (vectorof any-wrap/c))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g63) () (values void?))>)
type->contract:
 (-> $ocm (Vectorof (U Exact-Nonnegative-Integer Symbol)) Void)
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc symbol?>>> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g65 (or/c exact-nonnegative-integer? symbol?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g66 (vectorof g65))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g66) () (values void?))>)
type->contract:
 (-> $ocm Nonnegative-Integer Void)
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc void?>>
 (() #<syntax g61>)
type->contract:
 (-> $ocm Nonnegative-Integer Void)
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc void?>>
 (() #<syntax g61>)
type->contract:
 (-> (Vectorof Any) (Vectorof (U Exact-Nonnegative-Integer Symbol)) Nonnegative-Integer Matrix-Proc-Type Entry->Value-Type Nonnegative-Integer Nonnegative-Integer $ocm)
 #<->/sc #<vectorof/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc symbol?>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<->/sc #<any/sc> #<or/sc #<flat/sc flonum?>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g70 (->* (exact-nonnegative-integer? exact-nonnegative-integer?) () (values any-wrap/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g71 (->* (any/c) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g72 (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g63 g66 any/c g70 g71 any/c any/c) () (values g72))>)
type->contract:
 (-> $ocm (Vectorof Any))
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<vectorof/sc #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g74 (simple-result-> vector? 1))>) #<syntax g74>)
type->contract:
 (-> $ocm (Vectorof (U Exact-Nonnegative-Integer require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/penalty-struct-adapted.rkt" (require/typed/check "penalty-struct.rkt" (#:struct $penalty ((hyphens : Nonnegative-Integer) (width : Value-Type)))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/wrap.rkt" (require/typed/check "measure.rkt" (measure-ascent (->* (String Font-Size Font-Name) (Font-Weight Font-Style) Float)) (measure-text (-> String Font-Size Font-Name Font-Weight Font-Style Float)) (round-float (-> Float Float))))
Symbol)))
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<vectorof/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc symbol?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g66))>)
type->contract:
 (-> $ocm Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g77 (simple-result-> exact-nonnegative-integer? 1))>) #<syntax g77>)
type->contract:
 (-> $ocm Matrix-Proc-Type)
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g79 (simple-result-> any/c 2))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g79))>)
type->contract:
 (-> $ocm Entry->Value-Type)
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc flonum?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g81 (->* (any-wrap/c) () (values flonum?)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g81))>)
type->contract:
 (-> $ocm Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g77>)
type->contract:
 (-> $ocm Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g77>)
type->contract:
 (-> Nonnegative-Integer Value-Type $penalty)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc flonum?>> #<flat/sc (flat-named-contract (quote $penalty?) (lambda (x) ($penalty? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g31 (flat-named-contract (quote $penalty?) (lambda (x) ($penalty? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g32 (simple-result-> g31 2))>) #<syntax g32>)
type->contract:
 (-> $penalty Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote $penalty?) (lambda (x) ($penalty? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g34 (simple-result-> exact-nonnegative-integer? 1))>) #<syntax g34>)
type->contract:
 (-> $penalty Value-Type)
 #<->/sc #<flat/sc (flat-named-contract (quote $penalty?) (lambda (x) ($penalty? x)))> #<or/sc #<flat/sc flonum?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g36 (simple-result-> flonum? 1))>) #<syntax g36>)
type->contract:
 (-> Any Any)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<any/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g50 (->* (any-wrap/c) () (values any/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/wrap.rkt" (require/typed/check "quads.rkt" (quads->line (-> (Listof Quad) LineQuad)) (quad-attrs (-> Quad QuadAttrs)) (quad-name (Quad -> QuadName)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (quad->string (-> Quad String)) (optical-kern (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem Optical-KernQuad)) (word-break (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem Word-BreakQuad)) (piece (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem PieceQuad)) (line (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem LineQuad)) (whitespace/nbsp? (-> Any Boolean)) (whitespace? (-> Any Boolean)) (word-string (-> Quad String)) (group-quad-list (GroupQuad -> GroupQuadList)) (quad-list (Quad -> QuadList)) (spacer (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem SpacerQuad)) (quad-has-attr? (-> Quad QuadAttrKey Boolean))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/wrap.rkt" (require/typed/check "world.rkt" (world:last-line-can-be-short Boolean) (world:new-line-penalty Index) (world:hyphen-penalty Index) (world:hyphen-limit Index) (world:allowed-overfull-ratio Float) (world:line-looseness-key Symbol) (world:ascent-key Symbol) (world:optical-overhang (Parameterof Float)) (world:hanging-chars (Listof String)) (world:use-optical-kerns? Boolean) (world:before-break-key Symbol) (world:default-word-break-list (Parameterof JoinableType)) (world:no-break-key Symbol) (world:word-break-key Symbol) (world:spaces (Listof String)) (world:empty-string String) (world:hyphens-and-dashes (Listof String)) (world:soft-hyphen Char) (world:unbreakable-key QuadAttrKey) (world:minimum-last-line-chars Index) (world:measure-default (Parameterof QuadAttrValue)) (world:measure-key QuadAttrKey) (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Flonum)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:line-index-key QuadAttrKey) (world:total-lines-key QuadAttrKey) (world:horiz-alignment-last-line-key QuadAttrKey) (world:horiz-alignment-key QuadAttrKey) (world:horiz-alignment-default (Parameterof QuadAttrKey)) (world:width-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/wrap.rkt" (require/typed/check "utils.rkt" (attr-change (QuadAttrs HashableList -> QuadAttrs)) (join-quads ((Listof Quad) -> (Listof Quad))) (attr-delete (QuadAttrs QuadAttrKey * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (flatten-quadtree ((Treeof Quad) -> (Listof Quad))) (merge-attrs (JoinableType * -> QuadAttrs)) (group-quad-attr-remove* (GroupQuad QuadAttrKey * -> GroupQuad)) (quad-attr-remove* (Quad QuadAttrKey * -> Quad)) (quad-attr-set (Quad QuadAttrKey QuadAttrValue -> Quad)) (group-quad-attr-set (GroupQuad QuadAttrKey QuadAttrValue -> GroupQuad))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/utils.rkt" (require/typed/check "hyphenate.rkt" (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/utils.rkt" (require/typed/check "measure.rkt" (round-float (-> Float Float))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/utils.rkt" (require/typed/check "quads.rkt" (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-name (-> Quad QuadName)) (quad-attrs (-> Quad QuadAttrs)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (Quad -> QuadList)) (group-quad-list (GroupQuad -> GroupQuadList)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (whitespace/nbsp? (-> Any Boolean)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/utils.rkt" (require/typed/check "world.rkt" (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Float)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key QuadAttrKey) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol)))
 (define g51 (or/c struct-predicate-procedure?/c struct-type-property-predicate-procedure? g50))>) #<syntax g51>)
type->contract:
 (-> Any (HashTable (List String String Symbol Symbol) Measurement-Result-Type))
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<hash/sc #<list/sc #<flat/sc string?> #<flat/sc string?> #<flat/sc symbol?> #<flat/sc symbol?>> #<list/sc #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc flonum?>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g53 (list/c string? string? symbol? symbol?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g54 (list/c flonum? flonum? flonum? flonum?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g55 (typed-racket-hash/c g53 g54))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any-wrap/c) () (values g55))>)
type->contract:
 (->* (String) ((U Char String) #:exceptions (Listof String) #:min-left-length Index #:min-length Index #:min-right-length Index #:omit-string (-> String Boolean) #:omit-word (-> String Boolean)) String)
 #<->/sc #<flat/sc string?> #<or/sc #<flat/sc string?> #<flat/sc char?>> #<listof/sc #<flat/sc string?>> #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>> #<->/sc #<flat/sc string?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<->/sc #<flat/sc string?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g110 (->* (string?) () any))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (any/c #:exceptions any/c #:min-left-length any/c #:min-length any/c #:min-right-length any/c #:omit-string g110 #:omit-word g110) (values string?))>)
type->contract:
 (-> Flonum Flonum)
 #<->/sc #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc flonum?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g112 (simple-result-> flonum? 1))>) #<syntax g112>)
type->contract:
 (-> (U HashableList QuadAttrs) QuadListItem * WordQuad)
 #<->/sc #<or/sc #<name/sc> #<rec/sc ((g66835131 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g66835131>>>) (g66835132 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g66835132>>>) (g66835133 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g66835133>>>)) g66835132>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote word)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g116 (recursive-contract g140 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g117 (recursive-contract g141 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g118 (recursive-contract g142 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g125 (recursive-contract g143 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g126 (recursive-contract g144 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g127 (recursive-contract g145 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g113 (recursive-contract g146 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g114 (recursive-contract g147 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g115 (recursive-contract g148 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g119 (recursive-contract g162 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g120 (recursive-contract g163 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g121 (recursive-contract g164 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g128 (recursive-contract g165 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g129 (recursive-contract g166 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g130 (recursive-contract g167 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g122 (recursive-contract g168 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g123 (recursive-contract g170 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g124 (recursive-contract g172 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g136 (letrec ((g66835132 (recursive-contract g66835132135 #:chaperone)) (g66835132135 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g66835132))))) g66835132))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g137 (or/c g114 g136))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g138 (cons/c g115 g127))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g139 (cons/c (quote word) g138))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g140 (cons/c symbol? g121))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g141 (cons/c symbol? g120))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g142 (cons/c symbol? g119))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g143 (listof g130))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g144 (listof g129))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g145 (listof g128))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g146 (listof g118))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g147 (listof g117))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g148 (listof g116))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g149 (and/c flonum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g150 (and/c flonum? positive?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g151 (λ (x) (eqv? x -0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g152 (λ (x) (eqv? x 0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g153 (and/c flonum? (lambda (x) (eqv? x +nan.0))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g154 (and/c exact-integer? negative? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g155 (and/c exact-integer? positive? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g156 (and/c fixnum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g157 (and/c fixnum? positive? (not/c index?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g158 (and/c index? positive? (not/c byte?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g159 (λ (n) (and (byte? n) (> n 1))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g160 (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g161 (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g162 (or/c string? symbol? (quote #t) (quote #f) g149 g150 g151 g152 g153 g154 g155 g156 g157 g158 g159 g160 g161 g124 g115 g127))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g163 (or/c string? symbol? (quote #t) (quote #f) g149 g150 g151 g152 g153 g154 g155 g156 g157 g158 g159 g160 g161 g123 g114 g126))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g164 (or/c string? symbol? (quote #t) (quote #f) g149 g150 g151 g152 g153 g154 g155 g156 g157 g158 g159 g160 g161 g122 g113 g125))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g165 (or/c string? g124))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g166 (or/c string? g123))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g167 (or/c string? g122))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g168 (cons/c symbol? g138))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g169 (cons/c g114 g126))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g170 (cons/c symbol? g169))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g171 (cons/c g113 g125))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g172 (cons/c symbol? g171))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g137) () #:rest any/c (values g139))>)
type->contract:
 (-> Quad Symbol)
 #<->/sc #<name/sc> #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g174 (simple-result-> symbol? 1))>) #<syntax g174>)
type->contract:
 (-> Quad QuadAttrs)
 #<->/sc #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g115))>)
type->contract:
 (-> (Listof Any) QuadAttrs)
 #<->/sc #<listof/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<name/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g177 (listof any-wrap/c))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g177) () (values g115))>)
type->contract:
 (-> Quad QuadList)
 #<->/sc #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g127))>)
type->contract:
 (-> GroupQuad GroupQuadList)
 #<->/sc #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>> #<listof/sc #<name/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g180 (listof g124))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g180))>)
type->contract:
 (-> (U HashableList QuadAttrs) QuadListItem * BoxQuad)
 #<->/sc #<or/sc #<name/sc> #<rec/sc ((g66838181 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g66838181>>>) (g66838182 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g66838182>>>) (g66838183 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g66838183>>>)) g66838182>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote box)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g186 (letrec ((g66838182 (recursive-contract g66838182185 #:chaperone)) (g66838182185 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g66838182))))) g66838182))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g187 (or/c g114 g186))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g188 (cons/c (quote box) g138))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g187) () #:rest any/c (values g188))>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g190 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g191 (->* (any-wrap/c) () (values g190)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g192 (or/c struct-predicate-procedure?/c struct-type-property-predicate-procedure? g191))>) #<syntax g192>)
type->contract:
 (->* ((U Quad QuadAttrs) Symbol) (QuadAttrValue) QuadAttrValue)
 #<->/sc #<or/sc #<name/sc> #<name/sc>> #<flat/sc symbol?> #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) (any/c) (values g121))>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Positive-Flonum)
 #<parameter/sc #<or/sc #<flat/sc (and/c flonum? positive?)> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))>> #<or/sc #<flat/sc (and/c flonum? positive?)> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g196 (or/c g150 g153))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g197 (parameter/c any/c g196))>) #<syntax g197>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof String)
 #<parameter/sc #<flat/sc string?> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g200 (parameter/c any/c string?))>) #<syntax g200>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Font-Weight)
 #<parameter/sc #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote bold)> #<flat/sc (quote light)>> #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote bold)> #<flat/sc (quote light)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g203 (or/c (quote normal) (quote bold) (quote light)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g204 (parameter/c any/c g203))>) #<syntax g204>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Font-Style)
 #<parameter/sc #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote italic)> #<flat/sc (quote slant)>> #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote italic)> #<flat/sc (quote slant)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g207 (or/c (quote normal) (quote italic) (quote slant)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g208 (parameter/c any/c g207))>) #<syntax g208>)
type->contract:
 (Listof Symbol)
 #<listof/sc #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/wrap.rkt" (require/typed/check "ocm.rkt" (make-ocm (->* (Matrix-Proc-Type Entry->Value-Type) (Entry-Type) OCM-Type)) (ocm-min-index (OCM-Type Index-Type -> (U Index-Type No-Value-Type))) (ocm-min-entry (OCM-Type Index-Type -> Entry-Type))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/wrap.rkt" (require/typed/check "sugar-list.rkt" (shifts (-> (Listof Quad) (Listof Integer) (Listof (Listof (Option Quad))))) (slicef-after (All (A) ((Listof A) (A -> Boolean) -> (Listof (Listof A))))) (break-at (All (A) ((Listof A) (U Nonnegative-Integer (Listof Nonnegative-Integer)) -> (Listof (Listof A)))))))
 (define g210 (listof symbol?))>) #<syntax g210>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Flonum)
 #<parameter/sc #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc flonum?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g213 (parameter/c any/c flonum?))>) #<syntax g213>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (->* (String Positive-Flonum String) (Font-Weight Font-Style) Value-Type)
 #<->/sc #<flat/sc string?> #<or/sc #<flat/sc (and/c flonum? positive?)> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))>> #<flat/sc string?> #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote bold)> #<flat/sc (quote light)>> #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote italic)> #<flat/sc (quote slant)>> #<or/sc #<flat/sc flonum?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c) (any/c any/c) (values flonum?))>)
type->contract:
 (-> String Positive-Flonum String Font-Weight Font-Style Value-Type)
 #<->/sc #<flat/sc string?> #<or/sc #<flat/sc (and/c flonum? positive?)> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))>> #<flat/sc string?> #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote bold)> #<flat/sc (quote light)>> #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote italic)> #<flat/sc (quote slant)>> #<or/sc #<flat/sc flonum?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c any/c) () (values flonum?))>)
type->contract:
 (-> Value-Type Value-Type)
 #<->/sc #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc flonum?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g115 (simple-result-> flonum? 1))>) #<syntax g115>)
type->contract:
 (-> GroupQuadList LineQuad)
 #<->/sc #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote line)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g125 (recursive-contract g151 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g126 (recursive-contract g152 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g127 (recursive-contract g153 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g128 (recursive-contract g154 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g129 (recursive-contract g155 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g130 (recursive-contract g156 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g116 (recursive-contract g158 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g117 (recursive-contract g160 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g118 (recursive-contract g162 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g119 (recursive-contract g163 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g120 (recursive-contract g164 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g121 (recursive-contract g165 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g131 (recursive-contract g166 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g132 (recursive-contract g167 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g133 (recursive-contract g168 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g122 (recursive-contract g169 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g123 (recursive-contract g170 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g124 (recursive-contract g171 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g135 (listof g118))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g136 (cons/c g121 g135))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g137 (cons/c (quote line) g136))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g138 (and/c flonum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g139 (and/c flonum? positive?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g140 (λ (x) (eqv? x -0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g141 (λ (x) (eqv? x 0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g142 (and/c flonum? (lambda (x) (eqv? x +nan.0))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g143 (and/c exact-integer? negative? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g144 (and/c exact-integer? positive? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g145 (and/c fixnum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g146 (and/c fixnum? positive? (not/c index?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g147 (and/c index? positive? (not/c byte?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g148 (λ (n) (and (byte? n) (> n 1))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g149 (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g150 (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g151 (or/c string? symbol? (quote #t) (quote #f) g138 g139 g140 g141 g142 g143 g144 g145 g146 g147 g148 g149 g150 g118 g121 g130))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g152 (or/c string? symbol? (quote #t) (quote #f) g138 g139 g140 g141 g142 g143 g144 g145 g146 g147 g148 g149 g150 g117 g120 g129))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g153 (or/c string? symbol? (quote #t) (quote #f) g138 g139 g140 g141 g142 g143 g144 g145 g146 g147 g148 g149 g150 g116 g119 g128))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g154 (listof g133))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g155 (listof g132))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g156 (listof g131))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g157 (cons/c g121 g130))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g158 (cons/c symbol? g157))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g159 (cons/c g120 g129))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g160 (cons/c symbol? g159))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g161 (cons/c g119 g128))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g162 (cons/c symbol? g161))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g163 (listof g124))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g164 (listof g123))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g165 (listof g122))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g166 (or/c string? g118))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g167 (or/c string? g117))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g168 (or/c string? g116))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g169 (cons/c symbol? g127))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g170 (cons/c symbol? g126))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g171 (cons/c symbol? g125))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g137))>)
type->contract:
 (-> Quad QuadAttrs)
 #<->/sc #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g121))>)
type->contract:
 (-> Quad Symbol)
 #<->/sc #<name/sc> #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g174 (simple-result-> symbol? 1))>) #<syntax g174>)
type->contract:
 (->* ((U Quad QuadAttrs) Symbol) (QuadAttrValue) QuadAttrValue)
 #<->/sc #<or/sc #<name/sc> #<name/sc>> #<flat/sc symbol?> #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) (any/c) (values g127))>)
type->contract:
 (-> Quad String)
 #<->/sc #<name/sc> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g177 (simple-result-> string? 1))>) #<syntax g177>)
type->contract:
 (-> (U HashableList QuadAttrs) QuadListItem * Optical-KernQuad)
 #<->/sc #<or/sc #<rec/sc ((g76575178 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g76575178>>>) (g76575179 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76575179>>>) (g76575180 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76575180>>>)) g76575179> #<name/sc>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote optical-kern)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g183 (letrec ((g76575179 (recursive-contract g76575179182 #:chaperone)) (g76575179182 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g76575179))))) g76575179))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g184 (or/c g183 g120))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g185 (cons/c (quote optical-kern) g157))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g184) () #:rest any/c (values g185))>)
type->contract:
 (-> (U HashableList QuadAttrs) QuadListItem * Word-BreakQuad)
 #<->/sc #<or/sc #<rec/sc ((g76594186 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g76594186>>>) (g76594187 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76594187>>>) (g76594188 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76594188>>>)) g76594187> #<name/sc>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote word-break)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g191 (letrec ((g76594187 (recursive-contract g76594187190 #:chaperone)) (g76594187190 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g76594187))))) g76594187))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g192 (or/c g191 g120))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g193 (cons/c (quote word-break) g157))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g192) () #:rest any/c (values g193))>)
type->contract:
 (-> (U HashableList QuadAttrs) Quad * PieceQuad)
 #<->/sc #<or/sc #<rec/sc ((g76613194 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g76613194>>>) (g76613195 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76613195>>>) (g76613196 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76613196>>>)) g76613195> #<name/sc>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote piece)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g199 (letrec ((g76613195 (recursive-contract g76613195198 #:chaperone)) (g76613195198 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g76613195))))) g76613195))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g200 (or/c g199 g120))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g201 (cons/c (quote piece) g136))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g200) () #:rest any/c (values g201))>)
type->contract:
 (-> (U HashableList QuadAttrs) Quad * LineQuad)
 #<->/sc #<or/sc #<rec/sc ((g76632202 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g76632202>>>) (g76632203 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76632203>>>) (g76632204 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76632204>>>)) g76632203> #<name/sc>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote line)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g207 (letrec ((g76632203 (recursive-contract g76632203206 #:chaperone)) (g76632203206 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g76632203))))) g76632203))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g208 (or/c g207 g120))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g208) () #:rest any/c (values g137))>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g210 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g211 (->* (any-wrap/c) () (values g210)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g212 (or/c struct-predicate-procedure?/c struct-type-property-predicate-procedure? g211))>) #<syntax g212>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 (() #<syntax g212>)
type->contract:
 (-> Quad String)
 #<->/sc #<name/sc> #<flat/sc string?>>
 (() #<syntax g177>)
type->contract:
 (-> GroupQuad GroupQuadList)
 #<->/sc #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>> #<listof/sc #<name/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g135))>)
type->contract:
 (-> Quad QuadList)
 #<->/sc #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g130))>)
type->contract:
 (-> (U HashableList QuadAttrs) QuadListItem * SpacerQuad)
 #<->/sc #<or/sc #<rec/sc ((g76651217 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g76651217>>>) (g76651218 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76651218>>>) (g76651219 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76651219>>>)) g76651218> #<name/sc>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote spacer)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g222 (letrec ((g76651218 (recursive-contract g76651218221 #:chaperone)) (g76651218221 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g76651218))))) g76651218))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g223 (or/c g222 g120))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g224 (cons/c (quote spacer) g157))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g223) () #:rest any/c (values g224))>)
type->contract:
 (-> Quad Symbol Boolean)
 #<->/sc #<name/sc> #<flat/sc symbol?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g210))>)
type->contract:
 Boolean
 #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>
 (() #<syntax g210>)
type->contract:
 Index
 #<or/sc #<flat/sc t:index?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1578:37 t:index?>)
type->contract:
 Index
 #<or/sc #<flat/sc t:index?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1578:37 t:index?>)
type->contract:
 Index
 #<or/sc #<flat/sc t:index?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1578:37 t:index?>)
type->contract:
 Value-Type
 #<or/sc #<flat/sc flonum?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1596:38 flonum?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Value-Type)
 #<parameter/sc #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc flonum?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g234 (parameter/c any/c flonum?))>) #<syntax g234>)
type->contract:
 (Listof String)
 #<listof/sc #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g236 (listof string?))>) #<syntax g236>)
type->contract:
 Boolean
 #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>
 (() #<syntax g210>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof JoinableType)
 #<parameter/sc #<or/sc #<name/sc> #<name/sc> #<rec/sc ((g76670239 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g76670239>>>) (g76670240 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76670240>>>) (g76670241 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76670241>>>)) g76670239>> #<or/sc #<name/sc> #<name/sc> #<rec/sc ((g76671242 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g76671242>>>) (g76671243 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76671243>>>) (g76671244 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76671244>>>)) g76671242>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g247 (letrec ((g76671242 (recursive-contract g76671242246 #:flat)) (g76671242246 (or/c (quote ()) (cons/c symbol? (cons/c any/c g76671242))))) g76671242))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g248 (or/c g118 g121 g247))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g249 (parameter/c any/c g248))>) #<syntax g249>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Listof String)
 #<listof/sc #<flat/sc string?>>
 (() #<syntax g236>)
type->contract:
 String
 #<flat/sc string?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:110:20 string?>)
type->contract:
 (Listof String)
 #<listof/sc #<flat/sc string?>>
 (() #<syntax g236>)
type->contract:
 Char
 #<flat/sc char?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:108:16 char?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Index
 #<or/sc #<flat/sc t:index?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1578:37 t:index?>)
type->contract:
 (Parameterof QuadAttrValue)
 #<parameter/sc #<name/sc> #<name/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g259 (parameter/c any/c g127))>) #<syntax g259>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Positive-Flonum)
 #<parameter/sc #<or/sc #<flat/sc (and/c flonum? positive?)> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))>> #<or/sc #<flat/sc (and/c flonum? positive?)> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g263 (or/c g139 g142))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g264 (parameter/c any/c g263))>) #<syntax g264>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof String)
 #<parameter/sc #<flat/sc string?> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g267 (parameter/c any/c string?))>) #<syntax g267>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Font-Weight)
 #<parameter/sc #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote bold)> #<flat/sc (quote light)>> #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote bold)> #<flat/sc (quote light)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g270 (or/c (quote normal) (quote bold) (quote light)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g271 (parameter/c any/c g270))>) #<syntax g271>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Font-Style)
 #<parameter/sc #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote italic)> #<flat/sc (quote slant)>> #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote italic)> #<flat/sc (quote slant)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g274 (or/c (quote normal) (quote italic) (quote slant)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g275 (parameter/c any/c g274))>) #<syntax g275>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Symbol)
 #<parameter/sc #<flat/sc symbol?> #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g281 (parameter/c any/c symbol?))>) #<syntax g281>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (-> QuadAttrs HashableList QuadAttrs)
 #<->/sc #<name/sc> #<rec/sc ((g76672285 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g76672285>>>) (g76672286 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76672286>>>) (g76672287 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76672287>>>)) g76672286> #<name/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g290 (letrec ((g76672286 (recursive-contract g76672286289 #:chaperone)) (g76672286289 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g76672286))))) g76672286))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g290) () (values g121))>)
type->contract:
 (-> GroupQuadList GroupQuadList)
 #<->/sc #<listof/sc #<name/sc>> #<listof/sc #<name/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g135))>)
type->contract:
 (-> QuadAttrs Symbol * QuadAttrs)
 #<->/sc #<name/sc> #<listof/sc #<flat/sc symbol?>> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () #:rest any/c (values g121))>)
type->contract:
 (All (A) (-> (Listof A) (values (Listof A) A)))
 #<parametric->/sc #<->/sc #<listof/sc A293> #<listof/sc A293> A293>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A293) (->* ((listof A293)) () (values (listof A293) A293)))>)
type->contract:
 (-> (Rec g66832 (U (Listof g66832) Quad)) GroupQuadList)
 #<->/sc #<rec/sc ((g76674295 #<or/sc #<name/sc> #<listof/sc g76674295>>) (g76674296 #<or/sc #<name/sc> #<listof/sc g76674296>>) (g76674297 #<or/sc #<name/sc> #<listof/sc g76674297>>)) g76674296> #<listof/sc #<name/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g135))>)
type->contract:
 (-> JoinableType * QuadAttrs)
 #<->/sc #<listof/sc #<or/sc #<name/sc> #<name/sc> #<rec/sc ((g76781299 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g76781299>>>) (g76781300 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76781300>>>) (g76781301 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g76781301>>>)) g76781300>>> #<name/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g304 (letrec ((g76781300 (recursive-contract g76781300303 #:chaperone)) (g76781300303 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g76781300))))) g76781300))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g305 (or/c g117 g120 g304))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g306 (listof g305))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () #:rest g306 (values g121))>)
type->contract:
 (-> GroupQuad Symbol * GroupQuad)
 #<->/sc #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>> #<listof/sc #<flat/sc symbol?>> #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g308 (cons/c symbol? g136))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () #:rest any/c (values g308))>)
type->contract:
 (-> Quad Symbol * Quad)
 #<->/sc #<name/sc> #<listof/sc #<flat/sc symbol?>> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () #:rest any/c (values g118))>)
type->contract:
 (-> Quad Symbol QuadAttrValue Quad)
 #<->/sc #<name/sc> #<flat/sc symbol?> #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c) () (values g118))>)
type->contract:
 (-> GroupQuad Symbol QuadAttrValue GroupQuad)
 #<->/sc #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>> #<flat/sc symbol?> #<name/sc> #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c) () (values g308))>)
type->contract:
 (->* (Matrix-Proc-Type Entry->Value-Type) (Any) $ocm)
 #<->/sc #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<->/sc #<any/sc> #<or/sc #<flat/sc flonum?>>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g313 (->* (exact-nonnegative-integer? exact-nonnegative-integer?) () (values any-wrap/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g314 (->* (any/c) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g315 (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g313 g314) (any-wrap/c) (values g315))>)
type->contract:
 (-> $ocm Nonnegative-Integer (U Breakpoint Symbol))
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc symbol?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g317 (or/c exact-nonnegative-integer? symbol?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g317))>)
type->contract:
 (-> $ocm Nonnegative-Integer Any)
 #<->/sc #<flat/sc (flat-named-contract (quote $ocm?) (lambda (x) ($ocm? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<any/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g319 (simple-result-> any/c 2))>) #<syntax g319>)
type->contract:
 (-> GroupQuadList (Listof Integer) (Listof (Listof (U False Quad))))
 #<->/sc #<listof/sc #<name/sc>> #<listof/sc #<or/sc #<flat/sc exact-integer?>>> #<listof/sc #<listof/sc #<or/sc #<flat/sc (quote #f)> #<name/sc>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g321 (or/c (quote #f) g118))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g322 (listof g321))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g323 (listof g322))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/quad-main.rkt" (require/typed/check "world.rkt" (world:line-looseness-key Symbol) (world:allow-hyphenated-last-word-in-paragraph Boolean) (world:line-looseness-tolerance Float) (world:line-index-key Symbol) (world:measure-key QuadAttrKey) (world:use-hyphenation? Boolean) (world:max-quality Index) (world:total-lines-key Symbol) (world:draft-quality Index) (world:quality-key QuadAttrKey) (world:quality-key-default (Parameterof Index)) (world:paper-width-default (Parameterof Float)) (world:column-count-key QuadAttrKey) (world:column-count-key-default (Parameterof Index)) (world:column-gutter-key QuadAttrKey) (world:column-gutter-key-default (Parameterof Float)) (world:column-index-key QuadAttrKey) (world:min-first-lines Index) (world:min-last-lines Index) (world:minimum-lines-per-column Index) (world:default-lines-per-column Index)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/quad-main.rkt" (require/typed/check "measure.rkt" (round-float (-> Float Float)) (load-text-cache-file (-> Void)) (update-text-cache-file (-> Void))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/quad-main.rkt" (require/typed/check "utils.rkt" (merge-attrs (JoinableType * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (join-quads ((Listof Quad) -> (Listof Quad))) (hyphenate-quad (QuadListItem -> QuadListItem)) (quad-map ((QuadListItem -> QuadListItem) Quad -> Quad)) (group-quad-attr-set* (GroupQuad HashableList -> GroupQuad)) (quad-attr-set* (Quad HashableList -> Quad)) (attr-change (-> QuadAttrs HashableList QuadAttrs)) (compute-line-height (-> Quad Quad)) (add-vert-positions (-> GroupQuad GroupQuad)) (split-quad (-> Quad (Listof Quad)))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/quad-main.rkt" (require/typed/check "sugar-list.rkt" (slice-at (All (A) (case-> ((Listof A) Positive-Integer -> (Listof (Listof A))) ((Listof A) Positive-Integer Boolean -> (Listof (Listof A))))))))
 (->* (any/c any/c) () (values g323))>)
type->contract:
 (All (A) (-> (Listof A) (-> A Boolean) (Listof (Listof A))))
 #<parametric->/sc #<->/sc #<listof/sc A324> #<->/sc A324 #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<listof/sc #<listof/sc A324>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A324) (->* ((listof A324) (->* (A324) () any)) () (values (listof (listof A324)))))>)
type->contract:
 (All (A) (-> (Listof A) (U (Listof Nonnegative-Integer) Breakpoint) (Listof (Listof A))))
 #<parametric->/sc #<->/sc #<listof/sc A326> #<or/sc #<flat/sc (and/c exact-integer? positive? (not/c fixnum?))> #<flat/sc (and/c fixnum? positive? (not/c index?))> #<flat/sc (and/c index? positive? (not/c byte?))> #<flat/sc (λ (n) (and (byte? n) (> n 1)))> #<flat/sc (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1))))> #<flat/sc (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0))))> #<listof/sc #<or/sc #<flat/sc exact-nonnegative-integer?>>>> #<listof/sc #<listof/sc A326>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A326) (->* ((listof A326) any/c) () (values (listof (listof A326)))))>)
type->contract:
 (-> GroupQuadList DocQuad)
 #<->/sc #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote doc)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g105 (recursive-contract g130 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g106 (recursive-contract g131 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g107 (recursive-contract g132 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g96 (recursive-contract g133 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g97 (recursive-contract g135 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g98 (recursive-contract g137 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g102 (recursive-contract g138 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g103 (recursive-contract g139 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g104 (recursive-contract g140 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g99 (recursive-contract g141 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g100 (recursive-contract g142 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g101 (recursive-contract g143 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g111 (recursive-contract g144 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g112 (recursive-contract g145 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g113 (recursive-contract g146 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g108 (recursive-contract g147 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g109 (recursive-contract g148 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g110 (recursive-contract g149 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g115 (cons/c g101 g110))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g116 (cons/c (quote doc) g115))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g117 (and/c flonum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g118 (and/c flonum? positive?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g119 (λ (x) (eqv? x -0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g120 (λ (x) (eqv? x 0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g121 (and/c flonum? (lambda (x) (eqv? x +nan.0))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g122 (and/c exact-integer? negative? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g123 (and/c exact-integer? positive? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g124 (and/c fixnum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g125 (and/c fixnum? positive? (not/c index?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g126 (and/c index? positive? (not/c byte?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g127 (λ (n) (and (byte? n) (> n 1))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g128 (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g129 (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g130 (or/c string? symbol? (quote #t) (quote #f) g117 g118 g119 g120 g121 g122 g123 g124 g125 g126 g127 g128 g129 g98 g101 g110))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g131 (or/c string? symbol? (quote #t) (quote #f) g117 g118 g119 g120 g121 g122 g123 g124 g125 g126 g127 g128 g129 g97 g100 g109))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g132 (or/c string? symbol? (quote #t) (quote #f) g117 g118 g119 g120 g121 g122 g123 g124 g125 g126 g127 g128 g129 g96 g99 g108))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g133 (cons/c symbol? g115))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g134 (cons/c g100 g109))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g135 (cons/c symbol? g134))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g136 (cons/c g99 g108))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g137 (cons/c symbol? g136))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g138 (cons/c symbol? g107))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g139 (cons/c symbol? g106))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g140 (cons/c symbol? g105))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g141 (listof g104))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g142 (listof g103))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g143 (listof g102))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g144 (or/c string? g98))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g145 (or/c string? g97))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g146 (or/c string? g96))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g147 (listof g113))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g148 (listof g112))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g149 (listof g111))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g116))>)
type->contract:
 (-> GroupQuadList PageQuad)
 #<->/sc #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote page)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g151 (listof g98))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g152 (cons/c g101 g151))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g153 (cons/c (quote page) g152))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g153))>)
type->contract:
 (-> GroupQuadList BlockQuad)
 #<->/sc #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote block)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g155 (cons/c (quote block) g115))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g155))>)
type->contract:
 (-> Quad QuadAttrs)
 #<->/sc #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g101))>)
type->contract:
 (-> (U HashableList QuadAttrs) Quad * LineQuad)
 #<->/sc #<or/sc #<name/sc> #<rec/sc ((g87100157 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g87100157>>>) (g87100158 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87100158>>>) (g87100159 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87100159>>>)) g87100158>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote line)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g162 (letrec ((g87100158 (recursive-contract g87100158161 #:chaperone)) (g87100158161 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g87100158))))) g87100158))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g163 (or/c g100 g162))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g164 (cons/c (quote line) g152))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g163) () #:rest any/c (values g164))>)
type->contract:
 (-> Quad QuadListItem)
 #<->/sc #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g113))>)
type->contract:
 (-> Quad Symbol)
 #<->/sc #<name/sc> #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g167 (simple-result-> symbol? 1))>) #<syntax g167>)
type->contract:
 (->* ((U Quad QuadAttrs) Symbol) (QuadAttrValue) QuadAttrValue)
 #<->/sc #<or/sc #<name/sc> #<name/sc>> #<flat/sc symbol?> #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) (any/c) (values g107))>)
type->contract:
 (-> GroupQuad GroupQuadList)
 #<->/sc #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>> #<listof/sc #<name/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g151))>)
type->contract:
 (-> Quad QuadList)
 #<->/sc #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g110))>)
type->contract:
 (-> Quad Symbol Boolean)
 #<->/sc #<name/sc> #<flat/sc symbol?> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g172 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g172))>)
type->contract:
 (-> GroupQuadList ColumnQuad)
 #<->/sc #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote column)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g174 (cons/c (quote column) g152))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g174))>)
type->contract:
 (-> (U HashableList QuadAttrs) Quad * PageQuad)
 #<->/sc #<or/sc #<name/sc> #<rec/sc ((g87137175 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g87137175>>>) (g87137176 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87137176>>>) (g87137177 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87137177>>>)) g87137176>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote page)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g180 (letrec ((g87137176 (recursive-contract g87137176179 #:chaperone)) (g87137176179 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g87137176))))) g87137176))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g181 (or/c g100 g180))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g181) () #:rest any/c (values g153))>)
type->contract:
 (-> (U HashableList QuadAttrs) Quad * ColumnQuad)
 #<->/sc #<or/sc #<name/sc> #<rec/sc ((g87156182 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g87156182>>>) (g87156183 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87156183>>>) (g87156184 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87156184>>>)) g87156183>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote column)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g187 (letrec ((g87156183 (recursive-contract g87156183186 #:chaperone)) (g87156183186 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g87156183))))) g87156183))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g188 (or/c g100 g187))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g188) () #:rest any/c (values g174))>)
type->contract:
 (->* (LineQuad) ((U False Symbol)) LineQuad)
 #<->/sc #<cons/sc #<flat/sc (quote line)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>> #<or/sc #<flat/sc symbol?> #<flat/sc (quote #f)>> #<cons/sc #<flat/sc (quote line)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (any/c) (values g164))>)
type->contract:
 Wrap-Proc-Type
 #<->/sc #<listof/sc #<name/sc>> #<or/sc #<flat/sc flonum?>> #<listof/sc #<cons/sc #<flat/sc (quote line)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g191 (listof g164))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (any/c) (values g191))>)
type->contract:
 Wrap-Proc-Type
 #<->/sc #<listof/sc #<name/sc>> #<or/sc #<flat/sc flonum?>> #<listof/sc #<cons/sc #<flat/sc (quote line)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (any/c) (values g191))>)
type->contract:
 Wrap-Proc-Type
 #<->/sc #<listof/sc #<name/sc>> #<or/sc #<flat/sc flonum?>> #<listof/sc #<cons/sc #<flat/sc (quote line)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (any/c) (values g191))>)
type->contract:
 (->* (LineQuad) ((U False Float)) LineQuad)
 #<->/sc #<cons/sc #<flat/sc (quote line)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>> #<or/sc #<flat/sc flonum?> #<flat/sc (quote #f)>> #<cons/sc #<flat/sc (quote line)> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) (any/c) (values g164))>)
type->contract:
 (-> GroupQuad GroupQuad)
 #<->/sc #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>> #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g196 (cons/c symbol? g152))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g196))>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Boolean
 #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>
 (() #<syntax g172>)
type->contract:
 Value-Type
 #<or/sc #<flat/sc flonum?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1596:38 flonum?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Boolean
 #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>
 (() #<syntax g172>)
type->contract:
 Index
 #<or/sc #<flat/sc t:index?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1578:37 t:index?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Index
 #<or/sc #<flat/sc t:index?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1578:37 t:index?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Index)
 #<parameter/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g208 (parameter/c any/c t:index?))>) #<syntax g208>)
type->contract:
 (Parameterof Value-Type)
 #<parameter/sc #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc flonum?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g210 (parameter/c any/c flonum?))>) #<syntax g210>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Index)
 #<parameter/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>>
 (() #<syntax g208>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Value-Type)
 #<parameter/sc #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc flonum?>>>
 (() #<syntax g210>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Index
 #<or/sc #<flat/sc t:index?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1578:37 t:index?>)
type->contract:
 Index
 #<or/sc #<flat/sc t:index?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1578:37 t:index?>)
type->contract:
 Index
 #<or/sc #<flat/sc t:index?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1578:37 t:index?>)
type->contract:
 Index
 #<or/sc #<flat/sc t:index?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1578:37 t:index?>)
type->contract:
 (-> Value-Type Value-Type)
 #<->/sc #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc flonum?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g221 (simple-result-> flonum? 1))>) #<syntax g221>)
type->contract:
 (-> Void)
 #<->/sc #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g223 (simple-result-> void? 0))>) #<syntax g223>)
type->contract:
 (-> Void)
 #<->/sc #<flat/sc void?>>
 (() #<syntax g223>)
type->contract:
 (-> JoinableType * QuadAttrs)
 #<->/sc #<listof/sc #<or/sc #<rec/sc ((g87211225 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g87211225>>>) (g87211226 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87211226>>>) (g87211227 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87211227>>>)) g87211226> #<name/sc> #<name/sc>>> #<name/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g230 (letrec ((g87211226 (recursive-contract g87211226229 #:chaperone)) (g87211226229 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g87211226))))) g87211226))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g231 (or/c g230 g100 g97))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g232 (listof g231))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () #:rest g232 (values g101))>)
type->contract:
 (All (A) (-> (Listof A) (values (Listof A) A)))
 #<parametric->/sc #<->/sc #<listof/sc A233> #<listof/sc A233> A233>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A233) (->* ((listof A233)) () (values (listof A233) A233)))>)
type->contract:
 (-> GroupQuadList GroupQuadList)
 #<->/sc #<listof/sc #<name/sc>> #<listof/sc #<name/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g151))>)
type->contract:
 (-> QuadListItem QuadListItem)
 #<->/sc #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g113))>)
type->contract:
 (-> (-> QuadListItem QuadListItem) Quad Quad)
 #<->/sc #<->/sc #<name/sc> #<name/sc>> #<name/sc> #<name/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g238 (->* (g113) () any))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g238 any/c) () (values g98))>)
type->contract:
 (-> GroupQuad HashableList GroupQuad)
 #<->/sc #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>> #<rec/sc ((g87213239 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g87213239>>>) (g87213240 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87213240>>>) (g87213241 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87213241>>>)) g87213240> #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g244 (letrec ((g87213240 (recursive-contract g87213240243 #:chaperone)) (g87213240243 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g87213240))))) g87213240))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g244) () (values g196))>)
type->contract:
 (-> Quad HashableList Quad)
 #<->/sc #<name/sc> #<rec/sc ((g87214245 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g87214245>>>) (g87214246 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87214246>>>) (g87214247 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87214247>>>)) g87214246> #<name/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g250 (letrec ((g87214246 (recursive-contract g87214246249 #:chaperone)) (g87214246249 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g87214246))))) g87214246))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g250) () (values g98))>)
type->contract:
 (-> QuadAttrs HashableList QuadAttrs)
 #<->/sc #<name/sc> #<rec/sc ((g87215251 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g87215251>>>) (g87215252 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87215252>>>) (g87215253 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g87215253>>>)) g87215252> #<name/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g256 (letrec ((g87215252 (recursive-contract g87215252255 #:chaperone)) (g87215252255 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g87215252))))) g87215252))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g256) () (values g101))>)
type->contract:
 (-> Quad Quad)
 #<->/sc #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g98))>)
type->contract:
 (-> GroupQuad GroupQuad)
 #<->/sc #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>> #<cons/sc #<flat/sc symbol?> #<cons/sc #<name/sc> #<listof/sc #<name/sc>>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g196))>)
type->contract:
 (-> Quad GroupQuadList)
 #<->/sc #<name/sc> #<listof/sc #<name/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g151))>)
type->contract:
 (All (A) (->* ((Listof A) Positive-Integer) (Boolean) (Listof (Listof A))))
 #<parametric->/sc #<->/sc #<listof/sc A260> #<or/sc #<flat/sc (and/c exact-integer? positive?)>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>> #<listof/sc #<listof/sc A260>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/parametric.rkt:49:11 (parametric->/c (A260) (->* ((listof A260) any/c) (any/c) (values (listof (listof A260)))))>)
type->contract:
 (Class (init (solver Any)) (field (_constraints Any) (_solver Any) (_variable-domains Any) (solver Any)) (add-constraint (-> (-> Index Boolean) (Listof Any) Void)) (add-variable (-> Any (Listof Any) Void)) (add-variables (-> (Listof Any) Any Void)) (custom-display (-> Output-Port Void)) (custom-print (-> Output-Port Integer Void)) (custom-write (-> Output-Port Void)) (get-solution (-> HashTableTop)) (get-solution-iter (-> HashTableTop)) (get-solutions (-> (Listof (HashTable String Integer)))) (get-solver (-> Any)) (reset (-> Void)) (set-solver (-> Any Void)))
 #<class/sc #<->/sc #<any/sc> #<->/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<listof/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<flat/sc void?>> #<->/sc #<any/sc> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<listof/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<flat/sc void?>> #<->/sc #<any/sc> #<listof/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc void?>> #<->/sc #<any/sc> #<flat/sc output-port?> #<flat/sc void?>> #<->/sc #<any/sc> #<flat/sc output-port?> #<or/sc #<flat/sc exact-integer?>> #<flat/sc void?>> #<->/sc #<any/sc> #<flat/sc output-port?> #<flat/sc void?>> #<->/sc #<any/sc> #<flat/sc hash?>> #<->/sc #<any/sc> #<flat/sc hash?>> #<->/sc #<any/sc> #<listof/sc #<hash/sc #<flat/sc string?> #<or/sc #<flat/sc exact-integer?>>>>> #<->/sc #<any/sc> #<any/sc>> #<->/sc #<any/sc> #<flat/sc void?>> #<->/sc #<any/sc> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc void?>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g263 (->* (t:index?) () (values g172)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g264 (listof any-wrap/c))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g265 (->* (any/c g263 g264) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g266 (->* (any/c any-wrap/c g264) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g267 (->* (any/c g264 any-wrap/c) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g268 (simple-result-> void? 2))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g269 (simple-result-> void? 3))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g270 (simple-result-> hash? 1))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g271 (typed-racket-hash/c string? exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/main.rkt" (require/typed/check "quick-sample.rkt" (quick-sample (-> Quad))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/quick-sample.rkt" (require/typed/check "quads.rkt" (page-break (-> Page-BreakQuad)) (column-break (-> Column-BreakQuad)) (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (block (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BlockQuad)) (block-break (->* ((U HashableList QuadAttrs)) () #:rest QuadListItem Block-BreakQuad))))
 (define g272 (listof g271))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g273 (->* (any/c) () (values g272)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g274 (simple-result-> any/c 1))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g275 (simple-result-> void? 1))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g276 (->* (any/c any-wrap/c) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g289 (let ((g265277 g265) (g266278 g266) (g267279 g267) (g268280 g268) (g269281 g269) (g268282 g268) (g270283 g270) (g270284 g270) (g273285 g273) (g274286 g274) (g275287 g275) (g276288 g276)) (class/c #:opaque #:ignore-local-member-names (init (...>) #<syntax g289>)
type->contract:
 (-> Page-BreakQuad)
 #<->/sc #<cons/sc #<flat/sc (quote page-break)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g25 (recursive-contract g34 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g26 (recursive-contract g35 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g27 (recursive-contract g36 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g22 (recursive-contract g37 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g23 (recursive-contract g39 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g24 (recursive-contract g41 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g19 (recursive-contract g55 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g20 (recursive-contract g56 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g21 (recursive-contract g57 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g28 (recursive-contract g58 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g29 (recursive-contract g59 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g30 (recursive-contract g60 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g13 (recursive-contract g61 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g14 (recursive-contract g62 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g15 (recursive-contract g63 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g16 (recursive-contract g64 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g17 (recursive-contract g65 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g18 (recursive-contract g66 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g32 (cons/c g15 g27))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g33 (cons/c (quote page-break) g32))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g34 (listof g30))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g35 (listof g29))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g36 (listof g28))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g37 (cons/c symbol? g32))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g38 (cons/c g14 g26))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (cons/c symbol? g38))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g40 (cons/c g13 g25))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g41 (cons/c symbol? g40))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g42 (and/c flonum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g43 (and/c flonum? positive?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g44 (λ (x) (eqv? x -0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g45 (λ (x) (eqv? x 0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g46 (and/c flonum? (lambda (x) (eqv? x +nan.0))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g47 (and/c exact-integer? negative? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g48 (and/c exact-integer? positive? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g49 (and/c fixnum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g50 (and/c fixnum? positive? (not/c index?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g51 (and/c index? positive? (not/c byte?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g52 (λ (n) (and (byte? n) (> n 1))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g53 (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g54 (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g55 (or/c string? symbol? (quote #t) (quote #f) g42 g43 g44 g45 g46 g47 g48 g49 g50 g51 g52 g53 g54 g24 g15 g27))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g56 (or/c string? symbol? (quote #t) (quote #f) g42 g43 g44 g45 g46 g47 g48 g49 g50 g51 g52 g53 g54 g23 g14 g26))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g57 (or/c string? symbol? (quote #t) (quote #f) g42 g43 g44 g45 g46 g47 g48 g49 g50 g51 g52 g53 g54 g22 g13 g25))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g58 (or/c string? g24))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g59 (or/c string? g23))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g60 (or/c string? g22))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g61 (listof g18))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g62 (listof g17))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g63 (listof g16))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g64 (cons/c symbol? g21))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g65 (cons/c symbol? g20))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g66 (cons/c symbol? g19))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () (values g33))>)
type->contract:
 (-> Column-BreakQuad)
 #<->/sc #<cons/sc #<flat/sc (quote column-break)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g68 (cons/c (quote column-break) g32))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () (values g68))>)
type->contract:
 (-> (U HashableList QuadAttrs) QuadListItem * WordQuad)
 #<->/sc #<or/sc #<name/sc> #<rec/sc ((g9076869 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g9076869>>>) (g9076870 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g9076870>>>) (g9076871 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g9076871>>>)) g9076870>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote word)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g74 (letrec ((g9076870 (recursive-contract g907687073 #:chaperone)) (g907687073 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g9076870))))) g9076870))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g75 (or/c g14 g74))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g76 (cons/c (quote word) g32))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g75) () #:rest any/c (values g76))>)
type->contract:
 (-> (U HashableList QuadAttrs) QuadListItem * BoxQuad)
 #<->/sc #<or/sc #<name/sc> #<rec/sc ((g9076977 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g9076977>>>) (g9076978 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g9076978>>>) (g9076979 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g9076979>>>)) g9076978>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote box)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g82 (letrec ((g9076978 (recursive-contract g907697881 #:chaperone)) (g907697881 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g9076978))))) g9076978))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g83 (or/c g14 g82))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g84 (cons/c (quote box) g32))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g83) () #:rest any/c (values g84))>)
type->contract:
 (-> (U HashableList QuadAttrs) QuadListItem * BlockQuad)
 #<->/sc #<or/sc #<name/sc> #<rec/sc ((g9077085 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g9077085>>>) (g9077086 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g9077086>>>) (g9077087 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g9077087>>>)) g9077086>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote block)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g90 (letrec ((g9077086 (recursive-contract g907708689 #:chaperone)) (g907708689 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g9077086))))) g9077086))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g91 (or/c g14 g90))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g92 (cons/c (quote block) g32))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g91) () #:rest any/c (values g92))>)
type->contract:
 (-> (U HashableList QuadAttrs) QuadListItem * Block-BreakQuad)
 #<->/sc #<or/sc #<name/sc> #<rec/sc ((g9077193 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g9077193>>>) (g9077194 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g9077194>>>) (g9077195 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g9077195>>>)) g9077194>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote block-break)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g98 (letrec ((g9077194 (recursive-contract g907719497 #:chaperone)) (g907719497 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g9077194))))) g9077194))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g99 (or/c g14 g98))> #<syntaxrequire-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/main.rkt" (require/typed/check "render.rkt" (pdf-renderer% (Class (render-to-file (Quad Path-String -> Void)) (render-element (Quad -> Any)) (render-page ((Listof Quad) -> Void)) (render-word (Quad -> Any)) (render (-> Quad Any)) (finalize (-> Any Any)) (setup (-> Quad Quad))))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/render.rkt" (require/typed/check "world.rkt" (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Flonum)) (world:font-color-key QuadAttrKey) (world:font-color-default (Parameterof String)) (world:font-background-key QuadAttrKey) (world:font-background-default (Parameterof String)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:paper-height-default (Parameterof Float)) (world:paper-width-default (Parameterof Float)) (world:x-position-key Symbol) (world:y-position-key Symbol) (world:ascent-key Symbol) (world:quality-default (Parameterof Index)) (world:draft-quality Index) (world:page-key Symbol)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/render.rkt" (require/typed/check "utils.rkt" (flatten-quad (Quad -> (Listof Quad)))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/quadT/cfg/render.rkt" (require/typed/check "quads.rkt" (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-car (-> Quad QuadListItem)) (whitespace/nbsp? (-> Any Boolean)) (quad-name (-> Quad QuadName))))
:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g100 (cons/c (quote block-break) g32))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g99) () #:rest any/c (values g100))>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Positive-Flonum)
 #<parameter/sc #<or/sc #<flat/sc (and/c flonum? positive?)> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))>> #<or/sc #<flat/sc (and/c flonum? positive?)> #<flat/sc (and/c flonum? (lambda (x) (eqv? x +nan.0)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g235 (and/c flonum? positive?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g236 (and/c flonum? (lambda (x) (eqv? x +nan.0))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g237 (or/c g235 g236))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g238 (parameter/c any/c g237))>) #<syntax g238>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof String)
 #<parameter/sc #<flat/sc string?> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g241 (parameter/c any/c string?))>) #<syntax g241>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof String)
 #<parameter/sc #<flat/sc string?> #<flat/sc string?>>
 (() #<syntax g241>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof String)
 #<parameter/sc #<flat/sc string?> #<flat/sc string?>>
 (() #<syntax g241>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Font-Weight)
 #<parameter/sc #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote bold)> #<flat/sc (quote light)>> #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote bold)> #<flat/sc (quote light)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g248 (or/c (quote normal) (quote bold) (quote light)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g249 (parameter/c any/c g248))>) #<syntax g249>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Font-Style)
 #<parameter/sc #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote italic)> #<flat/sc (quote slant)>> #<or/sc #<flat/sc (quote normal)> #<flat/sc (quote italic)> #<flat/sc (quote slant)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g252 (or/c (quote normal) (quote italic) (quote slant)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g253 (parameter/c any/c g252))>) #<syntax g253>)
type->contract:
 (Parameterof Flonum)
 #<parameter/sc #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc flonum?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g255 (parameter/c any/c flonum?))>) #<syntax g255>)
type->contract:
 (Parameterof Flonum)
 #<parameter/sc #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc flonum?>>>
 (() #<syntax g255>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (Parameterof Index)
 #<parameter/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g261 (parameter/c any/c t:index?))>) #<syntax g261>)
type->contract:
 Index
 #<or/sc #<flat/sc t:index?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1578:37 t:index?>)
type->contract:
 Symbol
 #<flat/sc symbol?>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/rep/base-types.rkt:109:20 symbol?>)
type->contract:
 (-> Quad GroupQuadList)
 #<->/sc #<name/sc> #<listof/sc #<name/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g267 (recursive-contract g284 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g268 (recursive-contract g285 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g269 (recursive-contract g286 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g264 (recursive-contract g288 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g265 (recursive-contract g290 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g266 (recursive-contract g292 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g279 (recursive-contract g293 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g280 (recursive-contract g294 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g281 (recursive-contract g295 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g276 (recursive-contract g296 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g277 (recursive-contract g297 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g278 (recursive-contract g298 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g270 (recursive-contract g299 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g271 (recursive-contract g300 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g272 (recursive-contract g301 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g273 (recursive-contract g313 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g274 (recursive-contract g314 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g275 (recursive-contract g315 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g283 (listof g266))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g284 (listof g272))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g285 (listof g271))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g286 (listof g270))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g287 (cons/c g269 g278))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g288 (cons/c symbol? g287))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g289 (cons/c g268 g277))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g290 (cons/c symbol? g289))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g291 (cons/c g267 g276))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g292 (cons/c symbol? g291))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g293 (or/c string? g266))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g294 (or/c string? g265))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g295 (or/c string? g264))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g296 (listof g281))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g297 (listof g280))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g298 (listof g279))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g299 (cons/c symbol? g275))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g300 (cons/c symbol? g274))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g301 (cons/c symbol? g273))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g302 (and/c flonum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g303 (λ (x) (eqv? x -0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g304 (λ (x) (eqv? x 0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g305 (and/c exact-integer? negative? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g306 (and/c exact-integer? positive? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g307 (and/c fixnum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g308 (and/c fixnum? positive? (not/c index?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g309 (and/c index? positive? (not/c byte?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g310 (λ (n) (and (byte? n) (> n 1))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g311 (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g312 (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g313 (or/c string? symbol? (quote #t) (quote #f) g302 g235 g303 g304 g236 g305 g306 g307 g308 g309 g310 g311 g312 g266 g269 g278))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g314 (or/c string? symbol? (quote #t) (quote #f) g302 g235 g303 g304 g236 g305 g306 g307 g308 g309 g310 g311 g312 g265 g268 g277))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g315 (or/c string? symbol? (quote #t) (quote #f) g302 g235 g303 g304 g236 g305 g306 g307 g308 g309 g310 g311 g312 g264 g267 g276))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g283))>)
type->contract:
 (->* ((U Quad QuadAttrs) Symbol) (QuadAttrValue) QuadAttrValue)
 #<->/sc #<or/sc #<name/sc> #<name/sc>> #<flat/sc symbol?> #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) (any/c) (values g275))>)
type->contract:
 (-> (U HashableList QuadAttrs) QuadListItem * WordQuad)
 #<->/sc #<or/sc #<rec/sc ((g94924317 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<any/sc> g94924317>>>) (g94924318 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g94924318>>>) (g94924319 #<or/sc #<flat/sc (quote ())> #<cons/sc #<flat/sc symbol?> #<cons/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> g94924319>>>)) g94924318> #<name/sc>> #<listof/sc #<name/sc>> #<cons/sc #<flat/sc (quote word)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g322 (letrec ((g94924318 (recursive-contract g94924318321 #:chaperone)) (g94924318321 (or/c (quote ()) (cons/c any/c (cons/c any-wrap/c g94924318))))) g94924318))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g323 (or/c g322 g268))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g324 (cons/c (quote word) g287))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g323) () #:rest any/c (values g324))>)
type->contract:
 (-> Quad QuadListItem)
 #<->/sc #<name/sc> #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g281))>)
type->contract:
 (-> Any Boolean)
 #<or/sc #<flat/sc struct-predicate-procedure?/c> #<flat/sc struct-type-property-predicate-procedure?> #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g327 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g328 (->* (any-wrap/c) () (values g327)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g329 (or/c struct-predicate-procedure?/c struct-type-property-predicate-procedure? g328))>) #<syntax g329>)
type->contract:
 (-> Quad Symbol)
 #<->/sc #<name/sc> #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g331 (simple-result-> symbol? 1))>) #<syntax g331>)
type->contract:
 Boolean
 #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g16 (or/c (quote #t) (quote #f)))>) #<syntax g16>)
type->contract:
 (Parameterof Index)
 #<parameter/sc #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g18 (parameter/c any/c t:index?))>) #<syntax g18>)
type->contract:
 Index
 #<or/sc #<flat/sc t:index?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1578:37 t:index?>)
type->contract:
 (-> Quad DocQuad)
 #<->/sc #<name/sc> #<cons/sc #<flat/sc (quote doc)> #<cons/sc #<name/sc> #<name/sc>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g26 (recursive-contract g41 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g27 (recursive-contract g42 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g28 (recursive-contract g43 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g20 (recursive-contract g44 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g21 (recursive-contract g46 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g22 (recursive-contract g48 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g35 (recursive-contract g49 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g36 (recursive-contract g50 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g37 (recursive-contract g51 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g32 (recursive-contract g52 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g33 (recursive-contract g53 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g34 (recursive-contract g54 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g23 (recursive-contract g55 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g24 (recursive-contract g56 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g25 (recursive-contract g57 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g29 (recursive-contract g71 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g30 (recursive-contract g72 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g31 (recursive-contract g73 #:flat))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (cons/c g25 g34))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g40 (cons/c (quote doc) g39))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g41 (cons/c symbol? g31))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g42 (cons/c symbol? g30))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g43 (cons/c symbol? g29))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g44 (cons/c symbol? g39))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g45 (cons/c g24 g33))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g46 (cons/c symbol? g45))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g47 (cons/c g23 g32))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g48 (cons/c symbol? g47))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g49 (or/c string? g22))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g50 (or/c string? g21))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g51 (or/c string? g20))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g52 (listof g37))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g53 (listof g36))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g54 (listof g35))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g55 (listof g28))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g56 (listof g27))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g57 (listof g26))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g58 (and/c flonum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g59 (and/c flonum? positive?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g60 (λ (x) (eqv? x -0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g61 (λ (x) (eqv? x 0.0)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g62 (and/c flonum? (lambda (x) (eqv? x +nan.0))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g63 (and/c exact-integer? negative? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g64 (and/c exact-integer? positive? (not/c fixnum?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g65 (and/c fixnum? negative?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g66 (and/c fixnum? positive? (not/c index?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g67 (and/c index? positive? (not/c byte?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g68 (λ (n) (and (byte? n) (> n 1))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g69 (flat-named-contract (quote 1) (lambda (x) (equal? x (quote 1)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g70 (flat-named-contract (quote 0) (lambda (x) (equal? x (quote 0)))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g71 (or/c string? symbol? (quote #t) (quote #f) g58 g59 g60 g61 g62 g63 g64 g65 g66 g67 g68 g69 g70 g22 g25 g34))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g72 (or/c string? symbol? (quote #t) (quote #f) g58 g59 g60 g61 g62 g63 g64 g65 g66 g67 g68 g69 g70 g21 g24 g33))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g73 (or/c string? symbol? (quote #t) (quote #f) g58 g59 g60 g61 g62 g63 g64 g65 g66 g67 g68 g69 g70 g20 g23 g32))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g40))>)
type->contract:
 (-> Quad)
 #<->/sc #<name/sc>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () (values g22))>)
type->contract:
 (Class (finalize (-> Any Any)) (render (-> Quad Any)) (render-element (-> Quad Any)) (render-page (-> GroupQuadList Void)) (render-to-file (-> Quad Path-String Void)) (render-word (-> Quad Any)) (setup (-> Quad Quad)))
 #<class/sc #<->/sc #<any/sc> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<any/sc>> #<->/sc #<any/sc> #<name/sc> #<any/sc>> #<->/sc #<any/sc> #<name/sc> #<any/sc>> #<->/sc #<any/sc> #<listof/sc #<name/sc>> #<flat/sc void?>> #<->/sc #<any/sc> #<name/sc> #<or/sc #<flat/sc path?> #<flat/sc string?>> #<flat/sc void?>> #<->/sc #<any/sc> #<name/sc> #<any/sc>> #<->/sc #<any/sc> #<name/sc> #<name/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g76 (->* (any/c any-wrap/c) () (values any/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g77 (->* (any/c g21) () (values any/c)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g78 (listof g21))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g79 (->* (any/c g78) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g80 (or/c path? string?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g81 (->* (any/c g21 g80) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g82 (->* (any/c g21) () (values g22)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g90 (let ((g7683 g76) (g7784 g77) (g7785 g77) (g7986 g79) (g8187 g81) (g7788 g77) (g8289 g82)) (class/c #:opaque #:ignore-local-member-names (finalize g7683) (render g7784) (render-element g7785) (render-page g7986) (render-to-file g8187) (rende...>) #<syntax g90>)


sieve

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/sieve/cfg/main.rkt" (require/typed/check "streams.rkt" (#:struct stream ((first : Natural) (rest : (-> stream)))) (make-stream (-> Natural (-> stream) stream)) (stream-unfold (-> stream (values Natural stream))) (stream-get (-> stream Natural Natural)) (stream-take (-> stream Natural (Listof Natural)))))
type->contract:
 (-> Nonnegative-Integer (-> stream) stream)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<->/sc #<flat/sc (flat-named-contract (quote stream?) (lambda (x) (stream? x)))>> #<flat/sc (flat-named-contract (quote stream?) (lambda (x) (stream? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g15 (flat-named-contract (quote stream?) (lambda (x) (stream? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g16 (simple-result-> g15 2))>) #<syntax g16>)
type->contract:
 (-> stream Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote stream?) (lambda (x) (stream? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g18 (simple-result-> exact-nonnegative-integer? 1))>) #<syntax g18>)
type->contract:
 (-> stream (-> stream))
 #<->/sc #<flat/sc (flat-named-contract (quote stream?) (lambda (x) (stream? x)))> #<->/sc #<flat/sc (flat-named-contract (quote stream?) (lambda (x) (stream? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g20 (simple-result-> g15 0))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g20))>)
type->contract:
 (-> Nonnegative-Integer (-> stream) stream)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<->/sc #<flat/sc (flat-named-contract (quote stream?) (lambda (x) (stream? x)))>> #<flat/sc (flat-named-contract (quote stream?) (lambda (x) (stream? x)))>>
 (() #<syntax g16>)
type->contract:
 (-> stream (values Nonnegative-Integer stream))
 #<->/sc #<flat/sc (flat-named-contract (quote stream?) (lambda (x) (stream? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc (flat-named-contract (quote stream?) (lambda (x) (stream? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values exact-nonnegative-integer? g15))>)
type->contract:
 (-> stream Nonnegative-Integer Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote stream?) (lambda (x) (stream? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g24 (simple-result-> exact-nonnegative-integer? 2))>) #<syntax g24>)
type->contract:
 (-> stream Nonnegative-Integer (Listof Nonnegative-Integer))
 #<->/sc #<flat/sc (flat-named-contract (quote stream?) (lambda (x) (stream? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<listof/sc #<or/sc #<flat/sc exact-nonnegative-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g26 (listof exact-nonnegative-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g26))>)


snake

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/snake/cfg/data-adaptor.rkt" (require/typed/check "data.rkt" (#:struct posn ((x : Real) (y : Real))) (#:struct snake ((dir : Dir) (segs : (NEListof Posn)))) (#:struct world ((snake : Snake) (food : Posn)))))
type->contract:
 (-> Real Real posn)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g85 (flat-named-contract (quote posn?) (lambda (x) (posn? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g86 (simple-result-> g85 2))>) #<syntax g86>)
type->contract:
 (-> posn Real)
 #<->/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<or/sc #<flat/sc real?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g88 (simple-result-> real? 1))>) #<syntax g88>)
type->contract:
 (-> posn Real)
 #<->/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<or/sc #<flat/sc real?>>>
 (() #<syntax g88>)
type->contract:
 (-> Dir (Pairof posn (Listof posn)) snake)
 #<->/sc #<or/sc #<flat/sc (quote "up")> #<flat/sc (quote "down")> #<flat/sc (quote "left")> #<flat/sc (quote "right")>> #<cons/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))>>> #<flat/sc (flat-named-contract (quote snake?) (lambda (x) (snake? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g91 (flat-named-contract (quote snake?) (lambda (x) (snake? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g92 (simple-result-> g91 2))>) #<syntax g92>)
type->contract:
 (-> snake Dir)
 #<->/sc #<flat/sc (flat-named-contract (quote snake?) (lambda (x) (snake? x)))> #<or/sc #<flat/sc (quote "up")> #<flat/sc (quote "down")> #<flat/sc (quote "left")> #<flat/sc (quote "right")>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g94 (or/c (quote "up") (quote "down") (quote "left") (quote "right")))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g94))>)
type->contract:
 (-> snake (Pairof posn (Listof posn)))
 #<->/sc #<flat/sc (flat-named-contract (quote snake?) (lambda (x) (snake? x)))> #<cons/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g96 (listof g85))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g97 (cons/c g85 g96))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g97))>)
type->contract:
 (-> snake posn world)
 #<->/sc #<flat/sc (flat-named-contract (quote snake?) (lambda (x) (snake? x)))> #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g99 (flat-named-contract (quote world?) (lambda (x) (world? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g100 (simple-result-> g99 2))>) #<syntax g100>)
type->contract:
 (-> world snake)
 #<->/sc #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))> #<flat/sc (flat-named-contract (quote snake?) (lambda (x) (snake? x))require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/snake/cfg/main.rkt" (require/typed/check "const.rkt" (WORLD (-> World))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/snake/cfg/main.rkt" (require/typed/check "motion.rkt" (reset! (-> Void)) (world->world (-> World World))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/snake/cfg/motion.rkt" (require/typed/check "const.rkt" (BOARD-WIDTH Integer) (BOARD-HEIGHT Integer)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/snake/cfg/motion.rkt" (require/typed/check "data.rkt" (posn=? (-> Posn Posn Boolean))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/snake/cfg/motion.rkt" (require/typed/check "motion-help.rkt" (snake-slither (-> Snake Snake)) (snake-grow (-> Snake Snake))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/snake/cfg/motion-help.rkt" (require/typed/check "cut-tail.rkt" (cut-tail (-> (NEListof Posn) (Listof Posn)))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/snake/cfg/main.rkt" (require/typed/check "handlers.rkt" (handle-key (-> World String World)) (game-over? (-> World Boolean))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/snake/cfg/handlers.rkt" (require/typed/check "collide.rkt" (snake-wall-collide? (-> Snake Boolean)) (snake-self-collide? (-> Snake Boolean))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/snake/cfg/collide.rkt" (require/typed/check "const.rkt" (BOARD-WIDTH Integer) (BOARD-HEIGHT Integer)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/snake/cfg/collide.rkt" (require/typed/check "data.rkt" (posn=? (-> Posn Posn Boolean))))
)>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g102 (simple-result-> g91 1))>) #<syntax g102>)
type->contract:
 (-> world posn)
 #<->/sc #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))> #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g104 (simple-result-> g85 1))>) #<syntax g104>)
type->contract:
 (-> (Pairof posn (Listof posn)) (Listof posn))
 #<->/sc #<cons/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))>>> #<listof/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g13 (flat-named-contract (quote posn?) (lambda (x) (posn? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g14 (listof g13))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g14))>)
type->contract:
 Integer
 #<or/sc #<flat/sc exact-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1587:41 exact-integer?>)
type->contract:
 Integer
 #<or/sc #<flat/sc exact-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1587:41 exact-integer?>)
type->contract:
 (-> posn posn Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g23 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g23))>)
type->contract:
 (-> snake snake)
 #<->/sc #<flat/sc (flat-named-contract (quote snake?) (lambda (x) (snake? x)))> #<flat/sc (flat-named-contract (quote snake?) (lambda (x) (snake? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g25 (flat-named-contract (quote snake?) (lambda (x) (snake? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g26 (simple-result-> g25 1))>) #<syntax g26>)
type->contract:
 (-> snake snake)
 #<->/sc #<flat/sc (flat-named-contract (quote snake?) (lambda (x) (snake? x)))> #<flat/sc (flat-named-contract (quote snake?) (lambda (x) (snake? x)))>>
 (() #<syntax g26>)
type->contract:
 Integer
 #<or/sc #<flat/sc exact-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1587:41 exact-integer?>)
type->contract:
 Integer
 #<or/sc #<flat/sc exact-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1587:41 exact-integer?>)
type->contract:
 (-> posn posn Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g17 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/snake/cfg/handlers.rkt" (require/typed/check "motion.rkt" (world-change-dir (-> World Dir World))))
 (->* (any/c any/c) () (values g17))>)
type->contract:
 (-> snake Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote snake?) (lambda (x) (snake? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g15 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g15))>)
type->contract:
 (-> snake Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote snake?) (lambda (x) (snake? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g15))>)
type->contract:
 (-> world Dir world)
 #<->/sc #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))> #<or/sc #<flat/sc (quote "right")> #<flat/sc (quote "left")> #<flat/sc (quote "down")> #<flat/sc (quote "up")>> #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g18 (flat-named-contract (quote world?) (lambda (x) (world? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g19 (simple-result-> g18 2))>) #<syntax g19>)
type->contract:
 (-> world)
 #<->/sc #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g37 (flat-named-contract (quote world?) (lambda (x) (world? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g38 (simple-result-> g37 0))>) #<syntax g38>)
type->contract:
 (-> Void)
 #<->/sc #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g40 (simple-result-> void? 0))>) #<syntax g40>)
type->contract:
 (-> world world)
 #<->/sc #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))> #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g42 (simple-result-> g37 1))>) #<syntax g42>)
type->contract:
 (-> world String world)
 #<->/sc #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))> #<flat/sc string?> #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g44 (simple-result-> g37 2))>) #<syntax g44>)
type->contract:
 (-> world Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g46 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g46))>)


suffixtree

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/suffixtree/cfg/main.rkt" (require/typed/check "lcs.rkt" (longest-common-substring (-> String String String))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/suffixtree/cfg/typed-data.rkt" (require/typed/check "data.rkt" (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node)))))
type->contract:
 (-> (Vectorof (U Char Symbol)) Nonnegative-Integer Nonnegative-Integer label)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc symbol?> #<flat/sc char?>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g104 (or/c symbol? char?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g105 (vectorof g104))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g106 (flat-named-contract (quote label?) (lambda (x) (label? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g105 any/c any/c) () (values g106))>)
type->contract:
 (-> label (Vectorof (U Char Symbol)))
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<vectorof/sc #<or/sc #<flat/sc symbol?> #<flat/sc char?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g105))>)
type->contract:
 (-> label Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g109 (simple-result-> exact-nonnegative-integer? 1))>) #<syntax g109>)
type->contract:
 (-> label Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g109>)
type->contract:
 (-> (Vectorof (U Char Symbol)) Nonnegative-Integer Nonnegative-Integer label)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc symbol?> #<flat/sc char?>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g105 any/c any/c) () (values g106))>)
type->contract:
 (-> label Nonnegative-Integer Void)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g113 (simple-result-> void? 2))>) #<syntax g113>)
type->contract:
 (-> label Nonnegative-Integer Void)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc void?>>
 (() #<syntax g113>)
type->contract:
 (-> label (U False node) (Listof node) (U False node) node)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc (quote #f)> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>> #<or/sc #<flat/sc (quote #f)> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g116 (flat-named-contract (quote node?) (lambda (x) (node? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c) () (values g116))>)
type->contract:
 (-> node label)
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g118 (simple-result-> g106 1))>) #<syntax g118>)
type->contract:
 (-> node (U False node))
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<or/sc #<flat/sc (quote #f)> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g120 (or/c (quote #f) g116))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g120))>)
type->contract:
 (-> node (Listof node))
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g122 (listof g116))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g122))>)
type->contract:
 (-> node (U False node))
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<or/sc #<flat/sc (quote #f)> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g120))>)
type->contract:
 (-> node suffix-tree)
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<flat/sc (flat-named-contract (quote suffix-tree?) (lambda (x) (suffix-tree? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g125 (flat-named-contract (quote suffix-tree?) (lambda (x) (suffix-tree? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g126 (simple-result-> g125 1))>) #<syntax g126>)
type->contract:
 (-> label (U False node) (Listof node) (U False node) node)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc (quote #f)> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>> #<or/sc #<flat/sc (quote #f)> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c) () (values g116))>)
type->contract:
 (-> node (Listof node) Void)
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>> #<flat/sc void?>>
 (() #<syntax g113>)
type->contract:
 (-> node label Void)
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<flat/sc void?>>
 (() #<syntax g113>)
type->contract:
 (-> node node Void)
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<flat/sc void?>>
 (() #<syntax g113>)
type->contract:
 (-> node node Void)
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<flat/sc void?>>
 (() #<syntax g113>)
type->contract:
 (-> node suffix-treerequire-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/suffixtree/cfg/lcs.rkt" (require/typed/check "label.rkt" (label->string (-> Label String)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-source-eq? (-> Label Label Boolean)) (label-length (-> Label Index)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (label-ref (-> Label Integer (U Symbol Char)))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/suffixtree/cfg/lcs.rkt" (require/typed/check "structs.rkt" (make-tree (-> Tree)) (tree-root (-> Tree Node))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/suffixtree/cfg/structs.rkt" (require/typed/check "label.rkt" (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-element-equal? (-> Any Any Boolean)) (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))) (label-copy (-> Label Label)) (label-ref-at-end? (-> Label Integer Boolean)) (label->string (-> Label String)) (label-source-eq? (-> Label Label Boolean)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (vector->label/with-sentinel (-> (Vectorof Char) Label)) (label-same-source? (-> Label Label Boolean))))
)
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<flat/sc (flat-named-contract (quote suffix-tree?) (lambda (x) (suffix-tree? x)))>>
 (() #<syntax g126>)
type->contract:
 (-> suffix-tree node)
 #<->/sc #<flat/sc (flat-named-contract (quote suffix-tree?) (lambda (x) (suffix-tree? x)))> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g134 (simple-result-> g116 1))>) #<syntax g134>)
type->contract:
 (-> (U (Immutable-Vectorof (U Char Symbol)) (Mutable-Vectorof (U Char Symbol)) String) label)
 #<->/sc #<or/sc #<vectorof/sc #<or/sc #<flat/sc symbol?> #<flat/sc char?>>> #<flat/sc string?>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g58 (or/c symbol? char?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g59 (vectorof g58))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g60 (or/c g59 string?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g61 (flat-named-contract (quote label?) (lambda (x) (label? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g60) () (values g61))>)
type->contract:
 (-> Any Any Boolean)
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g63 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any-wrap/c any-wrap/c) () (values g63))>)
type->contract:
 (-> label Index)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc t:index?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g65 (simple-result-> t:index? 1))>) #<syntax g65>)
type->contract:
 (-> label Integer (U Char Symbol))
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc symbol?> #<flat/sc char?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g58))>)
type->contract:
 (->* (label Index) (Index) label)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) (any/c) (values g61))>)
type->contract:
 (-> label label)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g69 (simple-result-> g61 1))>) #<syntax g69>)
type->contract:
 (-> label Integer Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/suffixtree/cfg/lcs.rkt" (require/typed/check "ukkonen.rkt" (tree-add! (-> Tree Label Void))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/suffixtree/cfg/ukkonen.rkt" (require/typed/check "label.rkt" (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (label->string (-> Label String)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (label-element-equal? (-> Any Any Boolean)) (label-source-eq? (-> Label Label Boolean)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label)))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/suffixtree/cfg/ukkonen.rkt" (require/typed/check "structs.rkt" (new-suffix-tree (-> Tree)) (node-find-child (-> Node Any (U Node #f))) (node-root? (-> Node Boolean)) (node-position-at-end? (-> Node Index Boolean)) (node-add-leaf! (-> Node Label Node)) (node-up-splice-leaf! (-> Node Index Label (values Node Node))) (node-follow/k (-> Node Label (-> Node (Pairof Node Index)) (-> Node Index (Pairof Node Index)) (-> Node Label Index (Pairof Node Index)) (-> Node Index Label Index (Pairof Node Index)) (Pairof Node Index)))))
 (->* (any/c any/c) () (values g63))>)
type->contract:
 (-> label String)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g72 (simple-result-> string? 1))>) #<syntax g72>)
type->contract:
 (-> label label Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g63))>)
type->contract:
 (-> String label)
 #<->/sc #<flat/sc string?> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 (() #<syntax g69>)
type->contract:
 (-> String label)
 #<->/sc #<flat/sc string?> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 (() #<syntax g69>)
type->contract:
 (-> (Vectorof (U Char Symbol)) label)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc symbol?> #<flat/sc char?>>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g59) () (values g61))>)
type->contract:
 (-> (Vectorof Char) label)
 #<->/sc #<vectorof/sc #<flat/sc char?>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g78 (vectorof char?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g78) () (values g61))>)
type->contract:
 (-> label label Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g63))>)
type->contract:
 (-> label Index)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc t:index?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g49 (simple-result-> t:index? 1))>) #<syntax g49>)
type->contract:
 (-> label Integer (U Char Symbol))
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc symbol?> #<flat/sc char?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g51 (or/c symbol? char?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g51))>)
type->contract:
 (-> label String)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g53 (simple-result-> string? 1))>) #<syntax g53>)
type->contract:
 (-> String label)
 #<->/sc #<flat/sc string?> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g55 (flat-named-contract (quote label?) (lambda (x) (label? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g56 (simple-result-> g55 1))>) #<syntax g56>)
type->contract:
 (-> String label)
 #<->/sc #<flat/sc string?> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 (() #<syntax g56>)
type->contract:
 (-> Any Any Boolean)
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g59 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any-wrap/c any-wrap/c) () (values g59))>)
type->contract:
 (-> label label Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g59))>)
type->contract:
 (-> (Vectorof (U Char Symbol)) label)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc symbol?> #<flat/sc char?>>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g62 (vectorof g51))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g62) () (values g55))>)
type->contract:
 (-> (U (Immutable-Vectorof (U Char Symbol)) (Mutable-Vectorof (U Char Symbol)) String) label)
 #<->/sc #<or/sc #<vectorof/sc #<or/sc #<flat/sc symbol?> #<flat/sc char?>>> #<flat/sc string?>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g64 (or/c g62 string?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g64) () (values g55))>)
type->contract:
 (->* (label Index) (Index) label)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc t:index?>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) (any/c) (values g55))>)
type->contract:
 (-> suffix-tree)
 #<->/sc #<flat/sc (flat-named-contract (quote suffix-tree?) (lambda (x) (suffix-tree? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g67 (flat-named-contract (quote suffix-tree?) (lambda (x) (suffix-tree? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g68 (simple-result-> g67 0))>) #<syntax g68>)
type->contract:
 (-> node Any (U False node))
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<or/sc #<flat/sc (quote #f)> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g70 (flat-named-contract (quote node?) (lambda (x) (node? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g71 (or/c (quote #f) g70))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any-wrap/c) () (values g71))>)
type->contract:
 (-> node Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g59))>)
type->contract:
 (-> node Index Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<or/sc #<flat/sc t:index?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g59))>)
type->contract:
 (-> node label node)
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g75 (simple-result-> g70 2))>) #<syntax g75>)
type->contract:
 (-> node Index label (values node node))
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<or/sc #<flat/sc t:index?>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c) () (values g70 g70))>)
type->contract:
 (-> node label (-> node (Pairof node Index)) (-> node Index (Pairof node Index)) (-> node label Index (Pairof node Index)) (-> node Index label Index (Pairof node Index)) (Pairof node Index))
 #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<cons/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<or/sc #<flat/sc t:index?>>>> #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<or/sc #<flat/sc t:index?>> #<cons/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<or/sc #<flat/sc t:index?>>>> #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc t:index?>> #<cons/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<or/sc #<flat/sc t:index?>>>> #<->/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<or/sc #<flat/sc t:index?>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc t:index?>> #<cons/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<or/sc #<flat/sc t:index?>>>> #<cons/sc #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))> #<or/sc #<flat/sc t:index?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g78 (->* (g70) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g79 (->* (g70 t:index?) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g80 (->* (g70 g55 t:index?) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g81 (->* (g70 t:index? g55 t:index?) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g82 (cons/c g70 t:index?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c g78 g79 g80 g81) () (values g82))>)
type->contract:
 (-> label String)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g29 (simple-result-> string? 1))>) #<syntax g29>)
type->contract:
 (-> String label)
 #<->/sc #<flat/sc string?> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g31 (flat-named-contract (quote label?) (lambda (x) (label? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g32 (simple-result-> g31 1))>) #<syntax g32>)
type->contract:
 (-> String label)
 #<->/sc #<flat/sc string?> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 (() #<syntax g32>)
type->contract:
 (-> (U (Immutable-Vectorof (U Char Symbol)) (Mutable-Vectorof (U Char Symbol)) String) label)
 #<->/sc #<or/sc #<vectorof/sc #<or/sc #<flat/sc symbol?> #<flat/sc char?>>> #<flat/sc string?>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g35 (or/c symbol? char?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g36 (vectorof g35))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g37 (or/c g36 string?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g37) () (values g31))>)
type->contract:
 (-> label label Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g39))>)
type->contract:
 (-> label Index)
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc t:index?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g41 (simple-result-> t:index? 1))>) #<syntax g41>)
type->contract:
 (-> (Vectorof (U Char Symbol)) label)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc symbol?> #<flat/sc char?>>> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g36) () (values g31))>)
type->contract:
 (-> label Integer (U Char Symbol))
 #<->/sc #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc symbol?> #<flat/sc char?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g35))>)
type->contract:
 (-> suffix-tree)
 #<->/sc #<flat/sc (flat-named-contract (quote suffix-tree?) (lambda (x) (suffix-tree? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g45 (flat-named-contract (quote suffix-tree?) (lambda (x) (suffix-tree? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g46 (simple-result-> g45 0))>) #<syntax g46>)
type->contract:
 (-> suffix-tree node)
 #<->/sc #<flat/sc (flat-named-contract (quote suffix-tree?) (lambda (x) (suffix-tree? x)))> #<flat/sc (flat-named-contract (quote node?) (lambda (x) (node? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g48 (flat-named-contract (quote node?) (lambda (x) (node? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g49 (simple-result-> g48 1))>) #<syntax g49>)
type->contract:
 (-> suffix-tree label Void)
 #<->/sc #<flat/sc (flat-named-contract (quote suffix-tree?) (lambda (x) (suffix-tree? x)))> #<flat/sc (flat-named-contract (quote label?) (lambda (x) (label? x)))> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g51 (simple-result-> void? 2))>) #<syntax g51>)
type->contract:
 (-> String String String)
 #<->/sc #<flat/sc string?> #<flat/sc string?> #<flat/sc string?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g8 (simple-result-> string? 2))>) #<syntax g8>)


synth

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/typed-data.rkt" (require/typed/check "data.rkt" (#:struct Array ((shape : Indexes) (size : Integer) (strict? : (Boxof Boolean)) (strict! : (-> Void)) (unsafe-proc : (-> Indexes Float)))) (#:struct (Settable-Array Array) ((set-proc : (Indexes Float -> Void)))) (#:struct (Mutable-Array Settable-Array) ((data : (Vectorof Float))))))
type->contract:
 (-> Indexes Integer (Boxof Boolean) (-> Void) (-> Indexes Flonum) Array)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc exact-integer?>> #<box/sc #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<->/sc #<flat/sc void?>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g90 (vectorof exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g91 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g92 (box/c g91))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g93 (->* (g90) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g94 (flat-named-contract (quote Array?) (lambda (x) (Array? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g90 any/c g92 any/c g93) () (values g94))>)
type->contract:
 (-> Array Indexes)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g90))>)
type->contract:
 (-> Array Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g97 (simple-result-> exact-integer? 1))>) #<syntax g97>)
type->contract:
 (-> Array (Boxof Boolean))
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<box/sc #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g92))>)
type->contract:
 (-> Array (-> Void))
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<->/sc #<flat/sc void?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g100 (simple-result-> void? 0))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g100))>)
type->contract:
 (-> Array (-> Indexes Flonum))
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g102 (->* (g90) () (values flonum?)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g102))>)
type->contract:
 (-> Indexes Integer (Boxof Boolean) (-> Void) (-> Indexes Flonum) (-> Indexes Flonum Void) Settable-Array)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc exact-integer?>> #<box/sc #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<->/sc #<flat/sc void?>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>> #<flat/sc void?require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/main.rkt" (require/typed/check "sequencer.rkt" (note (-> Symbol Natural Natural (Pairof Natural Natural))) (sequence (-> Natural (Listof (Pairof (U Natural #f) Natural)) Natural (-> Float (-> Indexes Float)) Array))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/sequencer.rkt" (require/typed/check "array-struct.rkt" (build-array (-> Indexes (-> Indexes Flonum) Array))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/array-struct.rkt" (require/typed/check "array-utils.rkt" (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes))))
>> #<flat/sc (flat-named-contract (quote Settable-Array?) (lambda (x) (Settable-Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g104 (->* (g90 flonum?) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g105 (flat-named-contract (quote Settable-Array?) (lambda (x) (Settable-Array? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g90 any/c g92 any/c g93 g104) () (values g105))>)
type->contract:
 (-> Settable-Array (-> Indexes Flonum Void))
 #<->/sc #<flat/sc (flat-named-contract (quote Settable-Array?) (lambda (x) (Settable-Array? x)))> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>> #<flat/sc void?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g107 (->* (g90 any/c) () (values void?)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g107))>)
type->contract:
 (-> Indexes Integer (Boxof Boolean) (-> Void) (-> Indexes Flonum) (-> Indexes Flonum Void) (Vectorof Flonum) Mutable-Array)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc exact-integer?>> #<box/sc #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<->/sc #<flat/sc void?>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>> #<flat/sc void?>> #<vectorof/sc #<or/sc #<flat/sc flonum?>>> #<flat/sc (flat-named-contract (quote Mutable-Array?) (lambda (x) (Mutable-Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g109 (vectorof flonum?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g110 (flat-named-contract (quote Mutable-Array?) (lambda (x) (Mutable-Array? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g90 any/c g92 any/c g93 g104 g109) () (values g110))>)
type->contract:
 (-> Mutable-Array (Vectorof Flonum))
 #<->/sc #<flat/sc (flat-named-contract (quote Mutable-Array?) (lambda (x) (Mutable-Array? x)))> #<vectorof/sc #<or/sc #<flat/sc flonum?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g109))>)
type->contract:
 (-> Indexes Indexes Integer)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (vectorof exact-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g39 g39) () (values exact-integer?))>)
type->contract:
 (-> Symbol Indexes Integer)
 #<->/sc #<flat/sc symbol?> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g39) () (values exact-integer?))>)
type->contract:
 (-> Indexes (-> Nothing) Indexes)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<->/sc #<or/sc>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/sequencer.rkt" (require/typed/check "array-transform.rkt" (array-append* ((Listof Array) -> Array))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/array-transform.rkt" (require/typed/check "array-struct.rkt" (array-shape (-> Array Indexes)) (unsafe-array-proc (-> Array (-> Indexes Float))) (array-default-strict! (-> Array Void)) (unsafe-build-array (-> Indexes (-> Indexes Float) Array))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/array-transform.rkt" (require/typed/check "array-broadcast.rkt" (array-broadcast (-> Array Indexes Array)) (array-shape-broadcast (-> (Listof Indexes) Indexes))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/array-broadcast.rkt" (require/typed/check "array-struct.rkt" (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/array-broadcast.rkt" (require/typed/check "array-utils.rkt" (make-thread-local-indexes (-> Integer (-> Indexes)))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/array-transform.rkt" (require/typed/check "array-utils.rkt" (unsafe-vector-remove (-> Indexes Integer Indexes)) (vector-copy-all (-> Indexes Indexes)) (unsafe-vector-insert (-> Indexes Integer Integer Indexes))))
 (->* (g39 any/c) () (values g39))>)
type->contract:
 (-> Array Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g27 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g27))>)
type->contract:
 (-> Array Void)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g29 (simple-result-> void? 1))>) #<syntax g29>)
type->contract:
 (-> Array Indexes)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g31 (vectorof exact-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g31))>)
type->contract:
 (-> Array Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g33 (simple-result-> exact-integer? 1))>) #<syntax g33>)
type->contract:
 (-> Array (-> Indexes Flonum))
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g35 (->* (g31) () (values flonum?)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g35))>)
type->contract:
 (-> Indexes (-> Indexes Flonum) Array)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g37 (->* (g31) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g38 (flat-named-contract (quote Array?) (lambda (x) (Array? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g31 g37) () (values g38))>)
type->contract:
 (-> Integer (-> Indexes))
 #<->/sc #<or/sc #<flat/sc exact-integer?>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g40 (->* () () (values g31)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g40))>)
type->contract:
 (-> Array Indexes)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g19 (vectorof exact-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/crequire-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/sequencer.rkt" (require/typed/check "synth.rkt" (fs Natural)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/synth.rkt" (require/typed/check "array-utils.rkt" (next-indexes! (-> Indexes Integer Indexes Void))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/synth.rkt" (require/typed/check "array-struct.rkt" (array? (-> Array Boolean)) (array-shape (-> Array Indexes)) (unsafe-array-proc (-> Array (-> Indexes Float))) (array-size (-> Array Integer)) (array-strictness (Parameterof (U #f #t)))))
) () (values g19))>)
type->contract:
 (-> Array (-> Indexes Flonum))
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g21 (->* (g19) () (values flonum?)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g21))>)
type->contract:
 (-> Array Void)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g23 (simple-result-> void? 1))>) #<syntax g23>)
type->contract:
 (-> Indexes (-> Indexes Flonum) Array)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g25 (->* (g19) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g26 (flat-named-contract (quote Array?) (lambda (x) (Array? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g19 g25) () (values g26))>)
type->contract:
 (-> Array Indexes Array)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g19) () (values g26))>)
type->contract:
 (-> (Listof Indexes) Indexes)
 #<->/sc #<listof/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g29 (listof g19))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g29) () (values g19))>)
type->contract:
 (-> Indexes Integer Indexes)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc exact-integer?>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g19 any/c) () (values g19))>)
type->contract:
 (-> Indexes Indexes)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g19) () (values g19))>)
type->contract:
 (-> Indexes Integer Integer Indexes)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc exact-integer?>> #<or/sc #<flat/sc exact-integer?>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g19 any/c any/c) () (values g19))>)
type->contract:
 (-> Indexes Integer Indexes Void)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc exact-integer?>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/sequencer.rkt" (require/typed/check "mixer.rkt" (mix (-> Weighted-Signal * Array))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/mixer.rkt" (require/typed/check "array-struct.rkt" (array? (-> Array Boolean)) (array-shape (-> Array Indexes)) (array-default-strict! (-> Array Void)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/mixer.rkt" (require/typed/check "array-broadcast.rkt" (array-broadcast (-> Array Indexes Array)) (array-shape-broadcast (case-> ((Listof Indexes) -> Indexes) ((Listof Indexes) (U #f #t (quote permissive)) -> Indexes))) (array-broadcasting (Parameterof (U #f #t (quote permissive))))))
 (define g31 (vectorof exact-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g31 any/c g31) () (values void?))>)
type->contract:
 (-> Array Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g33 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g33))>)
type->contract:
 (-> Array Indexes)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g31))>)
type->contract:
 (-> Array (-> Indexes Flonum))
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g36 (->* (g31) () (values flonum?)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g36))>)
type->contract:
 (-> Array Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g38 (simple-result-> exact-integer? 1))>) #<syntax g38>)
type->contract:
 (Parameterof Boolean)
 #<parameter/sc #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g40 (parameter/c any/c g33))>) #<syntax g40>)
type->contract:
 (-> Array Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g20 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g20))>)
type->contract:
 (-> Array Indexes)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g22 (vectorof exact-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g22))>)
type->contract:
 (-> Array Void)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<flat/sc void?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g24 (simple-result-> void? 1))>) #<syntax g24>)
type->contract:
 (-> Array (-> Indexes Flonum))
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g26 (->* (g22) () (values flonum?)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g26))>)
type->contract:
 (-> Indexes (-> Indexes Flonum) Array)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g28 (->* (g22) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g29 (flat-named-contract (quote Array?) (lambda (x) (Array? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g22 g28) () (values g29))>)
type->contract:
 (-> Array Indexes Array)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c g22) () (values g29))>)
type->contract:
 (->* ((Listof Indexes)) ((U 'permissive Boolean)) Indexes)
 #<->/sc #<listof/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)> #<flat/sc (quote permissive)>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g32 (listof g22))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g32) (any/c) (values g22))>)
type->contract:
 (Parameterof (U 'permissive Boolean))
 #<parameter/sc #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)> #<flat/sc (quote permissive)>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)> #<flat/sc (quote permissive)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g34 (or/c (quote #t) (quote #f) (quote permissive)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g35 (parameter/c any/c g34))>) #<syntax g35>)
type->contract:
 (-> Indexes (-> Indexes Flonum) Array)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g16 (vectorof exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g17 (->* (g16) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g18 (flat-named-contract (quote Array?) (lambda (x) (Array? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g16 g17) () (values g18))>)
type->contract:
 (-> (Listof Array) Array)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g20 (simple-result-> g18 1))>) #<syntax g20>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/main.rkt" (require/typed/check "drum.rkt" (drum (-> Natural Pattern Natural Array))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/drum.rkt" (require/typed/check "array-struct.rkt" (array-size (-> Array Integer)) (make-array (-> In-Indexes Flonum Array)) (build-array (-> In-Indexes (-> Indexes Float) Array)) (unsafe-vector->array (-> Indexes (Vectorof Float) Mutable-Array))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/drum.rkt" (require/typed/check "array-utils.rkt" (array-shape-size (-> Indexes Integer)) (check-array-shape (-> In-Indexes (-> Nothing) Indexes))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/drum.rkt" (require/typed/check "array-transform.rkt" (array-append* ((Listof Array) -> Array))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/drum.rkt" (require/typed/check "synth.rkt" (fs Natural) (seconds->samples (-> Float Integer))))
>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 (-> Weighted-Signal * Array)
 #<->/sc #<listof/sc #<list/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<or/sc #<flat/sc real?>>>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () #:rest any/c (values g18))>)
type->contract:
 (-> Array Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<or/sc #<flat/sc exact-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g17 (simple-result-> exact-integer? 1))>) #<syntax g17>)
type->contract:
 (-> Indexes Flonum Array)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g19 (vectorof exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g20 (flat-named-contract (quote Array?) (lambda (x) (Array? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g19 any/c) () (values g20))>)
type->contract:
 (-> Indexes (-> Indexes Flonum) Array)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g22 (->* (g19) () any))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g19 g22) () (values g20))>)
type->contract:
 (-> Indexes (Vectorof Flonum) Mutable-Array)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<vectorof/sc #<or/sc #<flat/sc flonum?>>> #<flat/sc (flat-named-contract (quote Mutable-Array?) (lambda (x) (Mutable-Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g24 (vectorof flonum?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g25 (flat-named-contract (quote Mutable-Array?) (lambda (x) (Mutable-Array? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g19 g24) () (values g25))>)
type->contract:
 (-> Indexes Integer)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g19) () (values exact-integer?))>)
type->contract:
 (-> Indexes (-> Nothing) Indexes)
 #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<->/sc #<or/sc>> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g19 any/c) () (values g19))>)
type->contract:
 (-> (Listof Array) Array)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/main.rkt" (require/typed/check "mixer.rkt" (mix (-> Weighted-Signal * Array))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/synth/cfg/main.rkt" (require/typed/check "synth.rkt" (emit (-> Array (Vectorof Integer))) (sawtooth-wave (-> Float (-> Indexes Float)))))
 (define g29 (simple-result-> g20 1))>) #<syntax g29>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 (-> Flonum Integer)
 #<->/sc #<or/sc #<flat/sc flonum?>> #<or/sc #<flat/sc exact-integer?>>>
 (() #<syntax g17>)
type->contract:
 (-> Symbol Nonnegative-Integer Nonnegative-Integer (Pairof Nonnegative-Integer Nonnegative-Integer))
 #<->/sc #<flat/sc symbol?> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<cons/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g10 (cons/c exact-nonnegative-integer? exact-nonnegative-integer?))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c) () (values g10))>)
type->contract:
 (-> Nonnegative-Integer (Listof (Pairof (U Exact-Nonnegative-Integer False) Nonnegative-Integer)) Nonnegative-Integer (-> Flonum (-> Indexes Flonum)) Array)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<listof/sc #<cons/sc #<or/sc #<flat/sc exact-nonnegative-integer?> #<flat/sc (quote #f)>> #<or/sc #<flat/sc exact-nonnegative-integer?>>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<->/sc #<or/sc #<flat/sc flonum?>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g12 (vectorof exact-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g13 (->* (g12) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g14 (->* (flonum?) () (values g13)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g15 (flat-named-contract (quote Array?) (lambda (x) (Array? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c g14) () (values g15))>)
type->contract:
 (-> Nonnegative-Integer Pattern Nonnegative-Integer Array)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<listof/sc #<or/sc #<flat/sc (quote #f)> #<flat/sc (quote X)> #<flat/sc (quote O)>>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g17 (simple-result-> g15 3))>) #<syntax g17>)
type->contract:
 (-> Weighted-Signal * Array)
 #<->/sc #<listof/sc #<list/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<or/sc #<flat/sc real?>>>> #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () #:rest any/c (values g15))>)
type->contract:
 (-> Array Indexes)
 #<->/sc #<flat/sc (flat-named-contract (quote Array?) (lambda (x) (Array? x)))> #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g12))>)
type->contract:
 (-> Flonum (-> Indexes Flonum))
 #<->/sc #<or/sc #<flat/sc flonum?>> #<->/sc #<vectorof/sc #<or/sc #<flat/sc exact-integer?>>> #<or/sc #<flat/sc flonum?>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g21 (->* (g12) () (values flonum?)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g21))>)


take5

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/take5/cfg/card-adapted.rkt" (require/typed/check "card.rkt" (#:struct card ((face : Face) (bulls : Bulls))) (>-face (-> Card Card Boolean)) (--face (-> Card Card Natural))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/take5/cfg/main.rkt" (require/typed/check "player.rkt" (create-player (-> Natural Player))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/take5/cfg/main.rkt" (require/typed/check "dealer.rkt" (create-dealer (-> (Listof Player) Dealer))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/take5/cfg/dealer.rkt" (require/typed/check "basics.rkt" (FACE Natural) (FIVE Natural) (STACKS Natural) (SIXTYSIX Natural) (HAND Natural) (MIN-BULL Bulls) (MAX-BULL Bulls) (configuration (-> (Listof (List Symbol Natural))))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/take5/cfg/dealer.rkt" (require/typed/check "card-pool.rkt" (create-card-pool (-> (-> (Listof Card) (Listof Card)) (-> Bulls) CardPool))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/take5/cfg/card-pool.rkt" (require/typed/check "basics.rkt" (FACE Natural) (HAND Natural) (MIN-BULL Natural) (MAX-BULL Natural)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/take5/cfg/dealer.rkt" (require/typed/check "deck.rkt" (create-deck (-> CardPool Deck))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/take5/cfg/deck.rkt" (require/typed/check "basics.rkt" (FACE Natural) (STACKS Natural)))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/take5/cfg/deck.rkt" (require/typed/check "stack.rkt" (bulls (-> Stack Natural))))
type->contract:
 (-> Nonnegative-Integer Nonnegative-Integer card)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g33 (flat-named-contract (quote card?) (lambda (x) (card? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g34 (simple-result-> g33 2))>) #<syntax g34>)
type->contract:
 (-> card Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g36 (simple-result-> exact-nonnegative-integer? 1))>) #<syntax g36>)
type->contract:
 (-> card Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 (() #<syntax g36>)
type->contract:
 (-> card card Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))> #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g39))>)
type->contract:
 (-> card card Nonnegative-Integer)
 #<->/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))> #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g41 (simple-result-> exact-nonnegative-integer? 2))>) #<syntax g41>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 (-> Stack Nonnegative-Integer)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<or/sc #<flat/sc exact-nonnegative-integer?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g101 (simple-result-> exact-nonnegative-integer?require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/take5/cfg/dealer.rkt" (require/typed/check "player.rkt" (player% Player%)))
 1))>) #<syntax g101>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 Nonnegative-Integer
 #<or/sc #<flat/sc exact-nonnegative-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1584:41 exact-nonnegative-integer?>)
type->contract:
 (-> (Listof (List Symbol Nonnegative-Integer)))
 #<->/sc #<listof/sc #<list/sc #<flat/sc symbol?> #<or/sc #<flat/sc exact-nonnegative-integer?>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g203 (list/c symbol? exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g204 (listof g203))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* () () (values g204))>)
type->contract:
 (-> (-> Stack Stack) (-> Nonnegative-Integer) CardPool)
 #<->/sc #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>> #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<object/sc #<->/sc #<any/sc> #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<->/sc #<any/sc> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>> #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g206 (flat-named-contract (quote card?) (lambda (x) (card? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g207 (listof g206))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g208 (->* (g207) () any))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g209 (simple-result-> g206 1))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g210 (->* (any/c) () (values g207)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g211 (->* () () (values exact-nonnegative-integer?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g212 (->* (g207) () (values g207)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g213 (object/c (draw-card g209) (draw-hand g210) (field (random-bulls g211)) (field (shuffle g212))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g208 any/c) () (values g213))>)
type->contract:
 (-> CardPool Deck)
 #<->/sc #<object/sc #<->/sc #<any/sc> #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<->/sc #<any/sc> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>> #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>>> #<name/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g214 (recursive-contract g230 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g215 (recursive-contract g236 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g216 (recursive-contract g236 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g218 (->* (any/c) () (values g206)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g219 (->* (any/c) () (values g207)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g220 (object/c-opaque (draw-card g218) (draw-hand g219) (field (random-bulls g211)) (field (shuffle g212))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g221 (->* (any/c g206) () (values g207)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g222 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g223 (->* (any/c g206) () (values g222)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g224 (simple-result-> void? 2))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g225 (or/c exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g226 (->* (any/c g207 g206) () (values g225)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g227 (or/c g206 g207))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g228 (->* (any/c g206 g227) () (values g225)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g229 (listof g207))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g230 (object/c (fewest-bulls g210) (fit g221) (larger-than-some-top-of-stacks? g223) (push g224) (replace g226) (replace-stack g228) (field (cards0 g207)) (field (my-stacks g229))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g231 (->* (any/c g206) () (values g207)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g232 (->* (any/c g206) () (values g222)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g233 (->* (any/c g206) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g234 (->* (any/c g207 g206) () (values g225)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g235 (->* (any/c g206 g227) () (values g225)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g236 (object/c-opaque (fewest-bulls g219) (fit g231) (larger-than-some-top-of-stacks? g232) (push g233) (replace g234) (replace-stack g235) (field (cards0 g207)) (field (my-stacks g229))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g220) () (values g216))>)
type->contract:
 Player%
 #<class/sc #<->/sc #<any/sc> #<name/sc> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>> #<->/sc #<any/sc> #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<->/sc #<any/sc> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<flat/sc void?>> #<->/sc #<any/sc> #<name/sc> #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g238 (->* (any/c g215) () (values g207)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g239 (simple-result-> exact-nonnegative-integer? 1))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g240 (->* (any/c g207) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g241 (->* (any/c g215) () (values g206)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g246 (let ((g238242 g238) (g239243 g239) (g240244 g240) (g241245 g241)) (class/c #:opaque #:ignore-local-member-names (init (n exact-nonnegative-integer?)) (init (order g212)) (field (my-cards g207)) (field (n exact-nonnegative-integer?)) (field...>) #<syntax g246>)
type->contract:
 (-> Nonnegative-Integer Player)
 #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<object/sc #<->/sc #<any/sc> #<name/sc> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>> #<->/sc #<any/sc> #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<->/sc #<any/sc> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<flat/sc void?>> #<->/sc #<any/sc> #<name/sc> #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g13 (recursive-contract g35 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g14 (recursive-contract g42 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g15 (recursive-contract g42 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g17 (flat-named-contract (quote card?) (lambda (x) (card? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g18 (listof g17))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g19 (->* (any/c g14) () (values g18)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g20 (simple-result-> exact-nonnegative-integer? 1))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g21 (->* (any/c g18) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g22 (->* (any/c g14) () (values g17)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g23 (->* (g18) () (values g18)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g24 (object/c (choose g19) (name g20) (start-round g21) (start-turn g22) (field (my-cards g18)) (field (n exact-nonnegative-integer?)) (field (order g23))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g25 (->* (any/c) () (values g18)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g26 (->* (any/c g17) () (values g18)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g27 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g28 (->* (any/c g17) () (values g27)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g29 (simple-result-> void? 2))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g30 (or/c exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g31 (->* (any/c g18 g17) () (values g30)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g32 (or/c g17 g18))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g33 (->* (any/c g17 g32) () (values g30)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g34 (listof g18))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g35 (object/c (fewest-bulls g25) (fit g26) (larger-than-some-top-of-stacks? g28) (push g29) (replace g31) (replace-stack g33) (field (cards0 g18)) (field (my-stacks g34))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g36 (->* (any/c) () (values g18)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g37 (->* (any/c g17) () (values g18)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g38 (->* (any/c g17) () (values g27)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (->* (any/c g17) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g40 (->* (any/c g18 g17) () (values g30)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g41 (->* (any/c g17 g32) () (values g30)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g42 (object/c-opaque (fewest-bulls g36) (fit g37) (larger-than-some-top-of-stacks? g38) (push g39) (replace g40) (replace-stack g41) (field (cards0 g18)) (field (my-stacks g34))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g24))>)
type->contract:
 (-> (Listof Player) Dealer)
 #<->/sc #<listof/sc #<object/sc #<->/sc #<any/sc> #<name/sc> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>> #<->/sc #<any/sc> #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<->/sc #<any/sc> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<flat/sc void?>> #<->/sc #<any/sc> #<name/sc> #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>>>> #<object/sc #<->/sc #<any/sc> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>> #<->/sc #<any/sc> #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>> #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<list/sc #<list/sc #<flat/sc symbol?> #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<listof/sc #<list/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>>>>>> #<->/sc #<any/sc> #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>> #<->/sc #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<flat/sc void?>> #<->/sc #<any/sc> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<list/sc #<list/sc #<flat/sc symbol?> #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<listof/sc #<list/sc #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc exact-nonnegative-integer?>>>>>> #<name/sc> #<listof/sc #<name/sc>> #<listof/sc #<object/sc #<->/sc #<any/sc> #<name/sc> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>> #<->/sc #<any/sc> #<or/sc #<flat/sc exact-nonnegative-integer?>>> #<->/sc #<any/sc> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<flat/sc void?>> #<->/sc #<any/sc> #<name/sc> #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote card?) (lambda (x) (card? x)))>>>>>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g46 (recursive-contract g75 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g47 (recursive-contract g77 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g48 (recursive-contract g78 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g43 (recursive-contract g86 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g44 (recursive-contract g94 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g45 (recursive-contract g101 #:impersonator))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g50 (->* (any/c g15) () (values g18)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g51 (->* (any/c) () (values exact-nonnegative-integer?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g52 (->* (any/c g18) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g53 (->* (any/c g15) () (values g17)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g54 (object/c-opaque (choose g50) (name g51) (start-round g52) (start-turn g53) (field (my-cards g18)) (field (n exact-nonnegative-integer?)) (field (order g23))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g55 (listof g54))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g56 (->* (any/c) () (values g27)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g57 (->* () () (values exact-nonnegative-integer?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g58 (list/c symbol? exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g59 (list/c exact-nonnegative-integer? exact-nonnegative-integer?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g60 (listof g59))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g61 (list/c g58 g60))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g62 (->* (any/c) (g23 g57) (values g61)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g63 (->* (any/c g23 g57) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g64 (->* (any/c exact-nonnegative-integer?) () (values g61)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g65 (listof g46))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g66 (->* (any/c g13) () (values g18)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g67 (->* (any/c g13) () (values g17)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g68 (object/c-opaque (choose g66) (name g51) (start-round g52) (start-turn g67) (field (my-cards g18)) (field (n exact-nonnegative-integer?)) (field (order g23))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g69 (listof g68))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g70 (object/c (any-player-done? g56) (play-game g62) (play-round g63) (present-results g64) (field (internal% g43)) (field (internals g65)) (field (players g69))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g71 (->* (any/c g30) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g72 (->* (any/c) () (values g30)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g73 (->* (any/c) () (values g30)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g74 (object/c-opaque (choose g66) (name g73) (start-round g52) (start-turn g67) (field (my-cards g18)) (field (n g30)) (field (order g23))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g75 (object/c (add-score g71) (bulls g72) (choose g19) (name g72) (start-round g21) (start-turn g22) (field (my-bulls g30)) (field (my-cards g18)) (field (n g30)) (field (order g23)) (field (player g74))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g76 (->* (any/c g30) () (values void?)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g77 (object/c-opaque (add-score g76) (bulls g73) (choose g50) (name g73) (start-round g52) (start-turn g53) (field (my-bulls g30)) (field (my-cards g18)) (field (n g30)) (field (order g23)) (field (player g74))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g78 (object/c-opaque (add-score g76) (bulls g73) (choose g66) (name g73) (start-round g52) (start-turn g67) (field (my-bulls g30)) (field (my-cards g18)) (field (n g30)) (field (order g23)) (field (player g74))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g85 (object/c-opaque (choose g50) (name g73) (start-round g52) (start-turn g53) (field (my-cards g18)) (field (n g30)) (field (order g23))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g86 (let ((g7179 g71) (g7280 g72) (g1981 g19) (g7282 g72) (g2183 g21) (g2284 g22)) (class/c #:opaque #:ignore-local-member-names (init (player g85)) (field (my-bulls g30)) (field (my-cards g18)) (field (n g30)) (field (order g23)) (field (player...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g93 (object/c (choose g19) (name g72) (start-round g21) (start-turn g22) (field (my-cards g18)) (field (n g30)) (field (order g23))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g94 (let ((g7687 g76) (g7388 g73) (g5089 g50) (g7390 g73) (g5291 g52) (g5392 g53)) (class/c (init (player g93)) (field (my-bulls g30)) (field (my-cards g18)) (field (n g30)) (field (order g23)) (field (player g74)) (add-score g7687) (bulls g7388...> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g101 (let ((g7695 g76) (g7396 g73) (g6697 g66) (g7398 g73) (g5299 g52) (g67100 g67)) (class/c #:opaque #:ignore-local-member-names (init (player g74)) (field (my-bulls g30)) (field (my-cards g18)) (field (n g30)) (field (order g23)) (field (play...>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g55) () (values g70))>)


tetris

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/base-types.rkt" (require/typed/check "data.rkt" (#:struct posn ((x : Real) (y : Real))) (#:struct block ((x : Real) (y : Real) (color : Color))) (#:struct tetra ((center : posn) (blocks : (Listof Block)))) (#:struct world ((tetra : tetra) (blocks : (Listof Block))))))
type->contract:
 (-> Real Real posn)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g117 (flat-named-contract (quote posn?) (lambda (x) (posn? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g118 (simple-result-> g117 2))>) #<syntax g118>)
type->contract:
 (-> posn Real)
 #<->/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<or/sc #<flat/sc real?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g120 (simple-result-> real? 1))>) #<syntax g120>)
type->contract:
 (-> posn Real)
 #<->/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<or/sc #<flat/sc real?>>>
 (() #<syntax g120>)
type->contract:
 (-> Real Real Symbol block)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g123 (flat-named-contract (quote block?) (lambda (x) (block? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g124 (simple-result-> g123 3))>) #<syntax g124>)
type->contract:
 (-> block Real)
 #<->/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))> #<or/sc #<flat/sc real?>>>
 (() #<syntax g120>)
type->contract:
 (-> block Real)
 #<->/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))> #<or/sc #<flat/sc real?>>>
 (() #<syntax g120>)
type->contract:
 (-> block Symbol)
 #<->/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))> #<flat/sc symbol?>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g128 (simple-result-> symbol? 1))>) #<syntax g128>)
type->contract:
 (-> posn BSet tetra)
 #<->/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g130 (flat-named-contract (quote tetra?) (lambda (x) (tetra? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g131 (simple-result-> g130 2))>) #<syntax g131>)
type->contract:
 (-> tetra posn)
 #<->/sc #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))> #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g133 (simple-result-> g117 1))>) #<syntax g133>)
type->contract:
 (-> tetra BSet)
 #<->/sc #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g135 (listof g123))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g135))>)
type->contract:
 (-> tetra BSet world)
 #<->/sc #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<flat/sc (flat-named-contractrequire-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/main.rkt" (require/typed/check "aux.rkt" (list-pick-random (-> (Listof Tetra) Tetra)) (tetras (Listof Tetra))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/aux.rkt" (require/typed/check "tetras.rkt" (build-tetra-blocks (-> Color Real Real Real Real Real Real Real Real Real Real Tetra))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/tetras.rkt" (require/typed/check "bset.rkt" (blocks-intersect (-> BSet BSet BSet)) (blocks-move (-> Real Real BSet BSet)) (blocks-rotate-cw (-> Posn BSet BSet)) (blocks-rotate-ccw (-> Posn BSet BSet)) (blocks-change-color (-> BSet Color BSet))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/bset.rkt" (require/typed/check "block.rkt" (block-rotate-ccw (-> Posn Block Block)) (block-rotate-cw (-> Posn Block Block)) (block=? (-> Block Block Boolean)) (block-move (-> Real Real Block Block))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/block.rkt" (require/typed/check "data.rkt" (posn=? (-> Posn Posn Boolean))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/bset.rkt" (require/typed/check "consts.rkt" (board-width Integer)))
 (quote world?) (lambda (x) (world? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g137 (flat-named-contract (quote world?) (lambda (x) (world? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g138 (simple-result-> g137 2))>) #<syntax g138>)
type->contract:
 (-> world tetra)
 #<->/sc #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))> #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g140 (simple-result-> g130 1))>) #<syntax g140>)
type->contract:
 (-> world BSet)
 #<->/sc #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g135))>)
type->contract:
 (-> posn posn Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g21 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g21))>)
type->contract:
 (-> posn block block)
 #<->/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))> #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g73 (flat-named-contract (quote block?) (lambda (x) (block? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g74 (simple-result-> g73 2))>) #<syntax g74>)
type->contract:
 (-> posn block block)
 #<->/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))> #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>
 (() #<syntax g74>)
type->contract:
 (-> block block Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))> #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g77 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g77))>)
type->contract:
 (-> Real Real block block)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))> #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g79 (simple-result-> g73 3))>) #<syntax g79>)
type->contract:
 Integer
 #<or/sc #<flat/sc exact-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1587:41 exact-integer?>)
type->contract:
 (-> BSet BSet BSet)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x))require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/main.rkt" (require/typed/check "bset.rkt" (blocks-overflow? (-> BSet Boolean))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/main.rkt" (require/typed/check "world.rkt" (world-key-move (-> World String World)) (next-world (-> World World))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/world.rkt" (require/typed/check "bset.rkt" (blocks-union (-> BSet BSet BSet)) (blocks-max-x (-> BSet Real)) (blocks-min-x (-> BSet Real)) (blocks-max-y (-> BSet Real))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/world.rkt" (require/typed/check "tetras.rkt" (tetra-move (-> Real Real Tetra Tetra)) (tetra-rotate-ccw (-> Tetra Tetra)) (tetra-rotate-cw (-> Tetra Tetra)) (tetra-overlaps-blocks? (-> Tetra BSet Boolean)) (tetra-change-color (-> Tetra Color Tetra))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/world.rkt" (require/typed/check "aux.rkt" (list-pick-random (-> (Listof Tetra) Tetra)) (neg-1 Negative-Fixnum) (tetras (Listof Tetra))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/world.rkt" (require/typed/check "elim.rkt" (eliminate-full-rows (-> BSet BSet))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/elim.rkt" (require/typed/check "bset.rkt" (blocks-move (-> Real Real BSet BSet)) (full-row? (-> BSet Natural Boolean)) (blocks-union (-> BSet BSet BSet)) (blocks-row (-> BSet Real BSet))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/elim.rkt" (require/typed/check "consts.rkt" (board-height Integer)))
)>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g33 (flat-named-contract (quote block?) (lambda (x) (block? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g34 (listof g33))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g34))>)
type->contract:
 (-> Real Real BSet BSet)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c) () (values g34))>)
type->contract:
 (-> posn BSet BSet)
 #<->/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g34))>)
type->contract:
 (-> posn BSet BSet)
 #<->/sc #<flat/sc (flat-named-contract (quote posn?) (lambda (x) (posn? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g34))>)
type->contract:
 (-> BSet Symbol BSet)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<flat/sc symbol?> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g34))>)
type->contract:
 (-> Symbol Real Real Real Real Real Real Real Real Real Real tetra)
 #<->/sc #<flat/sc symbol?> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g17 (flat-named-contract (quote tetra?) (lambda (x) (tetra? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c any/c any/c any/c any/c any/c any/c any/c) () (values g17))>)
type->contract:
 (-> Real Real BSet BSet)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g13 (flat-named-contract (quote block?) (lambda (x) (block? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g14 (listof g13))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/tetris/cfg/world.rkt" (require/typed/check "consts.rkt" (board-height Integer) (board-width Integer)))
 (->* (any/c any/c any/c) () (values g14))>)
type->contract:
 (-> BSet Nonnegative-Integer Boolean)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<or/sc #<flat/sc exact-nonnegative-integer?>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g16 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g16))>)
type->contract:
 (-> BSet BSet BSet)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g14))>)
type->contract:
 (-> BSet Real BSet)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<or/sc #<flat/sc real?>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g14))>)
type->contract:
 Integer
 #<or/sc #<flat/sc exact-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1587:41 exact-integer?>)
type->contract:
 (-> BSet BSet BSet)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g31 (flat-named-contract (quote block?) (lambda (x) (block? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g32 (listof g31))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g32))>)
type->contract:
 (-> BSet Real)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<or/sc #<flat/sc real?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g34 (simple-result-> real? 1))>) #<syntax g34>)
type->contract:
 (-> BSet Real)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<or/sc #<flat/sc real?>>>
 (() #<syntax g34>)
type->contract:
 (-> BSet Real)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<or/sc #<flat/sc real?>>>
 (() #<syntax g34>)
type->contract:
 (-> Real Real tetra tetra)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))> #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g38 (flat-named-contract (quote tetra?) (lambda (x) (tetra? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (simple-result-> g38 3))>) #<syntax g39>)
type->contract:
 (-> tetra tetra)
 #<->/sc #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))> #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g41 (simple-result-> g38 1))>) #<syntax g41>)
type->contract:
 (-> tetra tetra)
 #<->/sc #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))> #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>>
 (() #<syntax g41>)
type->contract:
 (-> tetra BSet Boolean)
 #<->/sc #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g44 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c) () (values g44))>)
type->contract:
 (-> tetra Symbol tetra)
 #<->/sc #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))> #<flat/sc symbol?> #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g46 (simple-result-> g38 2))>) #<syntax g46>)
type->contract:
 (-> (Listof tetra) tetra)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>> #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>>
 (() #<syntax g41>)
type->contract:
 Negative-Fixnum
 #<flat/sc (and/c fixnum? negative?)>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g49 (and/c fixnum? negative?))>) #<syntax g49>)
type->contract:
 (Listof tetra)
 #<listof/sc #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g51 (listof g38))>) #<syntax g51>)
type->contract:
 (-> BSet BSet)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g32))>)
type->contract:
 Integer
 #<or/sc #<flat/sc exact-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1587:41 exact-integer?>)
type->contract:
 Integer
 #<or/sc #<flat/sc exact-integer?>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/private/type-contract.rkt:1587:41 exact-integer?>)
type->contract:
 (-> (Listof tetra) tetra)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>> #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g38 (flat-named-contract (quote tetra?) (lambda (x) (tetra? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (simple-result-> g38 1))>) #<syntax g39>)
type->contract:
 (Listof tetra)
 #<listof/sc #<flat/sc (flat-named-contract (quote tetra?) (lambda (x) (tetra? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g41 (listof g38))>) #<syntax g41>)
type->contract:
 (-> BSet Boolean)
 #<->/sc #<listof/sc #<flat/sc (flat-named-contract (quote block?) (lambda (x) (block? x)))>> #<or/sc #<flat/sc (quote #t)> #<flat/sc (quote #f)>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g43 (or/c (quote #t) (quote #f)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c) () (values g43))>)
type->contract:
 (-> world String world)
 #<->/sc #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))> #<flat/sc string?> #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g45 (flat-named-contract (quote world?) (lambda (x) (world? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g46 (simple-result-> g45 2))>) #<syntax g46>)
type->contract:
 (-> world world)
 #<->/sc #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))> #<flat/sc (flat-named-contract (quote world?) (lambda (x) (world? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g48 (simple-result-> g45 1))>) #<syntax g48>)


zombie

require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/zombie/cfg/image-adapted.rkt" (require/typed/check "image.rkt" (#:struct image ((impl : Any))) (empty-scene (-> Real Real Image)) (place-image (-> Image Real Real Image Image)) (circle (-> Real String String Image))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/zombie/cfg/main.rkt" (require/typed/check "zombie.rkt" (w0 World) (world-on-mouse (-> World (-> Real Real String World))) (world-on-tick (-> World (-> World)))))
require-typed-check: #s(require-typed-check-info "/home/ben/code/blame-trail/rds/rational-deep-shallow/code/gtp-bench/zombie/cfg/zombie.rkt" (require/typed/check "math.rkt" (min (-> Real Real Real)) (max (-> Real Real Real)) (abs (-> Real Real)) (sqr (-> Real Real)) (msqrt (-> Real Real))))
type->contract:
 (-> Any image)
 #<->/sc #<and/sc #<any/sc> #<chaperone/sc any-wrap/c>> #<flat/sc (flat-named-contract (quote image?) (lambda (x) (image? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g13 (flat-named-contract (quote image?) (lambda (x) (image? x))))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any-wrap/c) () (values g13))>)
type->contract:
 (-> image Any)
 #<->/sc #<flat/sc (flat-named-contract (quote image?) (lambda (x) (image? x)))> #<any/sc>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g15 (simple-result-> any/c 1))>) #<syntax g15>)
type->contract:
 (-> Real Real image)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<flat/sc (flat-named-contract (quote image?) (lambda (x) (image? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g17 (simple-result-> g13 2))>) #<syntax g17>)
type->contract:
 (-> image Real Real image image)
 #<->/sc #<flat/sc (flat-named-contract (quote image?) (lambda (x) (image? x)))> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<flat/sc (flat-named-contract (quote image?) (lambda (x) (image? x)))> #<flat/sc (flat-named-contract (quote image?) (lambda (x) (image? x)))>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (any/c any/c any/c any/c) () (values g13))>)
type->contract:
 (-> Real String String image)
 #<->/sc #<or/sc #<flat/sc real?>> #<flat/sc string?> #<flat/sc string?> #<flat/sc (flat-named-contract (quote image?) (lambda (x) (image? x)))>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g20 (simple-result-> g13 3))>) #<syntax g20>)
type->contract:
 (-> Real Real Real)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g21 (simple-result-> real? 2))>) #<syntax g21>)
type->contract:
 (-> Real Real Real)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>>>
 (() #<syntax g21>)
type->contract:
 (-> Real Real)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g24 (simple-result-> real? 1))>) #<syntax g24>)
type->contract:
 (-> Real Real)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>>>
 (() #<syntax g24>)
type->contract:
 (-> Real Real)
 #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>>>
 (() #<syntax g24>)
type->contract:
 World
 #<name/sc>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g8 (recursive-contract g24 #:chaperone))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g9 (recursive-contract g34 #:chaperone))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:229:15 (define g10 (recursive-contract g40 #:chaperone))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g12 (or/c (quote #t) (quote #f)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g13 (->* () () (values g12)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g14 (cons/c (quote stop-when) g13))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g15 (flat-named-contract (quote image?) (lambda (x) (image? x))))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g16 (simple-result-> g15 0))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g17 (cons/c (quote to-draw) g16))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g18 (->* () () (values g10)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g19 (cons/c (quote on-tick) g18))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g20 (or/c real?))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g21 (->* (g20 g20 string?) () (values g10)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g22 (cons/c (quote on-mouse) g21))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g23 (or/c g14 g17 g19 g22))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g24 (->* (symbol?) () (values g23)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g25 (->* () () (values g12)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g26 (cons/c (quote stop-when) g25))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g27 (->* () () (values g15)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g28 (cons/c (quote to-draw) g27))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g29 (->* () () (values g9)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g30 (cons/c (quote on-tick) g29))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g31 (->* (g20 g20 string?) () (values g9)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g32 (cons/c (quote on-mouse) g31))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g33 (or/c g26 g28 g30 g32))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g34 (->* (symbol?) () (values g33)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g35 (->* () () (values g8)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g36 (cons/c (quote on-tick) g35))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g37 (->* (g20 g20 string?) () (values g8)))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g38 (cons/c (quote on-mouse) g37))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g39 (or/c g26 g28 g36 g38))> #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g40 (->* (symbol?) () (values g39)))>) #<syntax g10>)
type->contract:
 (-> World (-> Real Real String World))
 #<->/sc #<name/sc> #<->/sc #<or/sc #<flat/sc real?>> #<or/sc #<flat/sc real?>> #<flat/sc string?> #<name/sc>>>
 ((#<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:237:20 (define g42 (->* (any/c any/c any/c) () (values g10)))>) #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g9) () (values g42))>)
type->contract:
 (-> World (-> World))
 #<->/sc #<name/sc> #<->/sc #<name/sc>>>
 (() #<syntax:/home/ben/code/racket/fork/extra-pkgs/typed-racket/typed-racket-lib/typed-racket/static-contracts/combinators/function.rkt:80:6 (->* (g9) () (values g18))>)
```

